mads 2.1.1
  1133 					opt l+
    98 = 0000				?EXTDETECT = 0
    99 = 0000				?VBXDETECT = 0
   100
   101 2075				RCASM 'res/gr_dl.asm' GR.DL_2 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 0020			len = .sizeof(_GR.DL_2)
     6 				mcpy	ift main.GR.DL_2+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 18 +  MWA #MAIN.GR.DL_2 ECX
    13 2088 A9 20 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: gr_dl.asm
     1 = 1000			PM_ADR              = $1000;          // players & missiles memory (2K) start address
     2 = 1300			M0_ADR              = PM_ADR + $300;  // missile 0 start memory address
     3 = 1400			P0_ADR              = PM_ADR + $400;  // player 0 start memory address
     4 = 1500			P1_ADR              = PM_ADR + $500;  // player 1 start memory address
     5 = 1000			GFX_SHIP_ADR        = $1000;          // ship gfx memory start address, ship size = 20 bytes, 16 bytes for gfx and 4 bytes fo top/bottom empty rows
     6 = 000A			GFX_SHIP_SEG        = 10;             // ship gfx 10 byte segment, 10B for P0 & 10B for P1
     7 = 1800			DL_2                = $1800;          // display list memory start address for ANTIC mode 2
     8 = E000			GAME_LMS            = $e000;          // Load Memory Scan address
     3 1800			dl2
     4 1800 70 70 70		:3  .byte $70
     5 1803 42 00 E0		    .byte $42,a(GAME_LMS)
     6 1806 02 02 02 02 02 02 + :23 .byte 2
     7 181D 41 00 18		    .byte $41,a(dl2)
    23 					.print '$R RCASM   ',main.GR.DL_2,'..',main.GR.DL_2+len-1," 'res/gr_dl.asm'"
    23 				$R RCASM   $1800..$181F 'res/gr_dl.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: main.a65
   102 20B6				RCDATA 'res/gfx_ship.bin' GR.GFX_SHIP_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0014			len = .filesize('res/gfx_ship.bin')
    28 20B6				org main.GR.GFX_SHIP_ADR
    30 1000-1013> 00 70 7B 1E + 	ins 'res/gfx_ship.bin'
    32 					.print '$R RCDATA  ',main.GR.GFX_SHIP_ADR,'..',*-1," 'res/gfx_ship.bin'"
    32 				$R RCDATA  $1000..$1013 'res/gfx_ship.bin'
Source: main.a65
   103 				.endl
   104
   105 				; ------------------------------------------------------------
   106
   107 1014				org CODEORIGIN
   108
   109 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
Source: main.a65
   110
   111 				; ------------------------------------------------------------
   112
   113 2000			RTLIB
   114 2000				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
   166 					opt l+
   115
   116 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   116 				ZPAGE: $0080..$00D7
   117
   118 				.print 'RTLIB: ',RTLIB,'..',*-1
   118 				RTLIB: $2000..$20C7
   119
   120 				; ------------------------------------------------------------
   121
   122 20C8			START
   123 20C8 BA				tsx
   124 20C9 8E 2F 22			stx MAIN.@halt+1
   125
   126 					.ifdef fmulinit
   127 					fmulinit
   128 					eif
   129
   130 = 0007			VLEN	= VARDATASIZE-VARINITSIZE
   131 = 224A			VADR	= DATAORIGIN+VARINITSIZE
   132
   133 					ift VADR > $BFFF
   134 					ert 'Invalid memory address range ',VADR
   135 					eli (VLEN>0) && (VLEN<=256)
   136 20CC A2 F9			ldx #256-VLEN
   137 20CE A9 00			lda #$00
   138 20D0 9D 51 21 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   139 					eli VLEN>0
   140 					@fill #VADR #VLEN #$00
   141 					eif
   142
   143 20D6 A9 51 85 82 A9 22 + 	mwa #PROGRAMSTACK psptr
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 					icl 'atari\romoff.asm'
   147 					.endif
   148
   149 20DE A2 0F			ldx #$0F					; DOS II+/D ParamStr
   150 20E0 BD 40 03 9D 34 22 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   151
   152 20E9 E8				inx						; X = 0
   153 20EA 86 90			stx bp						; BP = 0
   154
   155 20EC 8E 08 D2			stx audctl					; reset POKEY
   156 20EF A9 03			lda #3
   157 20F1 8D 0F D2			sta skctl
   158
   159 20F4 CA				dex						; X = 255
   160
   161 20F5				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
    11 20F5 20 43 21			jsr MAIN.GR.@UnitInit
    15 20F8 20 88 21			jsr MAIN.SYS.@UnitInit
   162
   163 20FB			.local	MAIN						; PROCEDURE
   164
   165 20FB 4C 28 22			jmp l_0007
   166
   167 				; ------------------------------------------------------------
   168
   169 20FE			.local	SYSTEM						; UNIT
   170
   171 20FE			.local	FILLBYTE_0042					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   172
   173 				; ------------------------------------------------------------
   174
   175 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   176 				; as Pointer
   177 20FE B5 98			lda :STACKORIGIN,x
   178 2100 85 84			sta VALUE
   179 2102 CA				dex
   180
   181 				; ------------------------------------------------------------
   182
   183 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   184 				; as Pointer
   185 2103 B5 98			lda :STACKORIGIN,x
   186 2105 85 8C			sta COUNT
   187 2107 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   188 2109 85 8D			sta COUNT+1
   189 210B CA				dex
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   194 				; as Pointer
   195 210C B5 98			lda :STACKORIGIN,x
   196 210E 85 88			sta A
   197 2110 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   198 2112 85 89			sta A+1
   199 2114 CA				dex
   200
   201 				; ---------------------  ASM Block 029  ---------------------
   202
   203 2115 20 80 20			jsr @fill
   204
   205
   206 				; ------------------------------------------------------------
   207
   208 = 0088			A	= edx
   209 = 008C			COUNT	= ecx
   210 = 0084			VALUE	= eax
   211 2118			@exit
   212 					.ifdef @new
   213 					lda <@VarData
   214 					sta :ztmp
   215 					lda >@VarData
   216 					ldy #@VarDataSize-1
   217 					jmp @FreeMem
   218 					els
   219 2118 60				rts						; ret
   220 					eif
   221 				.endl
   222
   223 2119			.local	MOVE_004C					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   224
   225 				; ------------------------------------------------------------
   226
   227 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   228 				; as Pointer
   229 2119 B5 98			lda :STACKORIGIN,x
   230 211B 85 84			sta COUNT
   231 211D B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   232 211F 85 85			sta COUNT+1
   233 2121 CA				dex
   234
   235 				; ------------------------------------------------------------
   236
   237 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   238 				; as Pointer
   239 2122 B5 98			lda :STACKORIGIN,x
   240 2124 85 8C			sta DEST
   241 2126 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   242 2128 85 8D			sta DEST+1
   243 212A CA				dex
   244
   245 				; ------------------------------------------------------------
   246
   247 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   248 				; as Pointer
   249 212B B5 98			lda :STACKORIGIN,x
   250 212D 85 88			sta SOURCE
   251 212F B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   252 2131 85 89			sta SOURCE+1
   253 2133 CA				dex
   254
   255 				; ---------------------  ASM Block 031  ---------------------
   256
   257 2134 20 2B 20			jsr @move
   258
   259
   260 				; ------------------------------------------------------------
   261
   262 = 0088			SOURCE	= edx
   263 = 008C			DEST	= ecx
   264 = 0084			COUNT	= eax
   265 2137			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 2137 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 2138			.local	PAUSE_006A					; PROCEDURE | ASSEMBLER | OVERLOAD
   278
   279 				; ---------------------  ASM Block 039  ---------------------
   280
   281 2138 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   282
   283 213E			@exit
   284 					.ifdef @new
   285 					lda <@VarData
   286 					sta :ztmp
   287 					lda >@VarData
   288 					ldy #@VarDataSize-1
   289 					jmp @FreeMem
   290 					els
   291 213E 60				rts						; ret
   292 					eif
   293 				.endl
   294
   295 				; ------------------------------------------------------------
   296
   297 = 0101			__PORTB_BANKS	= $0101
   298 = 0648			M_PI_2	= $0648
   299 = 0192			D_PI_2	= $0192
   300 = 0004			D_PI_180	= $04
   301 = 0000			MGTIA	= $00
   302 = 0080			MVBXE	= $80
   303 = 0000			VBXE_XDLADR	= $00
   304 = 0100			VBXE_BCBADR	= $0100
   305 = 1000			VBXE_MAPADR	= $1000
   306 = 5000			VBXE_OVRADR	= $5000
   307 = B000			VBXE_WINDOW	= $B000
   308 = 0000			IDLI	= $00
   309 = 0001			IVBL	= $01
   310 = 00FE			CH_DELCHR	= $FE
   311 = 009B			CH_ENTER	= $9B
   312 = 001B			CH_ESC	= $1B
   313 = 001C			CH_CURS_UP	= $1C
   314 = 001D			CH_CURS_DOWN	= $1D
   315 = 001E			CH_CURS_LEFT	= $1E
   316 = 001F			CH_CURS_RIGHT	= $1F
   317 = 007F			CH_TAB	= $7F
   318 = 009B			CH_EOL	= $9B
   319 = 007D			CH_CLR	= $7D
   320 = 00FD			CH_BELL	= $FD
   321 = 007E			CH_DEL	= $7E
   322 = 009C			CH_DELLINE	= $9C
   323 = 009D			CH_INSLINE	= $9D
   324 = 0000			COLOR_BLACK	= $00
   325 = 000E			COLOR_WHITE	= $0E
   326 = 0032			COLOR_RED	= $32
   327 = 0096			COLOR_CYAN	= $96
   328 = 0068			COLOR_VIOLET	= $68
   329 = 00C4			COLOR_GREEN	= $C4
   330 = 0074			COLOR_BLUE	= $74
   331 = 00EE			COLOR_YELLOW	= $EE
   332 = 0028			COLOR_ORANGE	= $28
   333 = 00E4			COLOR_BROWN	= $E4
   334 = 003C			COLOR_LIGHTRED	= $3C
   335 = 0004			COLOR_GRAY1	= $04
   336 = 0006			COLOR_GRAY2	= $06
   337 = 000A			COLOR_GRAY3	= $0A
   338 = 00CC			COLOR_LIGHTGREEN	= $CC
   339 = 007C			COLOR_LIGHTBLUE	= $7C
   340 = 0004			FMOPENREAD	= $04
   341 = 0008			FMOPENWRITE	= $08
   342 = 0009			FMOPENAPPEND	= $09
   343 = 000C			FMOPENREADWRITE	= $0C
   344 = 2244			SCREENWIDTH	= DATAORIGIN+$0000
   345 = 2246			SCREENHEIGHT	= DATAORIGIN+$0002
   346 = 2248			DATESEPARATOR	= DATAORIGIN+$0004
   347 = D014			TVSYSTEM	= $D014
   348 = D20A			RND	= $D20A
   349 = 02C0			adr.PALETTE	= $02C0
   350 213F			.var PALETTE	= adr.PALETTE .word
   351 = D012			adr.HPALETTE	= $D012
   352 213F			.var HPALETTE	= adr.HPALETTE .word
   353 = 2249			FILEMODE	= DATAORIGIN+$0005
   354 = 224A			GRAPHMODE	= DATAORIGIN+$0006
   355 = 224B			IORESULT	= DATAORIGIN+$0007
   356 = 224C			EOLN	= DATAORIGIN+$0008
   357 = 224D			RNDSEED	= DATAORIGIN+$0009
   358
   359 = 213F C0 02		PALETTE
   359 = 2141 12 D0		HPALETTE
   359 				.endl							; UNIT SYSTEM
   360
   361 				; ------------------------------------------------------------
   362
   363 2143			.local	REGISTERS					; UNIT
   364
   365 				; ------------------------------------------------------------
   366
   367 = 0014			RTCLOK	= $14
   368 = D000			HPOSP0	= $D000
   369 = D001			HPOSP1	= $D001
   370 = D008			SIZEP0	= $D008
   371 = D009			SIZEP1	= $D009
   372 = D012			COLPM0	= $D012
   373 = D013			COLPM1	= $D013
   374 = D017			COLPF1	= $D017
   375 = D018			COLPF2	= $D018
   376 = D01A			COLBK	= $D01A
   377 = D01B			PRIOR	= $D01B
   378 = D01D			GRACTL	= $D01D
   379 = D301			PORTB	= $D301
   380 = D400			DMACTL	= $D400
   381 = D402			DLIST	= $D402
   382 = D407			PMBASE	= $D407
   383 = D40E			NMIEN	= $D40E
   384 = FFFA			NMIVEC	= $FFFA
   385 = D000			HPOSP01	= $D000
   386 = D008			SIZEP01	= $D008
   387 = D012			COLPM01	= $D012
   388
   389 				.endl							; UNIT REGISTERS
   390
   391 				; ------------------------------------------------------------
   392
   393 2143			.local	GR						; UNIT
   394
   395 				; ------------------------------------------------------------
   396 				; ------------------------------------------------------------
   397 2143			@UnitInit
   398
   399 2143 60				rts
   400
   401 				; ------------------------------------------------------------
   402
   403 = 1000			PM_ADR	= $1000
   404 = 1300			M0_ADR	= $1300
   405 = 1400			P0_ADR	= $1400
   406 = 1500			P1_ADR	= $1500
   407 = 1000			GFX_SHIP_ADR	= $1000
   408 = 000A			GFX_SHIP_SEG	= $0A
   409 = 1800			DL_2	= $1800
   410 = E000			GAME_LMS	= $E000
   411
   412 				.endl							; UNIT GR
   413
   414 				; ------------------------------------------------------------
   415
   416 2144			.local	SYS						; UNIT
   417
   418 2144			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
   419
   420 				; ---------------------  ASM Block 049  ---------------------
   421
   422
   423 				      bit NMIST \ bpl vbi   ; check kind of interrupt
   423 2144 2C 0F D4		      BIT NMIST 
   423 2147 10 03		 BPL VBI   
   424 = 2149			.def  :__dlijmp
   425 2149 4C 51 21		      jmp __off               ; VDSLST
   426 214C E6 14		vbi:  inc RTCLOK+2
   427 = 214E			.def  :__vbijmp
   428 214E 4C 51 21		      jmp __off               ; VBIVEC
   429 = 2151			.def  :__off
   430
   431 2151 40				rti						; ret
   432 				.endl
   433
   434 2152			.local	SETVBI						; PROCEDURE | ASSEMBLER
   435
   436 				; ------------------------------------------------------------
   437
   438 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   439 				; as Pointer
   440 2152 B5 98			lda :STACKORIGIN,x
   441 2154 8D 4F 22			sta A
   442 2157 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   443 2159 8D 50 22			sta A+1
   444 215C CA				dex
   445
   446 				; ---------------------  ASM Block 050  ---------------------
   447
   448
   449 215D AD 4F 22 8D 4F 21 +   mwa a __vbijmp+1
   450
   451
   452 				; ------------------------------------------------------------
   453
   454 = 224F			A	= DATAORIGIN+$000B
   455
   456 = 224F			@VarData	= A
   457 = 0002			@VarDataSize	= 2
   458
   459 2169			@exit
   460 					.ifdef @new
   461 					lda <@VarData
   462 					sta :ztmp
   463 					lda >@VarData
   464 					ldy #@VarDataSize-1
   465 					jmp @FreeMem
   466 					els
   467 2169 60				rts						; ret
   468 					eif
   469 				.endl
   470
   471 216A			.local	SYSTEMOFF					; PROCEDURE
   472
   473 				; optimize FAIL ('SYSTEM.PAUSE_006A', SYS), line = 62
   474
   475 216A 20 38 21			jsr SYSTEM.PAUSE_006A
   476
   477 				; ---------------------  ASM Block 054  ---------------------
   478
   479 216D 78			 sei 
   480
   481 				; optimize OK (SYS), line = 63
   482
   483 216E A9 00			lda #$00
   484 2170 8D 0E D4			sta REGISTERS.NMIEN
   485 2173 A9 FE			lda #$FE
   486 2175 8D 01 D3			sta REGISTERS.PORTB
   487 2178 A9 44			lda <NMI
   488 217A 8D FA FF			sta REGISTERS.NMIVEC
   489 217D A9 21			lda >NMI
   490 217F 8D FB FF			sta REGISTERS.NMIVEC+1
   491 2182 A9 40			lda #$40
   492 2184 8D 0E D4			sta REGISTERS.NMIEN
   493 2187			@exit
   494 					.ifdef @new
   495 					lda <@VarData
   496 					sta :ztmp
   497 					lda >@VarData
   498 					ldy #@VarDataSize-1
   499 					jmp @FreeMem
   500 					els
   501 2187 60				rts						; ret
   502 					eif
   503 				.endl
   504
   505 				; ------------------------------------------------------------
   506 				; ------------------------------------------------------------
   507 2188			@UnitInit
   508
   509 2188 60				rts
   510
   511 				; ------------------------------------------------------------
   512
   513 				.endl							; UNIT SYS
   514
   515 2189			.local	VBI						; PROCEDURE | INTERRUPT
   516
   517 				; ---------------------  ASM Block 055  ---------------------
   518
   519 2189 48 8A 48 98 48	 phr 
   520
   521 				; optimize FAIL (0, main.pas), line = 21
   522
   523 218E E6 00			inc HPOSP0
   524 2190 E6 01			inc HPOSP1
   525 2192 A5 00			lda WSHIPHPOS
   526 2194 8D 00 D0			sta REGISTERS.HPOSP01
   527 2197 A5 01			lda WSHIPHPOS+1
   528 2199 8D 01 D0			sta REGISTERS.HPOSP01+1
   529
   530 				; ---------------------  ASM Block 056  ---------------------
   531
   532 219C 68 A8 68 AA 68	 plr 
   533 21A1 40				rti						; ret
   534 				.endl
   535
   536 21A2			.local	INIT						; PROCEDURE
   537
   538 				; optimize FAIL ('SYS.SYSTEMOFF', main.pas), line = 28
   539
   540 21A2 20 6A 21			jsr SYS.SYSTEMOFF
   541 21A5 A9 00			lda #$00
   542 21A7 8D 00 D4			sta REGISTERS.DMACTL
   543
   544 				; optimize OK (main.pas), line = 30
   545
   546 21AA A9 10			lda #$10
   547 21AC 8D 07 D4			sta REGISTERS.PMBASE
   548
   549 				; optimize OK (main.pas), line = 31
   550
   551 21AF A9 2C			lda #$2C
   552 21B1 85 00			sta HPOSP0
   553 21B3 A9 34			lda #$34
   554 21B5 85 01			sta HPOSP1
   555 21B7 A5 00			lda WSHIPHPOS
   556 21B9 8D 00 D0			sta REGISTERS.HPOSP01
   557 21BC A5 01			lda WSHIPHPOS+1
   558 21BE 8D 01 D0			sta REGISTERS.HPOSP01+1
   559
   560 				; optimize OK (main.pas), line = 32
   561
   562 21C1 A9 0F			lda #$0F
   563 21C3 8D 12 D0			sta REGISTERS.COLPM01
   564 21C6 8D 13 D0			sta REGISTERS.COLPM01+1
   565 21C9 A9 00			lda #$00
   566 21CB 8D 08 D0			sta REGISTERS.SIZEP01
   567 21CE 8D 09 D0			sta REGISTERS.SIZEP01+1
   568 21D1 8D 1B D0			sta REGISTERS.PRIOR
   569 21D4 A9 03			lda #$03
   570 21D6 8D 1D D0			sta REGISTERS.GRACTL
   571
   572 				; optimize OK (main.pas), line = 34
   573
   574 21D9				.LOCAL
   575 21D9 A0 00			ldy #$00
   576 21DB 98				tya
   577 21DC 99 00 13 99 80 13 + fill	:10 sta $1300+#*$80,y
   578 21FA C8				iny
   579 21FB 10 DF			bpl fill
   580 					.ENDL
   581
   582 				; optimize OK (main.pas), line = 35
   583
   584 21FD A0 09			ldy #$09
   585 21FF B9 00 10 99 08 14 + 	mva:rpl $1000,y $1408,y-
   586
   587 				; optimize OK (main.pas), line = 36
   588
   589 2208 A0 09			ldy #$09
   590 220A B9 0A 10 99 08 15 + 	mva:rpl $100A,y $1508,y-
   591
   592 				; optimize FAIL ('SYSTEM.PAUSE_006A', main.pas), line = 38
   593
   594 2213 20 38 21			jsr SYSTEM.PAUSE_006A
   595 2216 A9 3E			lda #$3E
   596 2218 8D 00 D4			sta REGISTERS.DMACTL
   597 221B E8				inx
   598 221C A9 89 95 98			mva <VBI :STACKORIGIN,x
   599 2220 A9 21 95 A8			mva >VBI :STACKORIGIN+STACKWIDTH,x
   600 2224 20 52 21			jsr SYS.SETVBI
   601 2227			@exit
   602 					.ifdef @new
   603 					lda <@VarData
   604 					sta :ztmp
   605 					lda >@VarData
   606 					ldy #@VarDataSize-1
   607 					jmp @FreeMem
   608 					els
   609 2227 60				rts						; ret
   610 					eif
   611 				.endl
   612 2228			l_0007
   613
   614 				; optimize FAIL ('INIT', main.pas), line = 42
   615
   616 2228 20 A2 21			jsr INIT
   617
   618 				; --- RepeatUntilProlog
   619 222B			l_00D3
   620
   621 				; optimize OK (main.pas), line = 43
   622
   623 222B 4C 2B 22			jmp l_00D3
   624
   625 				; ------------------------------------------------------------
   626
   627 = 1000			PM_ADR	= $1000
   628 = 1300			M0_ADR	= $1300
   629 = 1400			P0_ADR	= $1400
   630 = 1500			P1_ADR	= $1500
   631 = 1000			GFX_SHIP_ADR	= $1000
   632 = 000A			GFX_SHIP_SEG	= $0A
   633 = 1800			DL_2	= $1800
   634 = E000			GAME_LMS	= $E000
   635 = 0000			HPOSP0	= $00
   636 = 0001			HPOSP1	= $01
   637 = 0000			WSHIPHPOS	= $00
   638 222E			@exit
   639
   640 222E A2 00		@halt	ldx #$00
   641 2230 9A				txs
   642 					.ifdef MAIN.@DEFINES.ROMOFF
   643 					inc portb
   644 					.endif
   645
   646 2231 A0 01			ldy #$01
   647
   648 2233 60				rts
   649
   650 				; ------------------------------------------------------------
   651
   652 2234 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   653
   654 				; ------------------------------------------------------------
   655
   656 2244			.local	@DEFINES
   657 2244			ATARI
   658 				.endl
   659
   660 2244			.local	@RESOURCE
   661 				.endl
   662
   663 				.endl							; MAIN
   664
   665 				; ------------------------------------------------------------
   666 				; ------------------------------------------------------------
   667
   668 				.macro	UNITINITIALIZATION
   669 				
   670 					.ifdef MAIN.SYSTEM.@UnitInit
   671 					jsr MAIN.SYSTEM.@UnitInit
   672 					eif
   673 				
   674 					.ifdef MAIN.REGISTERS.@UnitInit
   675 					jsr MAIN.REGISTERS.@UnitInit
   676 					eif
   677 				
   678 					.ifdef MAIN.GR.@UnitInit
   679 					jsr MAIN.GR.@UnitInit
   680 					eif
   681 				
   682 					.ifdef MAIN.SYS.@UnitInit
   683 					jsr MAIN.SYS.@UnitInit
   684 					eif
   685 				.endm
   686
   687 				; ------------------------------------------------------------
   688
   689 					ift .SIZEOF(MAIN.SYSTEM) > 0
   690 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   690 				SYSTEM: $20FE..$2142
   691 					eif
   692
   693 					ift .SIZEOF(MAIN.REGISTERS) > 0
   694 					.print 'REGISTERS: ',MAIN.REGISTERS,'..',MAIN.REGISTERS+.SIZEOF(MAIN.REGISTERS)-1
   695 					eif
   696
   697 					ift .SIZEOF(MAIN.GR) > 0
   698 					.print 'GR: ',MAIN.GR,'..',MAIN.GR+.SIZEOF(MAIN.GR)-1
   698 				GR: $2143..$2143
   699 					eif
   700
   701 					ift .SIZEOF(MAIN.SYS) > 0
   702 					.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
   702 				SYS: $2144..$2188
   703 					eif
   704
   705 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
   705 				CODE: $2000..$2243
   706
   707 				; ------------------------------------------------------------
   708
   709 2244				.align $04
   710
   711 2244			DATAORIGIN
   712 2244 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   713
   714 = 0006			VARINITSIZE	= *-DATAORIGIN
   715 = 000D			VARDATASIZE	= 13
   716
   717 = 2251			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   718
   719 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   719 				DATA: $2244..$2251
   720
   721 02E0-02E1> C8 20			run START
   722
   723 				; ------------------------------------------------------------
   724
   725 				.macro	STATICDATA
   726 				.endm
   727
   728 					end
