mads 2.1.1
  1133 					opt l+
    98 = 0000				?EXTDETECT = 0
    99 = 0000				?VBXDETECT = 0
   100
   101 2075				RCASM 'res/dl.asm' GR.DL_2 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 0020			len = .sizeof(_GR.DL_2)
     6 				mcpy	ift main.GR.DL_2+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 10 +  MWA #MAIN.GR.DL_2 ECX
    13 2088 A9 20 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: dl.asm
     1 = 1000			DL_2      = $1000;
     2 = E000			GAME_LMS  = $e000;
     3 1000			dl2
     4 1000 70 70 70		:3  .BYTE $70
     5 1003 42 00 E0		    .BYTE $42,A(GAME_LMS)
     6 1006 02 02 02 02 02 02 + :23 .BYTE 2
     7 101D 41 00 10		    .BYTE $41,A(dl2)
    23 					.print '$R RCASM   ',main.GR.DL_2,'..',main.GR.DL_2+len-1," 'res/dl.asm'"
    23 				$R RCASM   $1000..$101F 'res/dl.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: main.a65
   102 				.endl
   103
   104 				; ------------------------------------------------------------
   105
   106 20B6				org CODEORIGIN
   107
   108 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
Source: main.a65
   109
   110 				; ------------------------------------------------------------
   111
   112 2000			RTLIB
   113 2000				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
   204 					opt l+
   114
   115 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   115 				ZPAGE: $0080..$00D7
   116
   117 				.print 'RTLIB: ',RTLIB,'..',*-1
   117 				RTLIB: $2000..$1FFF
   118
   119 				; ------------------------------------------------------------
   120
   121 2000			START
   122 2000 BA				tsx
   123 2001 8E 94 20			stx MAIN.@halt+1
   124
   125 					.ifdef fmulinit
   126 					fmulinit
   127 					eif
   128
   129 = 0005			VLEN	= VARDATASIZE-VARINITSIZE
   130 = 20AF			VADR	= DATAORIGIN+VARINITSIZE
   131
   132 					ift VADR > $BFFF
   133 					ert 'Invalid memory address range ',VADR
   134 					eli (VLEN>0) && (VLEN<=256)
   135 2004 A2 FB			ldx #256-VLEN
   136 2006 A9 00			lda #$00
   137 2008 9D B4 1F E8 D0 FA		sta:rne VADR+VLEN-256,x+
   138 					eli VLEN>0
   139 					@fill #VADR #VLEN #$00
   140 					eif
   141
   142 200E A9 B4 85 82 A9 20 + 	mwa #PROGRAMSTACK psptr
   143
   144 					.ifdef MAIN.@DEFINES.ROMOFF
   145 					icl 'atari\romoff.asm'
   146 					.endif
   147
   148 2016 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   149 2018 BD 40 03 9D 99 20 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   150
   151 2021 E8				inx						; X = 0
   152 2022 86 90			stx bp						; BP = 0
   153
   154 2024 8E 08 D2			stx audctl					; reset POKEY
   155 2027 A9 03			lda #3
   156 2029 8D 0F D2			sta skctl
   157
   158 202C CA				dex						; X = 255
   159
   160 202D				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
    11 202D 20 4F 20			jsr MAIN.GR.@UnitInit
    15 2030 20 7C 20			jsr MAIN.SYS.@UnitInit
   161
   162 2033			.local	MAIN						; PROCEDURE
   163
   164 2033 4C 8A 20			jmp l_0007
   165
   166 				; ------------------------------------------------------------
   167
   168 2036			.local	SYSTEM						; UNIT
   169
   170 2036			.local	PAUSE_0056					; PROCEDURE | ASSEMBLER | OVERLOAD
   171
   172 				; ---------------------  ASM Block 039  ---------------------
   173
   174 2036 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   175
   176 203C			@exit
   177 					.ifdef @new
   178 					lda <@VarData
   179 					sta :ztmp
   180 					lda >@VarData
   181 					ldy #@VarDataSize-1
   182 					jmp @FreeMem
   183 					els
   184 203C 60				rts						; ret
   185 					eif
   186 				.endl
   187
   188 				; ------------------------------------------------------------
   189
   190 = 0101			__PORTB_BANKS	= $0101
   191 = 0648			M_PI_2	= $0648
   192 = 0192			D_PI_2	= $0192
   193 = 0004			D_PI_180	= $04
   194 = 0000			MGTIA	= $00
   195 = 0080			MVBXE	= $80
   196 = 0000			VBXE_XDLADR	= $00
   197 = 0100			VBXE_BCBADR	= $0100
   198 = 1000			VBXE_MAPADR	= $1000
   199 = 5000			VBXE_OVRADR	= $5000
   200 = B000			VBXE_WINDOW	= $B000
   201 = 0000			IDLI	= $00
   202 = 0001			IVBL	= $01
   203 = 00FE			CH_DELCHR	= $FE
   204 = 009B			CH_ENTER	= $9B
   205 = 001B			CH_ESC	= $1B
   206 = 001C			CH_CURS_UP	= $1C
   207 = 001D			CH_CURS_DOWN	= $1D
   208 = 001E			CH_CURS_LEFT	= $1E
   209 = 001F			CH_CURS_RIGHT	= $1F
   210 = 007F			CH_TAB	= $7F
   211 = 009B			CH_EOL	= $9B
   212 = 007D			CH_CLR	= $7D
   213 = 00FD			CH_BELL	= $FD
   214 = 007E			CH_DEL	= $7E
   215 = 009C			CH_DELLINE	= $9C
   216 = 009D			CH_INSLINE	= $9D
   217 = 0000			COLOR_BLACK	= $00
   218 = 000E			COLOR_WHITE	= $0E
   219 = 0032			COLOR_RED	= $32
   220 = 0096			COLOR_CYAN	= $96
   221 = 0068			COLOR_VIOLET	= $68
   222 = 00C4			COLOR_GREEN	= $C4
   223 = 0074			COLOR_BLUE	= $74
   224 = 00EE			COLOR_YELLOW	= $EE
   225 = 0028			COLOR_ORANGE	= $28
   226 = 00E4			COLOR_BROWN	= $E4
   227 = 003C			COLOR_LIGHTRED	= $3C
   228 = 0004			COLOR_GRAY1	= $04
   229 = 0006			COLOR_GRAY2	= $06
   230 = 000A			COLOR_GRAY3	= $0A
   231 = 00CC			COLOR_LIGHTGREEN	= $CC
   232 = 007C			COLOR_LIGHTBLUE	= $7C
   233 = 0004			FMOPENREAD	= $04
   234 = 0008			FMOPENWRITE	= $08
   235 = 0009			FMOPENAPPEND	= $09
   236 = 000C			FMOPENREADWRITE	= $0C
   237 = 20A9			SCREENWIDTH	= DATAORIGIN+$0000
   238 = 20AB			SCREENHEIGHT	= DATAORIGIN+$0002
   239 = 20AD			DATESEPARATOR	= DATAORIGIN+$0004
   240 = D014			TVSYSTEM	= $D014
   241 = D20A			RND	= $D20A
   242 = 02C0			adr.PALETTE	= $02C0
   243 203D			.var PALETTE	= adr.PALETTE .word
   244 = D012			adr.HPALETTE	= $D012
   245 203D			.var HPALETTE	= adr.HPALETTE .word
   246 = 20AE			FILEMODE	= DATAORIGIN+$0005
   247 = 20AF			GRAPHMODE	= DATAORIGIN+$0006
   248 = 20B0			IORESULT	= DATAORIGIN+$0007
   249 = 20B1			EOLN	= DATAORIGIN+$0008
   250 = 20B2			RNDSEED	= DATAORIGIN+$0009
   251
   252 = 203D C0 02		PALETTE
   252 = 203F 12 D0		HPALETTE
   252 				.endl							; UNIT SYSTEM
   253
   254 				; ------------------------------------------------------------
   255
   256 2041			.local	REGISTERS					; UNIT
   257
   258 				; ------------------------------------------------------------
   259
   260 = D301			PORTB	= $D301
   261 = D402			SDLSTL	= $D402
   262 = D40E			NMIEN	= $D40E
   263 = D402			DLIST	= $D402
   264 = FFFA			NMIVEC	= $FFFA
   265
   266 				.endl							; UNIT REGISTERS
   267
   268 				; ------------------------------------------------------------
   269
   270 2041			.local	GR						; UNIT
   271
   272 2041			.local	MODE2						; PROCEDURE
   273
   274 				; optimize FAIL ('SYSTEM.PAUSE_0056', GR), line = 21
   275
   276 2041 20 36 20			jsr SYSTEM.PAUSE_0056
   277 2044 A9 00 8D 02 D4		mva #$00 REGISTERS.SDLSTL
   278 2049 A9 10 8D 03 D4		mva #$10 REGISTERS.SDLSTL+1
   279 204E			@exit
   280 					.ifdef @new
   281 					lda <@VarData
   282 					sta :ztmp
   283 					lda >@VarData
   284 					ldy #@VarDataSize-1
   285 					jmp @FreeMem
   286 					els
   287 204E 60				rts						; ret
   288 					eif
   289 				.endl
   290
   291 				; ------------------------------------------------------------
   292 				; ------------------------------------------------------------
   293 204F			@UnitInit
   294
   295 204F 60				rts
   296
   297 				; ------------------------------------------------------------
   298
   299 = 1000			DL_2	= $1000
   300 = E000			GAME_LMS	= $E000
   301
   302 				.endl							; UNIT GR
   303
   304 				; ------------------------------------------------------------
   305
   306 2050			.local	SYS						; UNIT
   307
   308 2050			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
   309
   310 				; ---------------------  ASM Block 049  ---------------------
   311
   312
   313 				      bit NMIST \ bpl vbi   ; check kind of interrupt
   313 2050 2C 0F D4		      BIT NMIST 
   313 2053 10 03		 BPL VBI   
   314 = 2055			.def  :__dlijmp
   315 2055 4C 5D 20		      jmp __off               ; VDSLST
   316 2058 E6 14		vbi:  inc RTCLOK+2
   317 = 205A			.def  :__vbijmp
   318 205A 4C 5D 20		      jmp __off               ; VBIVEC
   319 = 205D			.def  :__off
   320
   321 205D 40				rti						; ret
   322 				.endl
   323
   324 205E			.local	SYSTEMOFF					; PROCEDURE
   325
   326 				; optimize FAIL ('SYSTEM.PAUSE_0056', SYS), line = 62
   327
   328 205E 20 36 20			jsr SYSTEM.PAUSE_0056
   329
   330 				; ---------------------  ASM Block 054  ---------------------
   331
   332 2061 78			 sei 
   333
   334 				; optimize OK (SYS), line = 63
   335
   336 2062 A9 00 8D 0E D4		mva #$00 REGISTERS.NMIEN
   337 2067 A9 FE 8D 01 D3		mva #$FE REGISTERS.PORTB
   338 206C A9 50 8D FA FF		mva <NMI REGISTERS.NMIVEC
   339 2071 A9 20 8D FB FF		mva >NMI REGISTERS.NMIVEC+1
   340 2076 A9 40 8D 0E D4		mva #$40 REGISTERS.NMIEN
   341 207B			@exit
   342 					.ifdef @new
   343 					lda <@VarData
   344 					sta :ztmp
   345 					lda >@VarData
   346 					ldy #@VarDataSize-1
   347 					jmp @FreeMem
   348 					els
   349 207B 60				rts						; ret
   350 					eif
   351 				.endl
   352
   353 				; ------------------------------------------------------------
   354 				; ------------------------------------------------------------
   355 207C			@UnitInit
   356
   357 207C 60				rts
   358
   359 				; ------------------------------------------------------------
   360
   361 				.endl							; UNIT SYS
   362
   363 207D			.local	VBI						; PROCEDURE | INTERRUPT
   364
   365 				; ---------------------  ASM Block 055  ---------------------
   366
   367 207D 48 8A 48 98 48	 phr 
   368
   369 				; optimize FAIL (0, main.pas), line = 12
   370
   371 2082 E6 00			inc COUNTER
   372
   373 				; ---------------------  ASM Block 056  ---------------------
   374
   375 2084 68 A8 68 AA 68	 plr 
   376 2089 40				rti						; ret
   377 				.endl
   378 208A			l_0007
   379
   380 				; optimize FAIL ('SYS.SYSTEMOFF', main.pas), line = 17
   381
   382 208A 20 5E 20			jsr SYS.SYSTEMOFF
   383 208D 20 41 20			jsr GR.MODE2
   384
   385 				; --- RepeatUntilProlog
   386 2090			l_0080
   387
   388 				; optimize OK (main.pas), line = 18
   389
   390 2090 4C 90 20			jmp l_0080
   391
   392 				; ------------------------------------------------------------
   393
   394 = 0000			COUNTER	= $00
   395 2093			@exit
   396
   397 2093 A2 00		@halt	ldx #$00
   398 2095 9A				txs
   399 					.ifdef MAIN.@DEFINES.ROMOFF
   400 					inc portb
   401 					.endif
   402
   403 2096 A0 01			ldy #$01
   404
   405 2098 60				rts
   406
   407 				; ------------------------------------------------------------
   408
   409 2099 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   410
   411 				; ------------------------------------------------------------
   412
   413 20A9			.local	@DEFINES
   414 20A9			ATARI
   415 				.endl
   416
   417 20A9			.local	@RESOURCE
   418 				.endl
   419
   420 				.endl							; MAIN
   421
   422 				; ------------------------------------------------------------
   423 				; ------------------------------------------------------------
   424
   425 				.macro	UNITINITIALIZATION
   426 				
   427 					.ifdef MAIN.SYSTEM.@UnitInit
   428 					jsr MAIN.SYSTEM.@UnitInit
   429 					eif
   430 				
   431 					.ifdef MAIN.REGISTERS.@UnitInit
   432 					jsr MAIN.REGISTERS.@UnitInit
   433 					eif
   434 				
   435 					.ifdef MAIN.GR.@UnitInit
   436 					jsr MAIN.GR.@UnitInit
   437 					eif
   438 				
   439 					.ifdef MAIN.SYS.@UnitInit
   440 					jsr MAIN.SYS.@UnitInit
   441 					eif
   442 				.endm
   443
   444 				; ------------------------------------------------------------
   445
   446 					ift .SIZEOF(MAIN.SYSTEM) > 0
   447 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   447 				SYSTEM: $2036..$2040
   448 					eif
   449
   450 					ift .SIZEOF(MAIN.REGISTERS) > 0
   451 					.print 'REGISTERS: ',MAIN.REGISTERS,'..',MAIN.REGISTERS+.SIZEOF(MAIN.REGISTERS)-1
   452 					eif
   453
   454 					ift .SIZEOF(MAIN.GR) > 0
   455 					.print 'GR: ',MAIN.GR,'..',MAIN.GR+.SIZEOF(MAIN.GR)-1
   455 				GR: $2041..$204F
   456 					eif
   457
   458 					ift .SIZEOF(MAIN.SYS) > 0
   459 					.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
   459 				SYS: $2050..$207C
   460 					eif
   461
   462 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
   462 				CODE: $2000..$20A8
   463
   464 				; ------------------------------------------------------------
   465
   466 20A9			DATAORIGIN
   467 20A9 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   468
   469 = 0006			VARINITSIZE	= *-DATAORIGIN
   470 = 000B			VARDATASIZE	= 11
   471
   472 = 20B4			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   473
   474 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   474 				DATA: $20A9..$20B4
   475
   476 02E0-02E1> 00 20			run START
   477
   478 				; ------------------------------------------------------------
   479
   480 				.macro	STATICDATA
   481 				.endm
   482
   483 					end
