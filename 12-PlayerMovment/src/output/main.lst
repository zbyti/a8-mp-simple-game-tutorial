mads 2.1.1
  1133 					opt l+
    98 = 0000				?EXTDETECT = 0
    99 = 0000				?VBXDETECT = 0
   100
   101 2075				RCASM 'res/gr_dl.asm' DL_2 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 0020			len = .sizeof(_DL_2)
     6 				mcpy	ift main.DL_2+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 11 +  MWA #MAIN.DL_2 ECX
    13 2088 A9 20 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: const.inc
     1 = 1000			PM_ADR              = $1000;                      // players & missiles memory (2K) start address
     2 = 1300			M0_ADR              = PM_ADR + $300;              // missile 0 start memory address
     3 = 1400			P0_ADR              = PM_ADR + $400;              // player 0 start memory address
     4 = 1500			P1_ADR              = PM_ADR + $500;              // player 1 start memory address
     5 = 1000			GFX_SHIP_ADR        = $1000;                      // ship gfx memory start address, ship size = 20 bytes, 16 bytes for gfx and 4 bytes fo top/bottom empty rows
     6 = 000A			GFX_SHIP_SEG        = 10;                         // ship gfx 10 byte segment, 10B for P0 & 10B for P1
     8 = 0F0F			SHIP_COL            = $0f0f;
     9 = 0030			SHIP_LEFT_LIMIT     = 48;
    10 = 0080			SHIP_RIGHT_LIMIT    = SHIP_LEFT_LIMIT + (16 * 5);
    11 = 0020			SHIP_TOP_LIMIT      = 32;
    12 = 00B4			SHIP_BOTTOM_LIMIT   = 10 * 18;
    14 = 0008			JOY_LEFT            = %1000;
    15 = 0004			JOY_RIGHT           = %0100;
    16 = 0002			JOY_UP              = %0010;
    17 = 0001			JOY_DOWN            = %0001;
    19 = 1100			DL_2                = $1100;                      // display list memory start address for ANTIC mode 2
    20 = E000			GAME_LMS            = $e000;                      // Load Memory Scan address
     3 1100			dl2
     4 1100 70 70 70		:3  .byte $70
     5 1103 42 00 E0		    .byte $42,a(GAME_LMS)
     6 1106 02 02 02 02 02 02 + :23 .byte 2
     7 111D 41 00 11		    .byte $41,a(dl2)
    23 					.print '$R RCASM   ',main.DL_2,'..',main.DL_2+len-1," 'res/gr_dl.asm'"
    23 				$R RCASM   $1100..$111F 'res/gr_dl.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: main.a65
   102 20B6				RCDATA 'res/gfx_ship.bin' GFX_SHIP_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0014			len = .filesize('res/gfx_ship.bin')
    28 20B6				org main.GFX_SHIP_ADR
    30 1000-1013> 00 70 7B 1E + 	ins 'res/gfx_ship.bin'
    32 					.print '$R RCDATA  ',main.GFX_SHIP_ADR,'..',*-1," 'res/gfx_ship.bin'"
    32 				$R RCDATA  $1000..$1013 'res/gfx_ship.bin'
Source: main.a65
   103 				.endl
   104
   105 				; ------------------------------------------------------------
   106
   107 1014				org CODEORIGIN
   108
   109 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
Source: main.a65
   110
   111 				; ------------------------------------------------------------
   112
   113 2000			RTLIB
   114 2000				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
   166 					opt l+
   115
   116 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   116 				ZPAGE: $0080..$00D7
   117
   118 				.print 'RTLIB: ',RTLIB,'..',*-1
   118 				RTLIB: $2000..$20CE
   119
   120 				; ------------------------------------------------------------
   121
   122 20CF			START
   123 20CF BA				tsx
   124 20D0 8E FF 22			stx MAIN.@halt+1
   125
   126 					.ifdef fmulinit
   127 					fmulinit
   128 					eif
   129
   130 = 0007			VLEN	= VARDATASIZE-VARINITSIZE
   131 = 231A			VADR	= DATAORIGIN+VARINITSIZE
   132
   133 					ift VADR > $BFFF
   134 					ert 'Invalid memory address range ',VADR
   135 					eli (VLEN>0) && (VLEN<=256)
   136 20D3 A2 F9			ldx #256-VLEN
   137 20D5 A9 00			lda #$00
   138 20D7 9D 21 22 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   139 					eli VLEN>0
   140 					@fill #VADR #VLEN #$00
   141 					eif
   142
   143 20DD A9 21 85 82 A9 23 + 	mwa #PROGRAMSTACK psptr
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 					icl 'atari\romoff.asm'
   147 					.endif
   148
   149 20E5 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   150 20E7 BD 40 03 9D 04 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   151
   152 20F0 E8				inx						; X = 0
   153 20F1 86 90			stx bp						; BP = 0
   154
   155 20F3 8E 08 D2			stx audctl					; reset POKEY
   156 20F6 A9 03			lda #3
   157 20F8 8D 0F D2			sta skctl
   158
   159 20FB CA				dex						; X = 255
   160
   161 20FC				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
    11 20FC 20 8B 21			jsr MAIN.SYS.@UnitInit
    15 20FF 20 B3 22			jsr MAIN.SPRITES.@UnitInit
   162
   163 2102			.local	MAIN						; PROCEDURE
   164
   165 2102 4C F8 22			jmp l_0007
   166
   167 				; ------------------------------------------------------------
   168
   169 2105			.local	SYSTEM						; UNIT
   170
   171 2105			.local	FILLBYTE_0042					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   172
   173 				; ------------------------------------------------------------
   174
   175 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   176 				; as Pointer
   177 2105 B5 98			lda :STACKORIGIN,x
   178 2107 85 84			sta VALUE
   179 2109 CA				dex
   180
   181 				; ------------------------------------------------------------
   182
   183 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   184 				; as Pointer
   185 210A B5 98			lda :STACKORIGIN,x
   186 210C 85 8C			sta COUNT
   187 210E B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   188 2110 85 8D			sta COUNT+1
   189 2112 CA				dex
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   194 				; as Pointer
   195 2113 B5 98			lda :STACKORIGIN,x
   196 2115 85 88			sta A
   197 2117 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   198 2119 85 89			sta A+1
   199 211B CA				dex
   200
   201 				; ---------------------  ASM Block 029  ---------------------
   202
   203 211C 20 87 20			jsr @fill
   204
   205
   206 				; ------------------------------------------------------------
   207
   208 = 0088			A	= edx
   209 = 008C			COUNT	= ecx
   210 = 0084			VALUE	= eax
   211 211F			@exit
   212 					.ifdef @new
   213 					lda <@VarData
   214 					sta :ztmp
   215 					lda >@VarData
   216 					ldy #@VarDataSize-1
   217 					jmp @FreeMem
   218 					els
   219 211F 60				rts						; ret
   220 					eif
   221 				.endl
   222
   223 2120			.local	MOVE_004C					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   224
   225 				; ------------------------------------------------------------
   226
   227 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   228 				; as Pointer
   229 2120 B5 98			lda :STACKORIGIN,x
   230 2122 85 84			sta COUNT
   231 2124 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   232 2126 85 85			sta COUNT+1
   233 2128 CA				dex
   234
   235 				; ------------------------------------------------------------
   236
   237 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   238 				; as Pointer
   239 2129 B5 98			lda :STACKORIGIN,x
   240 212B 85 8C			sta DEST
   241 212D B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   242 212F 85 8D			sta DEST+1
   243 2131 CA				dex
   244
   245 				; ------------------------------------------------------------
   246
   247 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   248 				; as Pointer
   249 2132 B5 98			lda :STACKORIGIN,x
   250 2134 85 88			sta SOURCE
   251 2136 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   252 2138 85 89			sta SOURCE+1
   253 213A CA				dex
   254
   255 				; ---------------------  ASM Block 031  ---------------------
   256
   257 213B 20 32 20			jsr @move
   258
   259
   260 				; ------------------------------------------------------------
   261
   262 = 0088			SOURCE	= edx
   263 = 008C			DEST	= ecx
   264 = 0084			COUNT	= eax
   265 213E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 213E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 213F			.local	PAUSE_006A					; PROCEDURE | ASSEMBLER | OVERLOAD
   278
   279 				; ---------------------  ASM Block 039  ---------------------
   280
   281 213F A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   282
   283 2145			@exit
   284 					.ifdef @new
   285 					lda <@VarData
   286 					sta :ztmp
   287 					lda >@VarData
   288 					ldy #@VarDataSize-1
   289 					jmp @FreeMem
   290 					els
   291 2145 60				rts						; ret
   292 					eif
   293 				.endl
   294
   295 				; ------------------------------------------------------------
   296
   297 = 0101			__PORTB_BANKS	= $0101
   298 = 0648			M_PI_2	= $0648
   299 = 0192			D_PI_2	= $0192
   300 = 0004			D_PI_180	= $04
   301 = 0000			MGTIA	= $00
   302 = 0080			MVBXE	= $80
   303 = 0000			VBXE_XDLADR	= $00
   304 = 0100			VBXE_BCBADR	= $0100
   305 = 1000			VBXE_MAPADR	= $1000
   306 = 5000			VBXE_OVRADR	= $5000
   307 = B000			VBXE_WINDOW	= $B000
   308 = 0000			IDLI	= $00
   309 = 0001			IVBL	= $01
   310 = 00FE			CH_DELCHR	= $FE
   311 = 009B			CH_ENTER	= $9B
   312 = 001B			CH_ESC	= $1B
   313 = 001C			CH_CURS_UP	= $1C
   314 = 001D			CH_CURS_DOWN	= $1D
   315 = 001E			CH_CURS_LEFT	= $1E
   316 = 001F			CH_CURS_RIGHT	= $1F
   317 = 007F			CH_TAB	= $7F
   318 = 009B			CH_EOL	= $9B
   319 = 007D			CH_CLR	= $7D
   320 = 00FD			CH_BELL	= $FD
   321 = 007E			CH_DEL	= $7E
   322 = 009C			CH_DELLINE	= $9C
   323 = 009D			CH_INSLINE	= $9D
   324 = 0000			COLOR_BLACK	= $00
   325 = 000E			COLOR_WHITE	= $0E
   326 = 0032			COLOR_RED	= $32
   327 = 0096			COLOR_CYAN	= $96
   328 = 0068			COLOR_VIOLET	= $68
   329 = 00C4			COLOR_GREEN	= $C4
   330 = 0074			COLOR_BLUE	= $74
   331 = 00EE			COLOR_YELLOW	= $EE
   332 = 0028			COLOR_ORANGE	= $28
   333 = 00E4			COLOR_BROWN	= $E4
   334 = 003C			COLOR_LIGHTRED	= $3C
   335 = 0004			COLOR_GRAY1	= $04
   336 = 0006			COLOR_GRAY2	= $06
   337 = 000A			COLOR_GRAY3	= $0A
   338 = 00CC			COLOR_LIGHTGREEN	= $CC
   339 = 007C			COLOR_LIGHTBLUE	= $7C
   340 = 0004			FMOPENREAD	= $04
   341 = 0008			FMOPENWRITE	= $08
   342 = 0009			FMOPENAPPEND	= $09
   343 = 000C			FMOPENREADWRITE	= $0C
   344 = 2314			SCREENWIDTH	= DATAORIGIN+$0000
   345 = 2316			SCREENHEIGHT	= DATAORIGIN+$0002
   346 = 2318			DATESEPARATOR	= DATAORIGIN+$0004
   347 = D014			TVSYSTEM	= $D014
   348 = D20A			RND	= $D20A
   349 = 02C0			adr.PALETTE	= $02C0
   350 2146			.var PALETTE	= adr.PALETTE .word
   351 = D012			adr.HPALETTE	= $D012
   352 2146			.var HPALETTE	= adr.HPALETTE .word
   353 = 2319			FILEMODE	= DATAORIGIN+$0005
   354 = 231A			GRAPHMODE	= DATAORIGIN+$0006
   355 = 231B			IORESULT	= DATAORIGIN+$0007
   356 = 231C			EOLN	= DATAORIGIN+$0008
   357 = 231D			RNDSEED	= DATAORIGIN+$0009
   358
   359 = 2146 C0 02		PALETTE
   359 = 2148 12 D0		HPALETTE
   359 				.endl							; UNIT SYSTEM
   360
   361 				; ------------------------------------------------------------
   362
   363 214A			.local	REGISTERS					; UNIT
   364
   365 				; ------------------------------------------------------------
   366
   367 = 0014			RTCLOK	= $14
   368 = D000			HPOSP0	= $D000
   369 = D001			HPOSP1	= $D001
   370 = D008			SIZEP0	= $D008
   371 = D009			SIZEP1	= $D009
   372 = D012			COLPM0	= $D012
   373 = D013			COLPM1	= $D013
   374 = D017			COLPF1	= $D017
   375 = D018			COLPF2	= $D018
   376 = D01A			COLBK	= $D01A
   377 = D01B			PRIOR	= $D01B
   378 = D01D			GRACTL	= $D01D
   379 = D20A			RND	= $D20A
   380 = D300			PORTA	= $D300
   381 = D301			PORTB	= $D301
   382 = D302			PACTL	= $D302
   383 = D400			DMACTL	= $D400
   384 = D402			DLIST	= $D402
   385 = D407			PMBASE	= $D407
   386 = D40E			NMIEN	= $D40E
   387 = FFFA			NMIVEC	= $FFFA
   388 = D000			HPOSP01	= $D000
   389 = D008			SIZEP01	= $D008
   390 = D012			COLPM01	= $D012
   391
   392 				.endl							; UNIT REGISTERS
   393
   394 				; ------------------------------------------------------------
   395
   396 214A			.local	SYS						; UNIT
   397
   398 214A			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
   399
   400 				; ---------------------  ASM Block 049  ---------------------
   401
   402
   403 				      bit NMIST \ bpl vbi   ; check kind of interrupt
   403 214A 2C 0F D4		      BIT NMIST 
   403 214D 10 03		 BPL VBI   
   404 = 214F			.def  :__dlijmp
   405 214F 4C 57 21		      jmp __off               ; VDSLST
   406 2152 E6 14		vbi:  inc RTCLOK+2
   407 = 2154			.def  :__vbijmp
   408 2154 4C 57 21		      jmp __off               ; VBIVEC
   409 = 2157			.def  :__off
   410
   411 2157 40				rti						; ret
   412 				.endl
   413
   414 2158			.local	SETVBI						; PROCEDURE | ASSEMBLER
   415
   416 				; ------------------------------------------------------------
   417
   418 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   419 				; as Pointer
   420 2158 B5 98			lda :STACKORIGIN,x
   421 215A 8D 1F 23			sta A
   422 215D B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   423 215F 8D 20 23			sta A+1
   424 2162 CA				dex
   425
   426 				; ---------------------  ASM Block 050  ---------------------
   427
   428
   429 2163 AD 1F 23 8D 55 21 +   mwa a __vbijmp+1
   430
   431
   432 				; ------------------------------------------------------------
   433
   434 = 231F			A	= DATAORIGIN+$000B
   435
   436 = 231F			@VarData	= A
   437 = 0002			@VarDataSize	= 2
   438
   439 216F			@exit
   440 					.ifdef @new
   441 					lda <@VarData
   442 					sta :ztmp
   443 					lda >@VarData
   444 					ldy #@VarDataSize-1
   445 					jmp @FreeMem
   446 					els
   447 216F 60				rts						; ret
   448 					eif
   449 				.endl
   450
   451 2170			.local	SYSTEMOFF					; PROCEDURE
   452
   453 				; ---------------------  ASM Block 054  ---------------------
   454
   455 2170 78			 sei 
   456
   457 				; optimize OK (SYS), line = 63
   458
   459 2171 A9 00			lda #$00
   460 2173 8D 0E D4			sta REGISTERS.NMIEN
   461 2176 A9 FE			lda #$FE
   462 2178 8D 01 D3			sta REGISTERS.PORTB
   463 217B A9 4A			lda <NMI
   464 217D 8D FA FF			sta REGISTERS.NMIVEC
   465 2180 A9 21			lda >NMI
   466 2182 8D FB FF			sta REGISTERS.NMIVEC+1
   467 2185 A9 40			lda #$40
   468 2187 8D 0E D4			sta REGISTERS.NMIEN
   469 218A			@exit
   470 					.ifdef @new
   471 					lda <@VarData
   472 					sta :ztmp
   473 					lda >@VarData
   474 					ldy #@VarDataSize-1
   475 					jmp @FreeMem
   476 					els
   477 218A 60				rts						; ret
   478 					eif
   479 				.endl
   480
   481 				; ------------------------------------------------------------
   482 				; ------------------------------------------------------------
   483 218B			@UnitInit
   484
   485 218B 60				rts
   486
   487 				; ------------------------------------------------------------
   488
   489 				.endl							; UNIT SYS
   490
   491 				; ------------------------------------------------------------
   492
   493 218C			.local	SPRITES						; UNIT
   494
   495 218C			.local	COPYSHIP					; PROCEDURE
   496
   497 				; optimize OK (SPRITES), line = 32
   498
   499 218C A5 02			lda BSHIPY
   500 218E 85 8C			sta :ecx
   501 2190 A9 14			lda #$14
   502 2192 85 8D			sta :ecx+1
   503 2194 A9 00			lda #$00
   504 2196 85 88			sta :edx
   505 2198 A9 10			lda #$10
   506 219A 85 89			sta :edx+1
   507 219C A9 0A			lda #$0A
   508 219E 85 84			sta :eax
   509 21A0 A9 00			lda #$00
   510 21A2 85 85			sta :eax+1
   511 21A4 20 32 20			jsr @move
   512
   513 				; optimize OK (SPRITES), line = 33
   514
   515 21A7 A5 02			lda BSHIPY
   516 21A9 85 8C			sta :ecx
   517 21AB A9 15			lda #$15
   518 21AD 85 8D			sta :ecx+1
   519 21AF A9 0A			lda #$0A
   520 21B1 85 88			sta :edx
   521 21B3 A9 10			lda #$10
   522 21B5 85 89			sta :edx+1
   523 21B7 A9 0A			lda #$0A
   524 21B9 85 84			sta :eax
   525 21BB A9 00			lda #$00
   526 21BD 85 85			sta :eax+1
   527 21BF 20 32 20			jsr @move
   528 21C2			@exit
   529 					.ifdef @new
   530 					lda <@VarData
   531 					sta :ztmp
   532 					lda >@VarData
   533 					ldy #@VarDataSize-1
   534 					jmp @FreeMem
   535 					els
   536 21C2 60				rts						; ret
   537 					eif
   538 				.endl
   539
   540 21C3			.local	INIT						; PROCEDURE
   541
   542 				; optimize OK (SPRITES), line = 38
   543
   544 21C3				.LOCAL
   545 21C3 A0 00			ldy #$00
   546 21C5 98				tya
   547 21C6 99 00 13 99 80 13 + fill	:10 sta $1300+#*$80,y
   548 21E4 C8				iny
   549 21E5 10 DF			bpl fill
   550 					.ENDL
   551
   552 				; optimize OK (SPRITES), line = 40
   553
   554 21E7 A9 10			lda #$10
   555 21E9 8D 07 D4			sta REGISTERS.PMBASE
   556
   557 				; optimize OK (SPRITES), line = 41
   558
   559 21EC A9 50			lda #$50
   560 21EE 85 02			sta BSHIPY
   561 21F0 A9 30			lda #$30
   562 21F2 85 00			sta BHPOSP0
   563 21F4 A9 38			lda #$38
   564 21F6 85 01			sta BHPOSP1
   565 21F8 A5 00			lda WSHIPX
   566 21FA 8D 00 D0			sta REGISTERS.HPOSP01
   567 21FD A5 01			lda WSHIPX+1
   568 21FF 8D 01 D0			sta REGISTERS.HPOSP01+1
   569
   570 				; optimize OK (SPRITES), line = 42
   571
   572 2202 A9 0F			lda #$0F
   573 2204 8D 12 D0			sta REGISTERS.COLPM01
   574 2207 8D 13 D0			sta REGISTERS.COLPM01+1
   575 220A A9 00			lda #$00
   576 220C 8D 08 D0			sta REGISTERS.SIZEP01
   577 220F 8D 09 D0			sta REGISTERS.SIZEP01+1
   578 2212 8D 1B D0			sta REGISTERS.PRIOR
   579 2215 A9 03			lda #$03
   580 2217 8D 1D D0			sta REGISTERS.GRACTL
   581
   582 				; optimize FAIL ('COPYSHIP', SPRITES), line = 44
   583
   584 221A 20 8C 21			jsr COPYSHIP
   585 221D			@exit
   586 					.ifdef @new
   587 					lda <@VarData
   588 					sta :ztmp
   589 					lda >@VarData
   590 					ldy #@VarDataSize-1
   591 					jmp @FreeMem
   592 					els
   593 221D 60				rts						; ret
   594 					eif
   595 				.endl
   596
   597 221E			.local	MOVESHIP					; PROCEDURE
   598
   599 				; optimize OK (SPRITES), line = 49
   600
   601 221E A9 0C			lda #$0C
   602 2220 85 FF			sta BMASK
   603
   604 				; optimize OK (SPRITES), line = 50
   605
   606 2222 A9 01			lda #$01
   607 2224 85 FE			sta B01I
   608
   609 2226			l_00D9
   610 				; --- ForToDoCondition
   611
   612 				; ------------------------------------------------------------
   613
   614 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   615 				; as Pointer
   616
   617 2226 E8				inx
   618 2227 A5 03 95 98			mva JOYDIRECTION :STACKORIGIN,x
   619
   620 				; ------------------------------------------------------------
   621
   622 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   623 				; as Pointer
   624
   625 222B E8				inx
   626 222C A5 FF 95 98			mva BMASK :STACKORIGIN,x
   627
   628 				; Generate Binary Operation for BYTE
   629 2230 20 00 20			jsr andAL_CL					; and al, cl
   630 2233 CA				dex
   631
   632 				; GenerateCaseProlog
   633 2234 CA				dex
   634
   635 				; GenerateCaseEqualityCheck
   636 2235 B5 99			lda :STACKORIGIN+1,x
   637 2237 C9 04			cmp #$04
   638 2239 D0 1E			jne l_00F9
   639 223B			@
   640
   641 				; optimize OK (SPRITES), line = 53
   642
   643 223B A5 01			lda BHPOSP1
   644 223D 30 17			jmi l_010B
   645
   646 				; optimize OK (SPRITES), line = 54
   647
   648 223F A5 00			lda WSHIPX
   649 2241 18 69 01			add #$01
   650 2244 85 00			sta WSHIPX
   651 2246 A5 01			lda WSHIPX+1
   652 2248 69 01			adc #$01
   653 224A 85 01			sta WSHIPX+1
   654 224C A5 00			lda WSHIPX
   655 224E 8D 00 D0			sta REGISTERS.HPOSP01
   656 2251 A5 01			lda WSHIPX+1
   657 2253 8D 01 D0			sta REGISTERS.HPOSP01+1
   658 2256			l_010B
   659
   660 				; GenerateCaseStatementEpilog
   661 2256 4C A7 22			jmp a_0002
   662 2259			l_00F9
   663
   664 				; GenerateCaseEqualityCheck
   665 2259 B5 99			lda :STACKORIGIN+1,x
   666 225B C9 08			cmp #$08
   667 225D D0 20			jne l_011D
   668 225F			@
   669
   670 				; optimize OK (SPRITES), line = 58
   671
   672 225F A5 00			lda BHPOSP0
   673 2261 C9 31			cmp #$31
   674 2263 90 17			jcc l_012F
   675
   676 				; optimize OK (SPRITES), line = 59
   677
   678 2265 A5 00			lda WSHIPX
   679 2267 38 E9 01			sub #$01
   680 226A 85 00			sta WSHIPX
   681 226C A5 01			lda WSHIPX+1
   682 226E E9 01			sbc #$01
   683 2270 85 01			sta WSHIPX+1
   684 2272 A5 00			lda WSHIPX
   685 2274 8D 00 D0			sta REGISTERS.HPOSP01
   686 2277 A5 01			lda WSHIPX+1
   687 2279 8D 01 D0			sta REGISTERS.HPOSP01+1
   688 227C			l_012F
   689
   690 				; GenerateCaseStatementEpilog
   691 227C 4C A7 22			jmp a_0002
   692 227F			l_011D
   693
   694 				; GenerateCaseEqualityCheck
   695 227F B5 99			lda :STACKORIGIN+1,x
   696 2281 C9 02			cmp #$02
   697 2283 D0 0E			jne l_0141
   698 2285			@
   699
   700 				; optimize OK (SPRITES), line = 63
   701
   702 2285 A5 02			lda BSHIPY
   703 2287 C9 21			cmp #$21
   704 2289 90 05			jcc l_0153
   705
   706 				; optimize FAIL (0, SPRITES), line = 64
   707
   708 228B C6 02			dec BSHIPY
   709 228D 20 8C 21			jsr COPYSHIP
   710 2290			l_0153
   711
   712 				; GenerateCaseStatementEpilog
   713 2290 4C A7 22			jmp a_0002
   714 2293			l_0141
   715
   716 				; GenerateCaseEqualityCheck
   717 2293 B5 99			lda :STACKORIGIN+1,x
   718 2295 C9 01			cmp #$01
   719 2297 D0 0E			jne l_0164
   720 2299			@
   721
   722 				; optimize OK (SPRITES), line = 68
   723
   724 2299 A5 02			lda BSHIPY
   725 229B C9 B4			cmp #$B4
   726 229D B0 05			jcs l_0176
   727
   728 				; optimize FAIL (0, SPRITES), line = 69
   729
   730 229F E6 02			inc BSHIPY
   731 22A1 20 8C 21			jsr COPYSHIP
   732 22A4			l_0176
   733
   734 				; GenerateCaseStatementEpilog
   735 22A4 4C A7 22			jmp a_0002
   736 22A7			l_0164
   737
   738 				; GenerateCaseEpilog
   739 22A7			a_0002
   740
   741 				; optimize OK (SPRITES), line = 73
   742
   743 22A7 A9 03			lda #$03
   744 22A9 85 FF			sta BMASK
   745
   746 				; --- ForToDoEpilog
   747 22AB C6 FE			dec B01I
   748 22AD 30 03 4C 26 22		jpl l_00D9
   749 22B2			l_00E7
   750
   751 				; ------------------------------------------------------------
   752
   753 = 0000			@FORTMP_00D6	= $00
   754 22B2			@exit
   755 					.ifdef @new
   756 					lda <@VarData
   757 					sta :ztmp
   758 					lda >@VarData
   759 					ldy #@VarDataSize-1
   760 					jmp @FreeMem
   761 					els
   762 22B2 60				rts						; ret
   763 					eif
   764 				.endl
   765
   766 				; ------------------------------------------------------------
   767 				; ------------------------------------------------------------
   768 22B3			@UnitInit
   769
   770 22B3 60				rts
   771
   772 				; ------------------------------------------------------------
   773
   774 = 0003			JOYDIRECTION	= $03
   775 = 1000			PM_ADR	= $1000
   776 = 1300			M0_ADR	= $1300
   777 = 1400			P0_ADR	= $1400
   778 = 1500			P1_ADR	= $1500
   779 = 1000			GFX_SHIP_ADR	= $1000
   780 = 000A			GFX_SHIP_SEG	= $0A
   781 = 0F0F			SHIP_COL	= $0F0F
   782 = 0030			SHIP_LEFT_LIMIT	= $30
   783 = 0080			SHIP_RIGHT_LIMIT	= $80
   784 = 0020			SHIP_TOP_LIMIT	= $20
   785 = 00B4			SHIP_BOTTOM_LIMIT	= $B4
   786 = 0008			JOY_LEFT	= $08
   787 = 0004			JOY_RIGHT	= $04
   788 = 0002			JOY_UP	= $02
   789 = 0001			JOY_DOWN	= $01
   790 = 1100			DL_2	= $1100
   791 = E000			GAME_LMS	= $E000
   792 = 0000			BHPOSP0	= $00
   793 = 0001			BHPOSP1	= $01
   794 = 0002			BSHIPY	= $02
   795 = 00FF			BMASK	= $FF
   796 = 00FE			B01I	= $FE
   797 = 0000			WSHIPX	= $00
   798
   799 				.endl							; UNIT SPRITES
   800
   801 22B4			.local	VBI						; PROCEDURE | INTERRUPT
   802
   803 				; ---------------------  ASM Block 055  ---------------------
   804
   805 22B4 48 8A 48 98 48	 phr 
   806
   807 				; optimize OK (main.pas), line = 17
   808
   809 22B9 AD 00 D3			lda REGISTERS.PORTA
   810 22BC 85 03			sta SPRITES.JOYDIRECTION
   811
   812 				; optimize OK (main.pas), line = 18
   813
   814 22BE 29 0F			and #$0F
   815 22C0 C9 0F			cmp #$0F
   816 22C2 F0 03			jeq l_01AF
   817 22C4 20 1E 22			jsr SPRITES.MOVESHIP
   818 22C7			l_01AF
   819
   820 				; ---------------------  ASM Block 056  ---------------------
   821
   822 22C7 68 A8 68 AA 68	 plr 
   823 22CC 40				rti						; ret
   824 				.endl
   825
   826 22CD			.local	INIT						; PROCEDURE
   827
   828 				; optimize FAIL ('SYSTEM.PAUSE_006A', main.pas), line = 25
   829
   830 22CD 20 3F 21			jsr SYSTEM.PAUSE_006A
   831 22D0 A9 00			lda #$00
   832 22D2 8D 00 D4			sta REGISTERS.DMACTL
   833
   834 				; optimize FAIL ('SYS.SYSTEMOFF', main.pas), line = 27
   835
   836 22D5 20 70 21			jsr SYS.SYSTEMOFF
   837
   838 				; optimize OK (main.pas), line = 28
   839
   840 22D8 AD 02 D3			lda REGISTERS.PACTL
   841 22DB 09 04			ora #$04
   842 22DD 8D 02 D3			sta REGISTERS.PACTL
   843
   844 				; optimize FAIL ('SPRITES.INIT', main.pas), line = 29
   845
   846 22E0 20 C3 21			jsr SPRITES.INIT
   847
   848 				; optimize FAIL ('SYSTEM.PAUSE_006A', main.pas), line = 31
   849
   850 22E3 20 3F 21			jsr SYSTEM.PAUSE_006A
   851 22E6 A9 3E			lda #$3E
   852 22E8 8D 00 D4			sta REGISTERS.DMACTL
   853
   854 				; optimize FAIL ('SYS.SETVBI', main.pas), line = 33
   855
   856 22EB E8				inx
   857 22EC A9 B4 95 98			mva <VBI :STACKORIGIN,x
   858 22F0 A9 22 95 A8			mva >VBI :STACKORIGIN+STACKWIDTH,x
   859 22F4 20 58 21			jsr SYS.SETVBI
   860 22F7			@exit
   861 					.ifdef @new
   862 					lda <@VarData
   863 					sta :ztmp
   864 					lda >@VarData
   865 					ldy #@VarDataSize-1
   866 					jmp @FreeMem
   867 					els
   868 22F7 60				rts						; ret
   869 					eif
   870 				.endl
   871 22F8			l_0007
   872
   873 				; optimize FAIL ('INIT', main.pas), line = 37
   874
   875 22F8 20 CD 22			jsr INIT
   876
   877 				; --- RepeatUntilProlog
   878 22FB			l_01D1
   879
   880 				; optimize OK (main.pas), line = 38
   881
   882 22FB 4C FB 22			jmp l_01D1
   883
   884 				; ------------------------------------------------------------
   885
   886 = 1000			PM_ADR	= $1000
   887 = 1300			M0_ADR	= $1300
   888 = 1400			P0_ADR	= $1400
   889 = 1500			P1_ADR	= $1500
   890 = 1000			GFX_SHIP_ADR	= $1000
   891 = 000A			GFX_SHIP_SEG	= $0A
   892 = 0F0F			SHIP_COL	= $0F0F
   893 = 0030			SHIP_LEFT_LIMIT	= $30
   894 = 0080			SHIP_RIGHT_LIMIT	= $80
   895 = 0020			SHIP_TOP_LIMIT	= $20
   896 = 00B4			SHIP_BOTTOM_LIMIT	= $B4
   897 = 0008			JOY_LEFT	= $08
   898 = 0004			JOY_RIGHT	= $04
   899 = 0002			JOY_UP	= $02
   900 = 0001			JOY_DOWN	= $01
   901 = 1100			DL_2	= $1100
   902 = E000			GAME_LMS	= $E000
   903 22FE			@exit
   904
   905 22FE A2 00		@halt	ldx #$00
   906 2300 9A				txs
   907 					.ifdef MAIN.@DEFINES.ROMOFF
   908 					inc portb
   909 					.endif
   910
   911 2301 A0 01			ldy #$01
   912
   913 2303 60				rts
   914
   915 				; ------------------------------------------------------------
   916
   917 2304 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   918
   919 				; ------------------------------------------------------------
   920
   921 2314			.local	@DEFINES
   922 2314			ATARI
   923 				.endl
   924
   925 2314			.local	@RESOURCE
   926 				.endl
   927
   928 				.endl							; MAIN
   929
   930 				; ------------------------------------------------------------
   931 				; ------------------------------------------------------------
   932
   933 				.macro	UNITINITIALIZATION
   934 				
   935 					.ifdef MAIN.SYSTEM.@UnitInit
   936 					jsr MAIN.SYSTEM.@UnitInit
   937 					eif
   938 				
   939 					.ifdef MAIN.REGISTERS.@UnitInit
   940 					jsr MAIN.REGISTERS.@UnitInit
   941 					eif
   942 				
   943 					.ifdef MAIN.SYS.@UnitInit
   944 					jsr MAIN.SYS.@UnitInit
   945 					eif
   946 				
   947 					.ifdef MAIN.SPRITES.@UnitInit
   948 					jsr MAIN.SPRITES.@UnitInit
   949 					eif
   950 				.endm
   951
   952 				; ------------------------------------------------------------
   953
   954 					ift .SIZEOF(MAIN.SYSTEM) > 0
   955 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   955 				SYSTEM: $2105..$2149
   956 					eif
   957
   958 					ift .SIZEOF(MAIN.REGISTERS) > 0
   959 					.print 'REGISTERS: ',MAIN.REGISTERS,'..',MAIN.REGISTERS+.SIZEOF(MAIN.REGISTERS)-1
   960 					eif
   961
   962 					ift .SIZEOF(MAIN.SYS) > 0
   963 					.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
   963 				SYS: $214A..$218B
   964 					eif
   965
   966 					ift .SIZEOF(MAIN.SPRITES) > 0
   967 					.print 'SPRITES: ',MAIN.SPRITES,'..',MAIN.SPRITES+.SIZEOF(MAIN.SPRITES)-1
   967 				SPRITES: $218C..$22B3
   968 					eif
   969
   970 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
   970 				CODE: $2000..$2313
   971
   972 				; ------------------------------------------------------------
   973
   974 2314				.align $04
   975
   976 2314			DATAORIGIN
   977 2314 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   978
   979 = 0006			VARINITSIZE	= *-DATAORIGIN
   980 = 000D			VARDATASIZE	= 13
   981
   982 = 2321			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   983
   984 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   984 				DATA: $2314..$2321
   985
   986 02E0-02E1> CF 20			run START
   987
   988 				; ------------------------------------------------------------
   989
   990 				.macro	STATICDATA
   991 				.endm
   992
   993 					end
