mads 2.1.1
  1133 					opt l+
    98 = 0000				?EXTDETECT = 0
    99 = 0000				?VBXDETECT = 0
   100
   101 2075				RCASM 'res/gr_dl.asm' DL_2 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 0020			len = .sizeof(_DL_2)
     6 				mcpy	ift main.DL_2+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 11 +  MWA #MAIN.DL_2 ECX
    13 2088 A9 20 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: const.inc
     1 = 1000			PM_ADR              = $1000;                      // players & missiles memory (2K) start address
     2 = 1300			M0_ADR              = PM_ADR + $300;              // missile 0 start memory address
     3 = 1400			P0_ADR              = PM_ADR + $400;              // player 0 start memory address
     4 = 1500			P1_ADR              = PM_ADR + $500;              // player 1 start memory address
     5 = 1000			GFX_SHIP_ADR        = $1000;                      // ship gfx memory start address, ship size = 20 bytes, 16 bytes for gfx and 4 bytes fo top/bottom empty rows
     6 = 000A			GFX_SHIP_SEG        = 10;                         // ship gfx 10 byte segment, 10B for P0 & 10B for P1
     8 = 0F0F			SHIP_COL            = $0f0f;
     9 = 0030			SHIP_LEFT_LIMIT     = 48;
    10 = 0080			SHIP_RIGHT_LIMIT    = SHIP_LEFT_LIMIT + (16 * 5);
    11 = 0020			SHIP_TOP_LIMIT      = 32;
    12 = 00B4			SHIP_BOTTOM_LIMIT   = 10 * 18;
    14 = 0008			JOY_LEFT            = %1000;
    15 = 0004			JOY_RIGHT           = %0100;
    16 = 0002			JOY_UP              = %0010;
    17 = 0001			JOY_DOWN            = %0001;
    19 = 1100			DL_2                = $1100;                      // display list memory start address for ANTIC mode 2
    20 = E000			GAME_LMS            = $e000;                      // Load Memory Scan address
     3 1100			dl2
     4 1100 70 70 70		:3  .byte $70
     5 1103 42 00 E0		    .byte $42,a(GAME_LMS)
     6 1106 02 02 02 02 02 02 + :23 .byte 2
     7 111D 41 00 11		    .byte $41,a(dl2)
    23 					.print '$R RCASM   ',main.DL_2,'..',main.DL_2+len-1," 'res/gr_dl.asm'"
    23 				$R RCASM   $1100..$111F 'res/gr_dl.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: main.a65
   102 20B6				RCDATA 'res/gfx_ship.bin' GFX_SHIP_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0014			len = .filesize('res/gfx_ship.bin')
    28 20B6				org main.GFX_SHIP_ADR
    30 1000-1013> 00 70 7B 1E + 	ins 'res/gfx_ship.bin'
    32 					.print '$R RCDATA  ',main.GFX_SHIP_ADR,'..',*-1," 'res/gfx_ship.bin'"
    32 				$R RCDATA  $1000..$1013 'res/gfx_ship.bin'
Source: main.a65
   103 				.endl
   104
   105 				; ------------------------------------------------------------
   106
   107 1014				org CODEORIGIN
   108
   109 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
Source: main.a65
   110
   111 				; ------------------------------------------------------------
   112
   113 2000			RTLIB
   114 2000				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
   166 					opt l+
   115
   116 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   116 				ZPAGE: $0080..$00D7
   117
   118 				.print 'RTLIB: ',RTLIB,'..',*-1
   118 				RTLIB: $2000..$20CE
   119
   120 				; ------------------------------------------------------------
   121
   122 20CF			START
   123 20CF BA				tsx
   124 20D0 8E FA 22			stx MAIN.@halt+1
   125
   126 					.ifdef fmulinit
   127 					fmulinit
   128 					eif
   129
   130 = 0007			VLEN	= VARDATASIZE-VARINITSIZE
   131 = 2316			VADR	= DATAORIGIN+VARINITSIZE
   132
   133 					ift VADR > $BFFF
   134 					ert 'Invalid memory address range ',VADR
   135 					eli (VLEN>0) && (VLEN<=256)
   136 20D3 A2 F9			ldx #256-VLEN
   137 20D5 A9 00			lda #$00
   138 20D7 9D 1D 22 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   139 					eli VLEN>0
   140 					@fill #VADR #VLEN #$00
   141 					eif
   142
   143 20DD A9 1D 85 82 A9 23 + 	mwa #PROGRAMSTACK psptr
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 					icl 'atari\romoff.asm'
   147 					.endif
   148
   149 20E5 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   150 20E7 BD 40 03 9D FF 22 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   151
   152 20F0 E8				inx						; X = 0
   153 20F1 86 90			stx bp						; BP = 0
   154
   155 20F3 8E 08 D2			stx audctl					; reset POKEY
   156 20F6 A9 03			lda #3
   157 20F8 8D 0F D2			sta skctl
   158
   159 20FB CA				dex						; X = 255
   160
   161 20FC				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
    11 20FC 20 8E 21			jsr MAIN.SYS.@UnitInit
    15 20FF 20 C6 22			jsr MAIN.SPRITES.@UnitInit
   162
   163 2102			.local	MAIN						; PROCEDURE
   164
   165 2102 4C F3 22			jmp l_0007
   166
   167 				; ------------------------------------------------------------
   168
   169 2105			.local	SYSTEM						; UNIT
   170
   171 2105			.local	FILLBYTE_0042					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   172
   173 				; ------------------------------------------------------------
   174
   175 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   176 				; as Pointer
   177 2105 B5 98			lda :STACKORIGIN,x
   178 2107 85 84			sta VALUE
   179 2109 CA				dex
   180
   181 				; ------------------------------------------------------------
   182
   183 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   184 				; as Pointer
   185 210A B5 98			lda :STACKORIGIN,x
   186 210C 85 8C			sta COUNT
   187 210E B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   188 2110 85 8D			sta COUNT+1
   189 2112 CA				dex
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   194 				; as Pointer
   195 2113 B5 98			lda :STACKORIGIN,x
   196 2115 85 88			sta A
   197 2117 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   198 2119 85 89			sta A+1
   199 211B CA				dex
   200
   201 				; ---------------------  ASM Block 029  ---------------------
   202
   203 211C 20 87 20			jsr @fill
   204
   205
   206 				; ------------------------------------------------------------
   207
   208 = 0088			A	= edx
   209 = 008C			COUNT	= ecx
   210 = 0084			VALUE	= eax
   211 211F			@exit
   212 					.ifdef @new
   213 					lda <@VarData
   214 					sta :ztmp
   215 					lda >@VarData
   216 					ldy #@VarDataSize-1
   217 					jmp @FreeMem
   218 					els
   219 211F 60				rts						; ret
   220 					eif
   221 				.endl
   222
   223 2120			.local	MOVE_004C					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   224
   225 				; ------------------------------------------------------------
   226
   227 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   228 				; as Pointer
   229 2120 B5 98			lda :STACKORIGIN,x
   230 2122 85 84			sta COUNT
   231 2124 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   232 2126 85 85			sta COUNT+1
   233 2128 CA				dex
   234
   235 				; ------------------------------------------------------------
   236
   237 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   238 				; as Pointer
   239 2129 B5 98			lda :STACKORIGIN,x
   240 212B 85 8C			sta DEST
   241 212D B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   242 212F 85 8D			sta DEST+1
   243 2131 CA				dex
   244
   245 				; ------------------------------------------------------------
   246
   247 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   248 				; as Pointer
   249 2132 B5 98			lda :STACKORIGIN,x
   250 2134 85 88			sta SOURCE
   251 2136 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   252 2138 85 89			sta SOURCE+1
   253 213A CA				dex
   254
   255 				; ---------------------  ASM Block 031  ---------------------
   256
   257 213B 20 32 20			jsr @move
   258
   259
   260 				; ------------------------------------------------------------
   261
   262 = 0088			SOURCE	= edx
   263 = 008C			DEST	= ecx
   264 = 0084			COUNT	= eax
   265 213E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 213E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 213F			.local	PAUSE_006A					; PROCEDURE | ASSEMBLER | OVERLOAD
   278
   279 				; ---------------------  ASM Block 039  ---------------------
   280
   281 213F A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   282
   283 2145			@exit
   284 					.ifdef @new
   285 					lda <@VarData
   286 					sta :ztmp
   287 					lda >@VarData
   288 					ldy #@VarDataSize-1
   289 					jmp @FreeMem
   290 					els
   291 2145 60				rts						; ret
   292 					eif
   293 				.endl
   294
   295 				; ------------------------------------------------------------
   296
   297 = 0101			__PORTB_BANKS	= $0101
   298 = 0648			M_PI_2	= $0648
   299 = 0192			D_PI_2	= $0192
   300 = 0004			D_PI_180	= $04
   301 = 0000			MGTIA	= $00
   302 = 0080			MVBXE	= $80
   303 = 0000			VBXE_XDLADR	= $00
   304 = 0100			VBXE_BCBADR	= $0100
   305 = 1000			VBXE_MAPADR	= $1000
   306 = 5000			VBXE_OVRADR	= $5000
   307 = B000			VBXE_WINDOW	= $B000
   308 = 0000			IDLI	= $00
   309 = 0001			IVBL	= $01
   310 = 00FE			CH_DELCHR	= $FE
   311 = 009B			CH_ENTER	= $9B
   312 = 001B			CH_ESC	= $1B
   313 = 001C			CH_CURS_UP	= $1C
   314 = 001D			CH_CURS_DOWN	= $1D
   315 = 001E			CH_CURS_LEFT	= $1E
   316 = 001F			CH_CURS_RIGHT	= $1F
   317 = 007F			CH_TAB	= $7F
   318 = 009B			CH_EOL	= $9B
   319 = 007D			CH_CLR	= $7D
   320 = 00FD			CH_BELL	= $FD
   321 = 007E			CH_DEL	= $7E
   322 = 009C			CH_DELLINE	= $9C
   323 = 009D			CH_INSLINE	= $9D
   324 = 0000			COLOR_BLACK	= $00
   325 = 000E			COLOR_WHITE	= $0E
   326 = 0032			COLOR_RED	= $32
   327 = 0096			COLOR_CYAN	= $96
   328 = 0068			COLOR_VIOLET	= $68
   329 = 00C4			COLOR_GREEN	= $C4
   330 = 0074			COLOR_BLUE	= $74
   331 = 00EE			COLOR_YELLOW	= $EE
   332 = 0028			COLOR_ORANGE	= $28
   333 = 00E4			COLOR_BROWN	= $E4
   334 = 003C			COLOR_LIGHTRED	= $3C
   335 = 0004			COLOR_GRAY1	= $04
   336 = 0006			COLOR_GRAY2	= $06
   337 = 000A			COLOR_GRAY3	= $0A
   338 = 00CC			COLOR_LIGHTGREEN	= $CC
   339 = 007C			COLOR_LIGHTBLUE	= $7C
   340 = 0004			FMOPENREAD	= $04
   341 = 0008			FMOPENWRITE	= $08
   342 = 0009			FMOPENAPPEND	= $09
   343 = 000C			FMOPENREADWRITE	= $0C
   344 = 2310			SCREENWIDTH	= DATAORIGIN+$0000
   345 = 2312			SCREENHEIGHT	= DATAORIGIN+$0002
   346 = 2314			DATESEPARATOR	= DATAORIGIN+$0004
   347 = D014			TVSYSTEM	= $D014
   348 = D20A			RND	= $D20A
   349 = 02C0			adr.PALETTE	= $02C0
   350 2146			.var PALETTE	= adr.PALETTE .word
   351 = D012			adr.HPALETTE	= $D012
   352 2146			.var HPALETTE	= adr.HPALETTE .word
   353 = 2315			FILEMODE	= DATAORIGIN+$0005
   354 = 2316			GRAPHMODE	= DATAORIGIN+$0006
   355 = 2317			IORESULT	= DATAORIGIN+$0007
   356 = 2318			EOLN	= DATAORIGIN+$0008
   357 = 2319			RNDSEED	= DATAORIGIN+$0009
   358
   359 = 2146 C0 02		PALETTE
   359 = 2148 12 D0		HPALETTE
   359 				.endl							; UNIT SYSTEM
   360
   361 				; ------------------------------------------------------------
   362
   363 214A			.local	REGISTERS					; UNIT
   364
   365 				; ------------------------------------------------------------
   366
   367 = 0014			RTCLOK	= $14
   368 = D000			HPOSP0	= $D000
   369 = D001			HPOSP1	= $D001
   370 = D008			SIZEP0	= $D008
   371 = D009			SIZEP1	= $D009
   372 = D012			COLPM0	= $D012
   373 = D013			COLPM1	= $D013
   374 = D017			COLPF1	= $D017
   375 = D018			COLPF2	= $D018
   376 = D01A			COLBK	= $D01A
   377 = D01B			PRIOR	= $D01B
   378 = D01D			GRACTL	= $D01D
   379 = D20A			RND	= $D20A
   380 = D300			PORTA	= $D300
   381 = D301			PORTB	= $D301
   382 = D400			DMACTL	= $D400
   383 = D402			DLIST	= $D402
   384 = D407			PMBASE	= $D407
   385 = D40E			NMIEN	= $D40E
   386 = FFFA			NMIVEC	= $FFFA
   387 = D000			HPOSP01	= $D000
   388 = D008			SIZEP01	= $D008
   389 = D012			COLPM01	= $D012
   390
   391 				.endl							; UNIT REGISTERS
   392
   393 				; ------------------------------------------------------------
   394
   395 214A			.local	SYS						; UNIT
   396
   397 214A			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
   398
   399 				; ---------------------  ASM Block 049  ---------------------
   400
   401
   402 				      bit NMIST \ bpl vbi   ; check kind of interrupt
   402 214A 2C 0F D4		      BIT NMIST 
   402 214D 10 03		 BPL VBI   
   403 = 214F			.def  :__dlijmp
   404 214F 4C 57 21		      jmp __off               ; VDSLST
   405 2152 E6 14		vbi:  inc RTCLOK+2
   406 = 2154			.def  :__vbijmp
   407 2154 4C 57 21		      jmp __off               ; VBIVEC
   408 = 2157			.def  :__off
   409
   410 2157 40				rti						; ret
   411 				.endl
   412
   413 2158			.local	SETVBI						; PROCEDURE | ASSEMBLER
   414
   415 				; ------------------------------------------------------------
   416
   417 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   418 				; as Pointer
   419 2158 B5 98			lda :STACKORIGIN,x
   420 215A 8D 1B 23			sta A
   421 215D B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   422 215F 8D 1C 23			sta A+1
   423 2162 CA				dex
   424
   425 				; ---------------------  ASM Block 050  ---------------------
   426
   427
   428 2163 AD 1B 23 8D 55 21 +   mwa a __vbijmp+1
   429
   430
   431 				; ------------------------------------------------------------
   432
   433 = 231B			A	= DATAORIGIN+$000B
   434
   435 = 231B			@VarData	= A
   436 = 0002			@VarDataSize	= 2
   437
   438 216F			@exit
   439 					.ifdef @new
   440 					lda <@VarData
   441 					sta :ztmp
   442 					lda >@VarData
   443 					ldy #@VarDataSize-1
   444 					jmp @FreeMem
   445 					els
   446 216F 60				rts						; ret
   447 					eif
   448 				.endl
   449
   450 2170			.local	SYSTEMOFF					; PROCEDURE
   451
   452 				; optimize FAIL ('SYSTEM.PAUSE_006A', SYS), line = 62
   453
   454 2170 20 3F 21			jsr SYSTEM.PAUSE_006A
   455
   456 				; ---------------------  ASM Block 054  ---------------------
   457
   458 2173 78			 sei 
   459
   460 				; optimize OK (SYS), line = 63
   461
   462 2174 A9 00			lda #$00
   463 2176 8D 0E D4			sta REGISTERS.NMIEN
   464 2179 A9 FE			lda #$FE
   465 217B 8D 01 D3			sta REGISTERS.PORTB
   466 217E A9 4A			lda <NMI
   467 2180 8D FA FF			sta REGISTERS.NMIVEC
   468 2183 A9 21			lda >NMI
   469 2185 8D FB FF			sta REGISTERS.NMIVEC+1
   470 2188 A9 40			lda #$40
   471 218A 8D 0E D4			sta REGISTERS.NMIEN
   472 218D			@exit
   473 					.ifdef @new
   474 					lda <@VarData
   475 					sta :ztmp
   476 					lda >@VarData
   477 					ldy #@VarDataSize-1
   478 					jmp @FreeMem
   479 					els
   480 218D 60				rts						; ret
   481 					eif
   482 				.endl
   483
   484 				; ------------------------------------------------------------
   485 				; ------------------------------------------------------------
   486 218E			@UnitInit
   487
   488 218E 60				rts
   489
   490 				; ------------------------------------------------------------
   491
   492 				.endl							; UNIT SYS
   493
   494 				; ------------------------------------------------------------
   495
   496 218F			.local	SPRITES						; UNIT
   497
   498 218F			.local	COPYSHIP					; PROCEDURE
   499
   500 				; optimize OK (SPRITES), line = 32
   501
   502 218F A5 02			lda BSHIPY
   503 2191 85 8C			sta :ecx
   504 2193 A9 14			lda #$14
   505 2195 85 8D			sta :ecx+1
   506 2197 A9 00			lda #$00
   507 2199 85 88			sta :edx
   508 219B A9 10			lda #$10
   509 219D 85 89			sta :edx+1
   510 219F A9 0A			lda #$0A
   511 21A1 85 84			sta :eax
   512 21A3 A9 00			lda #$00
   513 21A5 85 85			sta :eax+1
   514 21A7 20 32 20			jsr @move
   515
   516 				; optimize OK (SPRITES), line = 33
   517
   518 21AA A5 02			lda BSHIPY
   519 21AC 85 8C			sta :ecx
   520 21AE A9 15			lda #$15
   521 21B0 85 8D			sta :ecx+1
   522 21B2 A9 0A			lda #$0A
   523 21B4 85 88			sta :edx
   524 21B6 A9 10			lda #$10
   525 21B8 85 89			sta :edx+1
   526 21BA A9 0A			lda #$0A
   527 21BC 85 84			sta :eax
   528 21BE A9 00			lda #$00
   529 21C0 85 85			sta :eax+1
   530 21C2 20 32 20			jsr @move
   531 21C5			@exit
   532 					.ifdef @new
   533 					lda <@VarData
   534 					sta :ztmp
   535 					lda >@VarData
   536 					ldy #@VarDataSize-1
   537 					jmp @FreeMem
   538 					els
   539 21C5 60				rts						; ret
   540 					eif
   541 				.endl
   542
   543 21C6			.local	INIT						; PROCEDURE
   544
   545 				; optimize FAIL ('SYSTEM.PAUSE_006A', SPRITES), line = 38
   546
   547 21C6 20 3F 21			jsr SYSTEM.PAUSE_006A
   548 21C9 A9 00			lda #$00
   549 21CB 8D 00 D4			sta REGISTERS.DMACTL
   550
   551 				; optimize OK (SPRITES), line = 40
   552
   553 21CE				.LOCAL
   554 21CE A0 00			ldy #$00
   555 21D0 98				tya
   556 21D1 99 00 13 99 80 13 + fill	:10 sta $1300+#*$80,y
   557 21EF C8				iny
   558 21F0 10 DF			bpl fill
   559 					.ENDL
   560
   561 				; optimize OK (SPRITES), line = 42
   562
   563 21F2 A9 10			lda #$10
   564 21F4 8D 07 D4			sta REGISTERS.PMBASE
   565
   566 				; optimize OK (SPRITES), line = 43
   567
   568 21F7 A9 50			lda #$50
   569 21F9 85 02			sta BSHIPY
   570 21FB A9 30			lda #$30
   571 21FD 85 00			sta BHPOSP0
   572 21FF A9 38			lda #$38
   573 2201 85 01			sta BHPOSP1
   574 2203 A5 00			lda WSHIPX
   575 2205 8D 00 D0			sta REGISTERS.HPOSP01
   576 2208 A5 01			lda WSHIPX+1
   577 220A 8D 01 D0			sta REGISTERS.HPOSP01+1
   578
   579 				; optimize OK (SPRITES), line = 44
   580
   581 220D A9 0F			lda #$0F
   582 220F 8D 12 D0			sta REGISTERS.COLPM01
   583 2212 8D 13 D0			sta REGISTERS.COLPM01+1
   584 2215 A9 00			lda #$00
   585 2217 8D 08 D0			sta REGISTERS.SIZEP01
   586 221A 8D 09 D0			sta REGISTERS.SIZEP01+1
   587 221D 8D 1B D0			sta REGISTERS.PRIOR
   588 2220 A9 03			lda #$03
   589 2222 8D 1D D0			sta REGISTERS.GRACTL
   590
   591 				; optimize FAIL ('COPYSHIP', SPRITES), line = 46
   592
   593 2225 20 8F 21			jsr COPYSHIP
   594
   595 				; optimize FAIL ('SYSTEM.PAUSE_006A', SPRITES), line = 48
   596
   597 2228 20 3F 21			jsr SYSTEM.PAUSE_006A
   598 222B A9 3E			lda #$3E
   599 222D 8D 00 D4			sta REGISTERS.DMACTL
   600 2230			@exit
   601 					.ifdef @new
   602 					lda <@VarData
   603 					sta :ztmp
   604 					lda >@VarData
   605 					ldy #@VarDataSize-1
   606 					jmp @FreeMem
   607 					els
   608 2230 60				rts						; ret
   609 					eif
   610 				.endl
   611
   612 2231			.local	MOVESHIP					; PROCEDURE
   613
   614 				; optimize OK (SPRITES), line = 53
   615
   616 2231 A9 0C			lda #$0C
   617 2233 85 FF			sta BMASK
   618
   619 				; optimize OK (SPRITES), line = 54
   620
   621 2235 A9 01			lda #$01
   622 2237 85 FE			sta B01I
   623
   624 2239			l_00E4
   625 				; --- ForToDoCondition
   626
   627 				; ------------------------------------------------------------
   628
   629 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   630 				; as Pointer
   631
   632 2239 E8				inx
   633 223A A5 03 95 98			mva JOYDIRECTION :STACKORIGIN,x
   634
   635 				; ------------------------------------------------------------
   636
   637 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   638 				; as Pointer
   639
   640 223E E8				inx
   641 223F A5 FF 95 98			mva BMASK :STACKORIGIN,x
   642
   643 				; Generate Binary Operation for BYTE
   644 2243 20 00 20			jsr andAL_CL					; and al, cl
   645 2246 CA				dex
   646
   647 				; GenerateCaseProlog
   648 2247 CA				dex
   649
   650 				; GenerateCaseEqualityCheck
   651 2248 B5 99			lda :STACKORIGIN+1,x
   652 224A C9 04			cmp #$04
   653 224C D0 1E			jne l_0104
   654 224E			@
   655
   656 				; optimize OK (SPRITES), line = 57
   657
   658 224E A5 01			lda BHPOSP1
   659 2250 30 17			jmi l_0116
   660
   661 				; optimize OK (SPRITES), line = 58
   662
   663 2252 A5 00			lda WSHIPX
   664 2254 18 69 01			add #$01
   665 2257 85 00			sta WSHIPX
   666 2259 A5 01			lda WSHIPX+1
   667 225B 69 01			adc #$01
   668 225D 85 01			sta WSHIPX+1
   669 225F A5 00			lda WSHIPX
   670 2261 8D 00 D0			sta REGISTERS.HPOSP01
   671 2264 A5 01			lda WSHIPX+1
   672 2266 8D 01 D0			sta REGISTERS.HPOSP01+1
   673 2269			l_0116
   674
   675 				; GenerateCaseStatementEpilog
   676 2269 4C BA 22			jmp a_0002
   677 226C			l_0104
   678
   679 				; GenerateCaseEqualityCheck
   680 226C B5 99			lda :STACKORIGIN+1,x
   681 226E C9 08			cmp #$08
   682 2270 D0 20			jne l_0128
   683 2272			@
   684
   685 				; optimize OK (SPRITES), line = 62
   686
   687 2272 A5 00			lda BHPOSP0
   688 2274 C9 31			cmp #$31
   689 2276 90 17			jcc l_013A
   690
   691 				; optimize OK (SPRITES), line = 63
   692
   693 2278 A5 00			lda WSHIPX
   694 227A 38 E9 01			sub #$01
   695 227D 85 00			sta WSHIPX
   696 227F A5 01			lda WSHIPX+1
   697 2281 E9 01			sbc #$01
   698 2283 85 01			sta WSHIPX+1
   699 2285 A5 00			lda WSHIPX
   700 2287 8D 00 D0			sta REGISTERS.HPOSP01
   701 228A A5 01			lda WSHIPX+1
   702 228C 8D 01 D0			sta REGISTERS.HPOSP01+1
   703 228F			l_013A
   704
   705 				; GenerateCaseStatementEpilog
   706 228F 4C BA 22			jmp a_0002
   707 2292			l_0128
   708
   709 				; GenerateCaseEqualityCheck
   710 2292 B5 99			lda :STACKORIGIN+1,x
   711 2294 C9 02			cmp #$02
   712 2296 D0 0E			jne l_014C
   713 2298			@
   714
   715 				; optimize OK (SPRITES), line = 67
   716
   717 2298 A5 02			lda BSHIPY
   718 229A C9 21			cmp #$21
   719 229C 90 05			jcc l_015E
   720
   721 				; optimize FAIL (0, SPRITES), line = 68
   722
   723 229E C6 02			dec BSHIPY
   724 22A0 20 8F 21			jsr COPYSHIP
   725 22A3			l_015E
   726
   727 				; GenerateCaseStatementEpilog
   728 22A3 4C BA 22			jmp a_0002
   729 22A6			l_014C
   730
   731 				; GenerateCaseEqualityCheck
   732 22A6 B5 99			lda :STACKORIGIN+1,x
   733 22A8 C9 01			cmp #$01
   734 22AA D0 0E			jne l_016F
   735 22AC			@
   736
   737 				; optimize OK (SPRITES), line = 72
   738
   739 22AC A5 02			lda BSHIPY
   740 22AE C9 B4			cmp #$B4
   741 22B0 B0 05			jcs l_0181
   742
   743 				; optimize FAIL (0, SPRITES), line = 73
   744
   745 22B2 E6 02			inc BSHIPY
   746 22B4 20 8F 21			jsr COPYSHIP
   747 22B7			l_0181
   748
   749 				; GenerateCaseStatementEpilog
   750 22B7 4C BA 22			jmp a_0002
   751 22BA			l_016F
   752
   753 				; GenerateCaseEpilog
   754 22BA			a_0002
   755
   756 				; optimize OK (SPRITES), line = 77
   757
   758 22BA A9 03			lda #$03
   759 22BC 85 FF			sta BMASK
   760
   761 				; --- ForToDoEpilog
   762 22BE C6 FE			dec B01I
   763 22C0 30 03 4C 39 22		jpl l_00E4
   764 22C5			l_00F2
   765
   766 				; ------------------------------------------------------------
   767
   768 = 0000			@FORTMP_00E1	= $00
   769 22C5			@exit
   770 					.ifdef @new
   771 					lda <@VarData
   772 					sta :ztmp
   773 					lda >@VarData
   774 					ldy #@VarDataSize-1
   775 					jmp @FreeMem
   776 					els
   777 22C5 60				rts						; ret
   778 					eif
   779 				.endl
   780
   781 				; ------------------------------------------------------------
   782 				; ------------------------------------------------------------
   783 22C6			@UnitInit
   784
   785 22C6 60				rts
   786
   787 				; ------------------------------------------------------------
   788
   789 = 0003			JOYDIRECTION	= $03
   790 = 1000			PM_ADR	= $1000
   791 = 1300			M0_ADR	= $1300
   792 = 1400			P0_ADR	= $1400
   793 = 1500			P1_ADR	= $1500
   794 = 1000			GFX_SHIP_ADR	= $1000
   795 = 000A			GFX_SHIP_SEG	= $0A
   796 = 0F0F			SHIP_COL	= $0F0F
   797 = 0030			SHIP_LEFT_LIMIT	= $30
   798 = 0080			SHIP_RIGHT_LIMIT	= $80
   799 = 0020			SHIP_TOP_LIMIT	= $20
   800 = 00B4			SHIP_BOTTOM_LIMIT	= $B4
   801 = 0008			JOY_LEFT	= $08
   802 = 0004			JOY_RIGHT	= $04
   803 = 0002			JOY_UP	= $02
   804 = 0001			JOY_DOWN	= $01
   805 = 1100			DL_2	= $1100
   806 = E000			GAME_LMS	= $E000
   807 = 0000			BHPOSP0	= $00
   808 = 0001			BHPOSP1	= $01
   809 = 0002			BSHIPY	= $02
   810 = 00FF			BMASK	= $FF
   811 = 00FE			B01I	= $FE
   812 = 0000			WSHIPX	= $00
   813
   814 				.endl							; UNIT SPRITES
   815
   816 22C7			.local	VBI						; PROCEDURE | INTERRUPT
   817
   818 				; ---------------------  ASM Block 055  ---------------------
   819
   820 22C7 48 8A 48 98 48	 phr 
   821
   822 				; optimize OK (main.pas), line = 17
   823
   824 22CC AD 00 D3			lda REGISTERS.PORTA
   825 22CF 85 03			sta SPRITES.JOYDIRECTION
   826
   827 				; optimize OK (main.pas), line = 18
   828
   829 22D1 29 0F			and #$0F
   830 22D3 C9 0F			cmp #$0F
   831 22D5 F0 03			jeq l_01BA
   832 22D7 20 31 22			jsr SPRITES.MOVESHIP
   833 22DA			l_01BA
   834
   835 				; ---------------------  ASM Block 056  ---------------------
   836
   837 22DA 68 A8 68 AA 68	 plr 
   838 22DF 40				rti						; ret
   839 				.endl
   840
   841 22E0			.local	INIT						; PROCEDURE
   842
   843 				; optimize FAIL ('SYS.SYSTEMOFF', main.pas), line = 25
   844
   845 22E0 20 70 21			jsr SYS.SYSTEMOFF
   846
   847 				; optimize FAIL ('SPRITES.INIT', main.pas), line = 26
   848
   849 22E3 20 C6 21			jsr SPRITES.INIT
   850
   851 				; optimize FAIL ('SYS.SETVBI', main.pas), line = 27
   852
   853 22E6 E8				inx
   854 22E7 A9 C7 95 98			mva <VBI :STACKORIGIN,x
   855 22EB A9 22 95 A8			mva >VBI :STACKORIGIN+STACKWIDTH,x
   856 22EF 20 58 21			jsr SYS.SETVBI
   857 22F2			@exit
   858 					.ifdef @new
   859 					lda <@VarData
   860 					sta :ztmp
   861 					lda >@VarData
   862 					ldy #@VarDataSize-1
   863 					jmp @FreeMem
   864 					els
   865 22F2 60				rts						; ret
   866 					eif
   867 				.endl
   868 22F3			l_0007
   869
   870 				; optimize FAIL ('INIT', main.pas), line = 31
   871
   872 22F3 20 E0 22			jsr INIT
   873
   874 				; --- RepeatUntilProlog
   875 22F6			l_01C8
   876
   877 				; optimize OK (main.pas), line = 32
   878
   879 22F6 4C F6 22			jmp l_01C8
   880
   881 				; ------------------------------------------------------------
   882
   883 = 1000			PM_ADR	= $1000
   884 = 1300			M0_ADR	= $1300
   885 = 1400			P0_ADR	= $1400
   886 = 1500			P1_ADR	= $1500
   887 = 1000			GFX_SHIP_ADR	= $1000
   888 = 000A			GFX_SHIP_SEG	= $0A
   889 = 0F0F			SHIP_COL	= $0F0F
   890 = 0030			SHIP_LEFT_LIMIT	= $30
   891 = 0080			SHIP_RIGHT_LIMIT	= $80
   892 = 0020			SHIP_TOP_LIMIT	= $20
   893 = 00B4			SHIP_BOTTOM_LIMIT	= $B4
   894 = 0008			JOY_LEFT	= $08
   895 = 0004			JOY_RIGHT	= $04
   896 = 0002			JOY_UP	= $02
   897 = 0001			JOY_DOWN	= $01
   898 = 1100			DL_2	= $1100
   899 = E000			GAME_LMS	= $E000
   900 22F9			@exit
   901
   902 22F9 A2 00		@halt	ldx #$00
   903 22FB 9A				txs
   904 					.ifdef MAIN.@DEFINES.ROMOFF
   905 					inc portb
   906 					.endif
   907
   908 22FC A0 01			ldy #$01
   909
   910 22FE 60				rts
   911
   912 				; ------------------------------------------------------------
   913
   914 22FF 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   915
   916 				; ------------------------------------------------------------
   917
   918 230F			.local	@DEFINES
   919 230F			ATARI
   920 				.endl
   921
   922 230F			.local	@RESOURCE
   923 				.endl
   924
   925 				.endl							; MAIN
   926
   927 				; ------------------------------------------------------------
   928 				; ------------------------------------------------------------
   929
   930 				.macro	UNITINITIALIZATION
   931 				
   932 					.ifdef MAIN.SYSTEM.@UnitInit
   933 					jsr MAIN.SYSTEM.@UnitInit
   934 					eif
   935 				
   936 					.ifdef MAIN.REGISTERS.@UnitInit
   937 					jsr MAIN.REGISTERS.@UnitInit
   938 					eif
   939 				
   940 					.ifdef MAIN.SYS.@UnitInit
   941 					jsr MAIN.SYS.@UnitInit
   942 					eif
   943 				
   944 					.ifdef MAIN.SPRITES.@UnitInit
   945 					jsr MAIN.SPRITES.@UnitInit
   946 					eif
   947 				.endm
   948
   949 				; ------------------------------------------------------------
   950
   951 					ift .SIZEOF(MAIN.SYSTEM) > 0
   952 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   952 				SYSTEM: $2105..$2149
   953 					eif
   954
   955 					ift .SIZEOF(MAIN.REGISTERS) > 0
   956 					.print 'REGISTERS: ',MAIN.REGISTERS,'..',MAIN.REGISTERS+.SIZEOF(MAIN.REGISTERS)-1
   957 					eif
   958
   959 					ift .SIZEOF(MAIN.SYS) > 0
   960 					.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
   960 				SYS: $214A..$218E
   961 					eif
   962
   963 					ift .SIZEOF(MAIN.SPRITES) > 0
   964 					.print 'SPRITES: ',MAIN.SPRITES,'..',MAIN.SPRITES+.SIZEOF(MAIN.SPRITES)-1
   964 				SPRITES: $218F..$22C6
   965 					eif
   966
   967 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
   967 				CODE: $2000..$230E
   968
   969 				; ------------------------------------------------------------
   970
   971 230F				.align $04
   972
   973 2310			DATAORIGIN
   974 2310-2315> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
   975
   976 = 0006			VARINITSIZE	= *-DATAORIGIN
   977 = 000D			VARDATASIZE	= 13
   978
   979 = 231D			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   980
   981 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   981 				DATA: $2310..$231D
   982
   983 02E0-02E1> CF 20			run START
   984
   985 				; ------------------------------------------------------------
   986
   987 				.macro	STATICDATA
   988 				.endm
   989
   990 					end
