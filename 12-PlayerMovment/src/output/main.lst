mads 2.1.1
  1133 					opt l+
    98 = 0000				?EXTDETECT = 0
    99 = 0000				?VBXDETECT = 0
   100
   101 2075				RCASM 'res/gr_dl.asm' DL_2 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 0020			len = .sizeof(_DL_2)
     6 				mcpy	ift main.DL_2+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 18 +  MWA #MAIN.DL_2 ECX
    13 2088 A9 20 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: const.inc
     1 = 1000			PM_ADR              = $1000;                      // players & missiles memory (2K) start address
     2 = 1300			M0_ADR              = PM_ADR + $300;              // missile 0 start memory address
     3 = 1400			P0_ADR              = PM_ADR + $400;              // player 0 start memory address
     4 = 1500			P1_ADR              = PM_ADR + $500;              // player 1 start memory address
     5 = 1000			GFX_SHIP_ADR        = $1000;                      // ship gfx memory start address, ship size = 20 bytes, 16 bytes for gfx and 4 bytes fo top/bottom empty rows
     6 = 000A			GFX_SHIP_SEG        = 10;                         // ship gfx 10 byte segment, 10B for P0 & 10B for P1
     7 = 1800			DL_2                = $1800;                      // display list memory start address for ANTIC mode 2
     8 = E000			GAME_LMS            = $e000;                      // Load Memory Scan address
    10 = 0030			SHIP_LEFT_LIMIT     = 48;
    11 = 009C			SHIP_RIGHT_LIMIT    = SHIP_LEFT_LIMIT + 8 + 100;
    12 = 0020			SHIP_TOP_LIMIT      = 32;
    13 = 00C8			SHIP_BOTTOM_LIMIT   = 200;
     3 1800			dl2
     4 1800 70 70 70		:3  .byte $70
     5 1803 42 00 E0		    .byte $42,a(GAME_LMS)
     6 1806 02 02 02 02 02 02 + :23 .byte 2
     7 181D 41 00 18		    .byte $41,a(dl2)
    23 					.print '$R RCASM   ',main.DL_2,'..',main.DL_2+len-1," 'res/gr_dl.asm'"
    23 				$R RCASM   $1800..$181F 'res/gr_dl.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: main.a65
   102 20B6				RCDATA 'res/gfx_ship.bin' GFX_SHIP_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0014			len = .filesize('res/gfx_ship.bin')
    28 20B6				org main.GFX_SHIP_ADR
    30 1000-1013> 00 70 7B 1E + 	ins 'res/gfx_ship.bin'
    32 					.print '$R RCDATA  ',main.GFX_SHIP_ADR,'..',*-1," 'res/gfx_ship.bin'"
    32 				$R RCDATA  $1000..$1013 'res/gfx_ship.bin'
Source: main.a65
   103 				.endl
   104
   105 				; ------------------------------------------------------------
   106
   107 1014				org CODEORIGIN
   108
   109 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
Source: main.a65
   110
   111 				; ------------------------------------------------------------
   112
   113 2000			RTLIB
   114 2000				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
   166 					opt l+
   115
   116 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   116 				ZPAGE: $0080..$00D7
   117
   118 				.print 'RTLIB: ',RTLIB,'..',*-1
   118 				RTLIB: $2000..$20CE
   119
   120 				; ------------------------------------------------------------
   121
   122 20CF			START
   123 20CF BA				tsx
   124 20D0 8E 05 23			stx MAIN.@halt+1
   125
   126 					.ifdef fmulinit
   127 					fmulinit
   128 					eif
   129
   130 = 0007			VLEN	= VARDATASIZE-VARINITSIZE
   131 = 2322			VADR	= DATAORIGIN+VARINITSIZE
   132
   133 					ift VADR > $BFFF
   134 					ert 'Invalid memory address range ',VADR
   135 					eli (VLEN>0) && (VLEN<=256)
   136 20D3 A2 F9			ldx #256-VLEN
   137 20D5 A9 00			lda #$00
   138 20D7 9D 29 22 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   139 					eli VLEN>0
   140 					@fill #VADR #VLEN #$00
   141 					eif
   142
   143 20DD A9 29 85 82 A9 23 + 	mwa #PROGRAMSTACK psptr
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 					icl 'atari\romoff.asm'
   147 					.endif
   148
   149 20E5 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   150 20E7 BD 40 03 9D 0A 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   151
   152 20F0 E8				inx						; X = 0
   153 20F1 86 90			stx bp						; BP = 0
   154
   155 20F3 8E 08 D2			stx audctl					; reset POKEY
   156 20F6 A9 03			lda #3
   157 20F8 8D 0F D2			sta skctl
   158
   159 20FB CA				dex						; X = 255
   160
   161 20FC				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
    11 20FC 20 8E 21			jsr MAIN.SYS.@UnitInit
    15 20FF 20 CF 22			jsr MAIN.SPRITES.@UnitInit
   162
   163 2102			.local	MAIN						; PROCEDURE
   164
   165 2102 4C FE 22			jmp l_0007
   166
   167 				; ------------------------------------------------------------
   168
   169 2105			.local	SYSTEM						; UNIT
   170
   171 2105			.local	FILLBYTE_0042					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   172
   173 				; ------------------------------------------------------------
   174
   175 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   176 				; as Pointer
   177 2105 B5 98			lda :STACKORIGIN,x
   178 2107 85 84			sta VALUE
   179 2109 CA				dex
   180
   181 				; ------------------------------------------------------------
   182
   183 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   184 				; as Pointer
   185 210A B5 98			lda :STACKORIGIN,x
   186 210C 85 8C			sta COUNT
   187 210E B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   188 2110 85 8D			sta COUNT+1
   189 2112 CA				dex
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   194 				; as Pointer
   195 2113 B5 98			lda :STACKORIGIN,x
   196 2115 85 88			sta A
   197 2117 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   198 2119 85 89			sta A+1
   199 211B CA				dex
   200
   201 				; ---------------------  ASM Block 029  ---------------------
   202
   203 211C 20 87 20			jsr @fill
   204
   205
   206 				; ------------------------------------------------------------
   207
   208 = 0088			A	= edx
   209 = 008C			COUNT	= ecx
   210 = 0084			VALUE	= eax
   211 211F			@exit
   212 					.ifdef @new
   213 					lda <@VarData
   214 					sta :ztmp
   215 					lda >@VarData
   216 					ldy #@VarDataSize-1
   217 					jmp @FreeMem
   218 					els
   219 211F 60				rts						; ret
   220 					eif
   221 				.endl
   222
   223 2120			.local	MOVE_004C					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   224
   225 				; ------------------------------------------------------------
   226
   227 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   228 				; as Pointer
   229 2120 B5 98			lda :STACKORIGIN,x
   230 2122 85 84			sta COUNT
   231 2124 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   232 2126 85 85			sta COUNT+1
   233 2128 CA				dex
   234
   235 				; ------------------------------------------------------------
   236
   237 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   238 				; as Pointer
   239 2129 B5 98			lda :STACKORIGIN,x
   240 212B 85 8C			sta DEST
   241 212D B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   242 212F 85 8D			sta DEST+1
   243 2131 CA				dex
   244
   245 				; ------------------------------------------------------------
   246
   247 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   248 				; as Pointer
   249 2132 B5 98			lda :STACKORIGIN,x
   250 2134 85 88			sta SOURCE
   251 2136 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   252 2138 85 89			sta SOURCE+1
   253 213A CA				dex
   254
   255 				; ---------------------  ASM Block 031  ---------------------
   256
   257 213B 20 32 20			jsr @move
   258
   259
   260 				; ------------------------------------------------------------
   261
   262 = 0088			SOURCE	= edx
   263 = 008C			DEST	= ecx
   264 = 0084			COUNT	= eax
   265 213E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 213E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 213F			.local	PAUSE_006A					; PROCEDURE | ASSEMBLER | OVERLOAD
   278
   279 				; ---------------------  ASM Block 039  ---------------------
   280
   281 213F A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   282
   283 2145			@exit
   284 					.ifdef @new
   285 					lda <@VarData
   286 					sta :ztmp
   287 					lda >@VarData
   288 					ldy #@VarDataSize-1
   289 					jmp @FreeMem
   290 					els
   291 2145 60				rts						; ret
   292 					eif
   293 				.endl
   294
   295 				; ------------------------------------------------------------
   296
   297 = 0101			__PORTB_BANKS	= $0101
   298 = 0648			M_PI_2	= $0648
   299 = 0192			D_PI_2	= $0192
   300 = 0004			D_PI_180	= $04
   301 = 0000			MGTIA	= $00
   302 = 0080			MVBXE	= $80
   303 = 0000			VBXE_XDLADR	= $00
   304 = 0100			VBXE_BCBADR	= $0100
   305 = 1000			VBXE_MAPADR	= $1000
   306 = 5000			VBXE_OVRADR	= $5000
   307 = B000			VBXE_WINDOW	= $B000
   308 = 0000			IDLI	= $00
   309 = 0001			IVBL	= $01
   310 = 00FE			CH_DELCHR	= $FE
   311 = 009B			CH_ENTER	= $9B
   312 = 001B			CH_ESC	= $1B
   313 = 001C			CH_CURS_UP	= $1C
   314 = 001D			CH_CURS_DOWN	= $1D
   315 = 001E			CH_CURS_LEFT	= $1E
   316 = 001F			CH_CURS_RIGHT	= $1F
   317 = 007F			CH_TAB	= $7F
   318 = 009B			CH_EOL	= $9B
   319 = 007D			CH_CLR	= $7D
   320 = 00FD			CH_BELL	= $FD
   321 = 007E			CH_DEL	= $7E
   322 = 009C			CH_DELLINE	= $9C
   323 = 009D			CH_INSLINE	= $9D
   324 = 0000			COLOR_BLACK	= $00
   325 = 000E			COLOR_WHITE	= $0E
   326 = 0032			COLOR_RED	= $32
   327 = 0096			COLOR_CYAN	= $96
   328 = 0068			COLOR_VIOLET	= $68
   329 = 00C4			COLOR_GREEN	= $C4
   330 = 0074			COLOR_BLUE	= $74
   331 = 00EE			COLOR_YELLOW	= $EE
   332 = 0028			COLOR_ORANGE	= $28
   333 = 00E4			COLOR_BROWN	= $E4
   334 = 003C			COLOR_LIGHTRED	= $3C
   335 = 0004			COLOR_GRAY1	= $04
   336 = 0006			COLOR_GRAY2	= $06
   337 = 000A			COLOR_GRAY3	= $0A
   338 = 00CC			COLOR_LIGHTGREEN	= $CC
   339 = 007C			COLOR_LIGHTBLUE	= $7C
   340 = 0004			FMOPENREAD	= $04
   341 = 0008			FMOPENWRITE	= $08
   342 = 0009			FMOPENAPPEND	= $09
   343 = 000C			FMOPENREADWRITE	= $0C
   344 = 231C			SCREENWIDTH	= DATAORIGIN+$0000
   345 = 231E			SCREENHEIGHT	= DATAORIGIN+$0002
   346 = 2320			DATESEPARATOR	= DATAORIGIN+$0004
   347 = D014			TVSYSTEM	= $D014
   348 = D20A			RND	= $D20A
   349 = 02C0			adr.PALETTE	= $02C0
   350 2146			.var PALETTE	= adr.PALETTE .word
   351 = D012			adr.HPALETTE	= $D012
   352 2146			.var HPALETTE	= adr.HPALETTE .word
   353 = 2321			FILEMODE	= DATAORIGIN+$0005
   354 = 2322			GRAPHMODE	= DATAORIGIN+$0006
   355 = 2323			IORESULT	= DATAORIGIN+$0007
   356 = 2324			EOLN	= DATAORIGIN+$0008
   357 = 2325			RNDSEED	= DATAORIGIN+$0009
   358
   359 = 2146 C0 02		PALETTE
   359 = 2148 12 D0		HPALETTE
   359 				.endl							; UNIT SYSTEM
   360
   361 				; ------------------------------------------------------------
   362
   363 214A			.local	REGISTERS					; UNIT
   364
   365 				; ------------------------------------------------------------
   366
   367 = 0014			RTCLOK	= $14
   368 = D000			HPOSP0	= $D000
   369 = D001			HPOSP1	= $D001
   370 = D008			SIZEP0	= $D008
   371 = D009			SIZEP1	= $D009
   372 = D012			COLPM0	= $D012
   373 = D013			COLPM1	= $D013
   374 = D017			COLPF1	= $D017
   375 = D018			COLPF2	= $D018
   376 = D01A			COLBK	= $D01A
   377 = D01B			PRIOR	= $D01B
   378 = D01D			GRACTL	= $D01D
   379 = D20A			RND	= $D20A
   380 = D301			PORTB	= $D301
   381 = D400			DMACTL	= $D400
   382 = D402			DLIST	= $D402
   383 = D407			PMBASE	= $D407
   384 = D40E			NMIEN	= $D40E
   385 = FFFA			NMIVEC	= $FFFA
   386 = D000			HPOSP01	= $D000
   387 = D008			SIZEP01	= $D008
   388 = D012			COLPM01	= $D012
   389
   390 				.endl							; UNIT REGISTERS
   391
   392 				; ------------------------------------------------------------
   393
   394 214A			.local	SYS						; UNIT
   395
   396 214A			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
   397
   398 				; ---------------------  ASM Block 049  ---------------------
   399
   400
   401 				      bit NMIST \ bpl vbi   ; check kind of interrupt
   401 214A 2C 0F D4		      BIT NMIST 
   401 214D 10 03		 BPL VBI   
   402 = 214F			.def  :__dlijmp
   403 214F 4C 57 21		      jmp __off               ; VDSLST
   404 2152 E6 14		vbi:  inc RTCLOK+2
   405 = 2154			.def  :__vbijmp
   406 2154 4C 57 21		      jmp __off               ; VBIVEC
   407 = 2157			.def  :__off
   408
   409 2157 40				rti						; ret
   410 				.endl
   411
   412 2158			.local	SETVBI						; PROCEDURE | ASSEMBLER
   413
   414 				; ------------------------------------------------------------
   415
   416 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   417 				; as Pointer
   418 2158 B5 98			lda :STACKORIGIN,x
   419 215A 8D 27 23			sta A
   420 215D B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   421 215F 8D 28 23			sta A+1
   422 2162 CA				dex
   423
   424 				; ---------------------  ASM Block 050  ---------------------
   425
   426
   427 2163 AD 27 23 8D 55 21 +   mwa a __vbijmp+1
   428
   429
   430 				; ------------------------------------------------------------
   431
   432 = 2327			A	= DATAORIGIN+$000B
   433
   434 = 2327			@VarData	= A
   435 = 0002			@VarDataSize	= 2
   436
   437 216F			@exit
   438 					.ifdef @new
   439 					lda <@VarData
   440 					sta :ztmp
   441 					lda >@VarData
   442 					ldy #@VarDataSize-1
   443 					jmp @FreeMem
   444 					els
   445 216F 60				rts						; ret
   446 					eif
   447 				.endl
   448
   449 2170			.local	SYSTEMOFF					; PROCEDURE
   450
   451 				; optimize FAIL ('SYSTEM.PAUSE_006A', SYS), line = 62
   452
   453 2170 20 3F 21			jsr SYSTEM.PAUSE_006A
   454
   455 				; ---------------------  ASM Block 054  ---------------------
   456
   457 2173 78			 sei 
   458
   459 				; optimize OK (SYS), line = 63
   460
   461 2174 A9 00			lda #$00
   462 2176 8D 0E D4			sta REGISTERS.NMIEN
   463 2179 A9 FE			lda #$FE
   464 217B 8D 01 D3			sta REGISTERS.PORTB
   465 217E A9 4A			lda <NMI
   466 2180 8D FA FF			sta REGISTERS.NMIVEC
   467 2183 A9 21			lda >NMI
   468 2185 8D FB FF			sta REGISTERS.NMIVEC+1
   469 2188 A9 40			lda #$40
   470 218A 8D 0E D4			sta REGISTERS.NMIEN
   471 218D			@exit
   472 					.ifdef @new
   473 					lda <@VarData
   474 					sta :ztmp
   475 					lda >@VarData
   476 					ldy #@VarDataSize-1
   477 					jmp @FreeMem
   478 					els
   479 218D 60				rts						; ret
   480 					eif
   481 				.endl
   482
   483 				; ------------------------------------------------------------
   484 				; ------------------------------------------------------------
   485 218E			@UnitInit
   486
   487 218E 60				rts
   488
   489 				; ------------------------------------------------------------
   490
   491 				.endl							; UNIT SYS
   492
   493 				; ------------------------------------------------------------
   494
   495 218F			.local	SPRITES						; UNIT
   496
   497 218F			.local	COPYSHIP					; PROCEDURE
   498
   499 				; optimize OK (SPRITES), line = 32
   500
   501 218F A5 02			lda BSHIPY
   502 2191 85 8C			sta :ecx
   503 2193 A9 14			lda #$14
   504 2195 85 8D			sta :ecx+1
   505 2197 A9 00			lda #$00
   506 2199 85 88			sta :edx
   507 219B A9 10			lda #$10
   508 219D 85 89			sta :edx+1
   509 219F A9 0A			lda #$0A
   510 21A1 85 84			sta :eax
   511 21A3 A9 00			lda #$00
   512 21A5 85 85			sta :eax+1
   513 21A7 20 32 20			jsr @move
   514
   515 				; optimize OK (SPRITES), line = 33
   516
   517 21AA A5 02			lda BSHIPY
   518 21AC 85 8C			sta :ecx
   519 21AE A9 15			lda #$15
   520 21B0 85 8D			sta :ecx+1
   521 21B2 A9 0A			lda #$0A
   522 21B4 85 88			sta :edx
   523 21B6 A9 10			lda #$10
   524 21B8 85 89			sta :edx+1
   525 21BA A9 0A			lda #$0A
   526 21BC 85 84			sta :eax
   527 21BE A9 00			lda #$00
   528 21C0 85 85			sta :eax+1
   529 21C2 20 32 20			jsr @move
   530 21C5			@exit
   531 					.ifdef @new
   532 					lda <@VarData
   533 					sta :ztmp
   534 					lda >@VarData
   535 					ldy #@VarDataSize-1
   536 					jmp @FreeMem
   537 					els
   538 21C5 60				rts						; ret
   539 					eif
   540 				.endl
   541
   542 21C6			.local	INIT						; PROCEDURE
   543
   544 				; optimize FAIL ('SYSTEM.PAUSE_006A', SPRITES), line = 38
   545
   546 21C6 20 3F 21			jsr SYSTEM.PAUSE_006A
   547 21C9 A9 00			lda #$00
   548 21CB 8D 00 D4			sta REGISTERS.DMACTL
   549
   550 				; optimize OK (SPRITES), line = 40
   551
   552 21CE				.LOCAL
   553 21CE A0 00			ldy #$00
   554 21D0 98				tya
   555 21D1 99 00 13 99 80 13 + fill	:10 sta $1300+#*$80,y
   556 21EF C8				iny
   557 21F0 10 DF			bpl fill
   558 					.ENDL
   559
   560 				; optimize OK (SPRITES), line = 42
   561
   562 21F2 A9 10			lda #$10
   563 21F4 8D 07 D4			sta REGISTERS.PMBASE
   564
   565 				; optimize OK (SPRITES), line = 43
   566
   567 21F7 A9 50			lda #$50
   568 21F9 85 02			sta BSHIPY
   569 21FB A9 30			lda #$30
   570 21FD 85 00			sta BHPOSP0
   571 21FF A9 38			lda #$38
   572 2201 85 01			sta BHPOSP1
   573 2203 A5 00			lda WSHIPX
   574 2205 8D 00 D0			sta REGISTERS.HPOSP01
   575 2208 A5 01			lda WSHIPX+1
   576 220A 8D 01 D0			sta REGISTERS.HPOSP01+1
   577
   578 				; optimize OK (SPRITES), line = 44
   579
   580 220D A9 0F			lda #$0F
   581 220F 8D 12 D0			sta REGISTERS.COLPM01
   582 2212 8D 13 D0			sta REGISTERS.COLPM01+1
   583 2215 A9 00			lda #$00
   584 2217 8D 08 D0			sta REGISTERS.SIZEP01
   585 221A 8D 09 D0			sta REGISTERS.SIZEP01+1
   586 221D 8D 1B D0			sta REGISTERS.PRIOR
   587 2220 A9 03			lda #$03
   588 2222 8D 1D D0			sta REGISTERS.GRACTL
   589
   590 				; optimize FAIL ('COPYSHIP', SPRITES), line = 46
   591
   592 2225 20 8F 21			jsr COPYSHIP
   593
   594 				; optimize FAIL ('SYSTEM.PAUSE_006A', SPRITES), line = 48
   595
   596 2228 20 3F 21			jsr SYSTEM.PAUSE_006A
   597 222B A9 3E			lda #$3E
   598 222D 8D 00 D4			sta REGISTERS.DMACTL
   599 2230			@exit
   600 					.ifdef @new
   601 					lda <@VarData
   602 					sta :ztmp
   603 					lda >@VarData
   604 					ldy #@VarDataSize-1
   605 					jmp @FreeMem
   606 					els
   607 2230 60				rts						; ret
   608 					eif
   609 				.endl
   610
   611 2231			.local	MOVESHIP					; PROCEDURE
   612
   613 				; optimize OK (SPRITES), line = 53
   614
   615 2231 A9 01			lda #$01
   616 2233 85 FE			sta B01I
   617
   618 2235			l_00E0
   619 				; --- ForToDoCondition
   620
   621 				; optimize OK (SPRITES), line = 54
   622
   623 2235 A5 FE			lda B01I
   624 2237 F0 07			jeq l_0100
   625 2239 A9 0C			lda #$0C
   626 223B 85 FF			sta BMASK
   627 223D 4C 44 22			jmp l_010E
   628 2240			l_0100
   629 2240 A9 03			lda #$03
   630 2242 85 FF			sta BMASK
   631 2244			l_010E
   632
   633 				; ------------------------------------------------------------
   634
   635 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   636 				; as Pointer
   637
   638 2244 E8				inx
   639 2245 A5 03 95 98			mva JOYDIRECTION :STACKORIGIN,x
   640
   641 				; ------------------------------------------------------------
   642
   643 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   644 				; as Pointer
   645
   646 2249 E8				inx
   647 224A A5 FF 95 98			mva BMASK :STACKORIGIN,x
   648
   649 				; Generate Binary Operation for BYTE
   650 224E 20 00 20			jsr andAL_CL					; and al, cl
   651 2251 CA				dex
   652
   653 				; GenerateCaseProlog
   654 2252 CA				dex
   655
   656 				; GenerateCaseEqualityCheck
   657 2253 B5 99			lda :STACKORIGIN+1,x
   658 2255 C9 04			cmp #$04
   659 2257 D0 20			jne l_0124
   660 2259			@
   661
   662 				; optimize OK (SPRITES), line = 57
   663
   664 2259 A5 01			lda BHPOSP1
   665 225B C9 9C			cmp #$9C
   666 225D B0 0D			jcs l_0136
   667 225F A5 00			lda WSHIPX
   668 2261 18 69 01			add #$01
   669 2264 85 00			sta WSHIPX
   670 2266 A5 01			lda WSHIPX+1
   671 2268 69 01			adc #$01
   672 226A 85 01			sta WSHIPX+1
   673 226C			l_0136
   674
   675 				; optimize OK (SPRITES), line = 58
   676
   677 226C A5 00			lda WSHIPX
   678 226E 8D 00 D0			sta REGISTERS.HPOSP01
   679 2271 A5 01			lda WSHIPX+1
   680 2273 8D 01 D0			sta REGISTERS.HPOSP01+1
   681
   682 				; GenerateCaseStatementEpilog
   683 2276 4C C7 22			jmp a_0002
   684 2279			l_0124
   685
   686 				; GenerateCaseEqualityCheck
   687 2279 B5 99			lda :STACKORIGIN+1,x
   688 227B C9 08			cmp #$08
   689 227D D0 20			jne l_0148
   690 227F			@
   691
   692 				; optimize OK (SPRITES), line = 61
   693
   694 227F A5 00			lda BHPOSP0
   695 2281 C9 31			cmp #$31
   696 2283 90 0D			jcc l_015A
   697 2285 A5 00			lda WSHIPX
   698 2287 38 E9 01			sub #$01
   699 228A 85 00			sta WSHIPX
   700 228C A5 01			lda WSHIPX+1
   701 228E E9 01			sbc #$01
   702 2290 85 01			sta WSHIPX+1
   703 2292			l_015A
   704
   705 				; optimize OK (SPRITES), line = 62
   706
   707 2292 A5 00			lda WSHIPX
   708 2294 8D 00 D0			sta REGISTERS.HPOSP01
   709 2297 A5 01			lda WSHIPX+1
   710 2299 8D 01 D0			sta REGISTERS.HPOSP01+1
   711
   712 				; GenerateCaseStatementEpilog
   713 229C 4C C7 22			jmp a_0002
   714 229F			l_0148
   715
   716 				; GenerateCaseEqualityCheck
   717 229F B5 99			lda :STACKORIGIN+1,x
   718 22A1 C9 02			cmp #$02
   719 22A3 D0 0E			jne l_016C
   720 22A5			@
   721
   722 				; optimize OK (SPRITES), line = 65
   723
   724 22A5 A5 02			lda BSHIPY
   725 22A7 C9 21			cmp #$21
   726 22A9 90 02			jcc l_017E
   727 22AB C6 02			dec BSHIPY
   728 22AD			l_017E
   729
   730 				; optimize FAIL ('COPYSHIP', SPRITES), line = 66
   731
   732 22AD 20 8F 21			jsr COPYSHIP
   733
   734 				; GenerateCaseStatementEpilog
   735 22B0 4C C7 22			jmp a_0002
   736 22B3			l_016C
   737
   738 				; GenerateCaseEqualityCheck
   739 22B3 B5 99			lda :STACKORIGIN+1,x
   740 22B5 C9 01			cmp #$01
   741 22B7 D0 0E			jne l_018F
   742 22B9			@
   743
   744 				; optimize OK (SPRITES), line = 69
   745
   746 22B9 A5 02			lda BSHIPY
   747 22BB C9 C8			cmp #$C8
   748 22BD B0 02			jcs l_01A1
   749 22BF E6 02			inc BSHIPY
   750 22C1			l_01A1
   751
   752 				; optimize FAIL ('COPYSHIP', SPRITES), line = 70
   753
   754 22C1 20 8F 21			jsr COPYSHIP
   755
   756 				; GenerateCaseStatementEpilog
   757 22C4 4C C7 22			jmp a_0002
   758 22C7			l_018F
   759
   760 				; GenerateCaseEpilog
   761 22C7			a_0002
   762
   763 				; --- ForToDoEpilog
   764 22C7 C6 FE			dec B01I
   765 22C9 30 03 4C 35 22		jpl l_00E0
   766 22CE			l_00EE
   767
   768 				; ------------------------------------------------------------
   769
   770 = 0000			@FORTMP_00DD	= $00
   771 22CE			@exit
   772 					.ifdef @new
   773 					lda <@VarData
   774 					sta :ztmp
   775 					lda >@VarData
   776 					ldy #@VarDataSize-1
   777 					jmp @FreeMem
   778 					els
   779 22CE 60				rts						; ret
   780 					eif
   781 				.endl
   782
   783 				; ------------------------------------------------------------
   784 				; ------------------------------------------------------------
   785 22CF			@UnitInit
   786
   787 22CF 60				rts
   788
   789 				; ------------------------------------------------------------
   790
   791 = 0003			JOYDIRECTION	= $03
   792 = 1000			PM_ADR	= $1000
   793 = 1300			M0_ADR	= $1300
   794 = 1400			P0_ADR	= $1400
   795 = 1500			P1_ADR	= $1500
   796 = 1000			GFX_SHIP_ADR	= $1000
   797 = 000A			GFX_SHIP_SEG	= $0A
   798 = 1800			DL_2	= $1800
   799 = E000			GAME_LMS	= $E000
   800 = 0030			SHIP_LEFT_LIMIT	= $30
   801 = 009C			SHIP_RIGHT_LIMIT	= $9C
   802 = 0020			SHIP_TOP_LIMIT	= $20
   803 = 00C8			SHIP_BOTTOM_LIMIT	= $C8
   804 = 0000			BHPOSP0	= $00
   805 = 0001			BHPOSP1	= $01
   806 = 0002			BSHIPY	= $02
   807 = 00FF			BMASK	= $FF
   808 = 00FE			B01I	= $FE
   809 = 0000			WSHIPX	= $00
   810
   811 				.endl							; UNIT SPRITES
   812
   813 22D0			.local	VBI						; PROCEDURE | INTERRUPT
   814
   815 				; ---------------------  ASM Block 055  ---------------------
   816
   817 22D0 48 8A 48 98 48	 phr 
   818
   819 				; optimize OK (main.pas), line = 17
   820
   821 22D5 A5 14			lda REGISTERS.RTCLOK
   822 22D7 29 03			and #$03
   823 22D9 D0 0A			jne l_01D0
   824
   825 				; optimize OK (main.pas), line = 18
   826
   827 22DB AD 0A D2			lda SYSTEM.RND
   828 22DE 29 0F			and #$0F
   829 22E0 85 03			sta SPRITES.JOYDIRECTION
   830 22E2 20 31 22			jsr SPRITES.MOVESHIP
   831 22E5			l_01D0
   832
   833 				; ---------------------  ASM Block 056  ---------------------
   834
   835 22E5 68 A8 68 AA 68	 plr 
   836 22EA 40				rti						; ret
   837 				.endl
   838
   839 22EB			.local	INIT						; PROCEDURE
   840
   841 				; optimize FAIL ('SYS.SYSTEMOFF', main.pas), line = 26
   842
   843 22EB 20 70 21			jsr SYS.SYSTEMOFF
   844
   845 				; optimize FAIL ('SPRITES.INIT', main.pas), line = 27
   846
   847 22EE 20 C6 21			jsr SPRITES.INIT
   848
   849 				; optimize FAIL ('SYS.SETVBI', main.pas), line = 28
   850
   851 22F1 E8				inx
   852 22F2 A9 D0 95 98			mva <VBI :STACKORIGIN,x
   853 22F6 A9 22 95 A8			mva >VBI :STACKORIGIN+STACKWIDTH,x
   854 22FA 20 58 21			jsr SYS.SETVBI
   855 22FD			@exit
   856 					.ifdef @new
   857 					lda <@VarData
   858 					sta :ztmp
   859 					lda >@VarData
   860 					ldy #@VarDataSize-1
   861 					jmp @FreeMem
   862 					els
   863 22FD 60				rts						; ret
   864 					eif
   865 				.endl
   866 22FE			l_0007
   867
   868 				; optimize FAIL ('INIT', main.pas), line = 32
   869
   870 22FE 20 EB 22			jsr INIT
   871
   872 				; --- RepeatUntilProlog
   873 2301			l_01E8
   874
   875 				; optimize OK (main.pas), line = 33
   876
   877 2301 4C 01 23			jmp l_01E8
   878
   879 				; ------------------------------------------------------------
   880
   881 = 1000			PM_ADR	= $1000
   882 = 1300			M0_ADR	= $1300
   883 = 1400			P0_ADR	= $1400
   884 = 1500			P1_ADR	= $1500
   885 = 1000			GFX_SHIP_ADR	= $1000
   886 = 000A			GFX_SHIP_SEG	= $0A
   887 = 1800			DL_2	= $1800
   888 = E000			GAME_LMS	= $E000
   889 = 0030			SHIP_LEFT_LIMIT	= $30
   890 = 009C			SHIP_RIGHT_LIMIT	= $9C
   891 = 0020			SHIP_TOP_LIMIT	= $20
   892 = 00C8			SHIP_BOTTOM_LIMIT	= $C8
   893 2304			@exit
   894
   895 2304 A2 00		@halt	ldx #$00
   896 2306 9A				txs
   897 					.ifdef MAIN.@DEFINES.ROMOFF
   898 					inc portb
   899 					.endif
   900
   901 2307 A0 01			ldy #$01
   902
   903 2309 60				rts
   904
   905 				; ------------------------------------------------------------
   906
   907 230A 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   908
   909 				; ------------------------------------------------------------
   910
   911 231A			.local	@DEFINES
   912 231A			ATARI
   913 				.endl
   914
   915 231A			.local	@RESOURCE
   916 				.endl
   917
   918 				.endl							; MAIN
   919
   920 				; ------------------------------------------------------------
   921 				; ------------------------------------------------------------
   922
   923 				.macro	UNITINITIALIZATION
   924 				
   925 					.ifdef MAIN.SYSTEM.@UnitInit
   926 					jsr MAIN.SYSTEM.@UnitInit
   927 					eif
   928 				
   929 					.ifdef MAIN.REGISTERS.@UnitInit
   930 					jsr MAIN.REGISTERS.@UnitInit
   931 					eif
   932 				
   933 					.ifdef MAIN.SYS.@UnitInit
   934 					jsr MAIN.SYS.@UnitInit
   935 					eif
   936 				
   937 					.ifdef MAIN.SPRITES.@UnitInit
   938 					jsr MAIN.SPRITES.@UnitInit
   939 					eif
   940 				.endm
   941
   942 				; ------------------------------------------------------------
   943
   944 					ift .SIZEOF(MAIN.SYSTEM) > 0
   945 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   945 				SYSTEM: $2105..$2149
   946 					eif
   947
   948 					ift .SIZEOF(MAIN.REGISTERS) > 0
   949 					.print 'REGISTERS: ',MAIN.REGISTERS,'..',MAIN.REGISTERS+.SIZEOF(MAIN.REGISTERS)-1
   950 					eif
   951
   952 					ift .SIZEOF(MAIN.SYS) > 0
   953 					.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
   953 				SYS: $214A..$218E
   954 					eif
   955
   956 					ift .SIZEOF(MAIN.SPRITES) > 0
   957 					.print 'SPRITES: ',MAIN.SPRITES,'..',MAIN.SPRITES+.SIZEOF(MAIN.SPRITES)-1
   957 				SPRITES: $218F..$22CF
   958 					eif
   959
   960 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
   960 				CODE: $2000..$2319
   961
   962 				; ------------------------------------------------------------
   963
   964 231A				.align $04
   965
   966 231C			DATAORIGIN
   967 231C-2321> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
   968
   969 = 0006			VARINITSIZE	= *-DATAORIGIN
   970 = 000D			VARDATASIZE	= 13
   971
   972 = 2329			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   973
   974 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   974 				DATA: $231C..$2329
   975
   976 02E0-02E1> CF 20			run START
   977
   978 				; ------------------------------------------------------------
   979
   980 				.macro	STATICDATA
   981 				.endm
   982
   983 					end
