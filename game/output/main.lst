mads 2.1.1
  1133 					opt l+
    98 = 0000				?EXTDETECT = 0
    99 = 0000				?VBXDETECT = 0
   100
   101 2075				RCASM 'res/gr_dl.asm' GLOBALS.DL_2 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 001A			len = .sizeof(_GLOBALS.DL_2)
     6 				mcpy	ift main.GLOBALS.DL_2+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 11 +  MWA #MAIN.GLOBALS.DL_2 ECX
    13 2088 A9 1A 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: const.inc
     1 = 1000			PM_ADR              = $1000;                      // players & missiles memory (2K) start address
     2 = 1300			M0_ADR              = PM_ADR + $300;              // missile 0 start memory address
     3 = 1400			P0_ADR              = PM_ADR + $400;              // player 0 start memory address
     4 = 1500			P1_ADR              = PM_ADR + $500;              // player 1 start memory address
     5 = 1000			GFX_SHIP_ADR        = $1000;                      // ship gfx memory start address, ship size = 20 bytes, 16 bytes for gfx and 4 bytes fo top/bottom empty rows
     6 = 0008			GFX_SHIP_SEG        = 8;                          // ship gfx 10 byte segment, 10B for P0 & 10B for P1
     8 = 1800			GFX_FONTS_ADR       = $1800;
    10 = 1100			DL_2                = $1100;                      // display list memory start address for ANTIC mode 2
    11 = EC3F			GAME_LMS            = $efff - $3c0;               // Load Memory Scan address
    12 = E000			GAME_LMS_EMD        = $e000;
    13 = 0015			GAME_SCREEN_ROWS    = 21;
    15 = 0E0E			SHIP_COL            = $0e0e;
    16 = 0030			SHIP_LEFT_LIMIT     = 48;
    17 = 00B0			SHIP_RIGHT_LIMIT    = SHIP_LEFT_LIMIT + (16 * 8);
    18 = 0020			SHIP_TOP_LIMIT      = 32;
    19 = 00A8			SHIP_BOTTOM_LIMIT   = 8 * GAME_SCREEN_ROWS;
    20 = 0202			SHIP_X_STEP         = $0202;
    22 = 0008			JOY_LEFT            = %1000;
    23 = 0004			JOY_RIGHT           = %0100;
    24 = 0002			JOY_UP              = %0010;
    25 = 0001			JOY_DOWN            = %0001;
     3 1100			dl2
     4 1100 F0 70 F0		    .byte $f0,$70,$f0
     5 1103 42 3F EC		    .byte $42,a(GAME_LMS)
     6 1106 02 02 02 02 02 02 + :17 .byte 2
     7 1117 41 00 11		    .byte $41,a(dl2)
    23 					.print '$R RCASM   ',main.GLOBALS.DL_2,'..',main.GLOBALS.DL_2+len-1," 'res/gr_dl.asm'"
    23 				$R RCASM   $1100..$1119 'res/gr_dl.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: main.a65
   102 20B0				RCDATA 'res/gfx_ship.bin' GLOBALS.GFX_SHIP_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0010			len = .filesize('res/gfx_ship.bin')
    28 20B0				org main.GLOBALS.GFX_SHIP_ADR
    30 1000-100F> 70 7B 1E 3F + 	ins 'res/gfx_ship.bin'
    32 					.print '$R RCDATA  ',main.GLOBALS.GFX_SHIP_ADR,'..',*-1," 'res/gfx_ship.bin'"
    32 				$R RCDATA  $1000..$100F 'res/gfx_ship.bin'
Source: main.a65
   103 1010				RCDATA 'res/charset.fnt' GLOBALS.GFX_FONTS_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0400			len = .filesize('res/charset.fnt')
    28 1010				org main.GLOBALS.GFX_FONTS_ADR
    30 1800-1BFF> 00 00 00 00 + 	ins 'res/charset.fnt'
    32 					.print '$R RCDATA  ',main.GLOBALS.GFX_FONTS_ADR,'..',*-1," 'res/charset.fnt'"
    32 				$R RCDATA  $1800..$1BFF 'res/charset.fnt'
Source: main.a65
   104 				.endl
   105
   106 				; ------------------------------------------------------------
   107
   108 1C00				org CODEORIGIN
   109
   110 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
Source: main.a65
   111
   112 				; ------------------------------------------------------------
   113
   114 2000			RTLIB
   115 2000				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
   148 					opt l+
   116
   117 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   117 				ZPAGE: $0080..$00D7
   118
   119 				.print 'RTLIB: ',RTLIB,'..',*-1
   119 				RTLIB: $2000..$20EC
   120
   121 				; ------------------------------------------------------------
   122
   123 20ED			START
   124 20ED BA				tsx
   125 20EE 8E E2 24			stx MAIN.@halt+1
   126
   127 					.ifdef fmulinit
   128 					fmulinit
   129 					eif
   130
   131 = 000E			VLEN	= VARDATASIZE-VARINITSIZE
   132 = 2502			VADR	= DATAORIGIN+VARINITSIZE
   133
   134 					ift VADR > $BFFF
   135 					ert 'Invalid memory address range ',VADR
   136 					eli (VLEN>0) && (VLEN<=256)
   137 20F1 A2 F2			ldx #256-VLEN
   138 20F3 A9 00			lda #$00
   139 20F5 9D 10 24 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   140 					eli VLEN>0
   141 					@fill #VADR #VLEN #$00
   142 					eif
   143
   144 20FB A9 10 85 82 A9 25 + 	mwa #PROGRAMSTACK psptr
   145
   146 					.ifdef MAIN.@DEFINES.ROMOFF
   147 					icl 'atari\romoff.asm'
   148 					.endif
   149
   150 2103 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   151 2105 BD 40 03 9D E7 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   152
   153 210E E8				inx						; X = 0
   154 210F 86 90			stx bp						; BP = 0
   155
   156 2111 8E 08 D2			stx audctl					; reset POKEY
   157 2114 A9 03			lda #3
   158 2116 8D 0F D2			sta skctl
   159
   160 2119 CA				dex						; X = 255
   161
   162 211A				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
    11 211A 20 FA 21			jsr MAIN.SYS.@UnitInit
    15 211D 20 06 22			jsr MAIN.GR.@UnitInit
    19 2120 20 CD 22			jsr MAIN.SPRITES.@UnitInit
    23 2123 20 61 23			jsr MAIN.JOY.@UnitInit
   163
   164 2126			.local	MAIN						; PROCEDURE
   165
   166 2126 4C DB 24			jmp l_0007
   167
   168 				; ------------------------------------------------------------
   169
   170 2129			.local	SYSTEM						; UNIT
   171
   172 2129			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   173
   174 				; ------------------------------------------------------------
   175
   176 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   177 				; as Pointer
   178 2129 B5 98			lda :STACKORIGIN,x
   179 212B 85 8C			sta VALUE
   180 212D CA				dex
   181
   182 				; ------------------------------------------------------------
   183
   184 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   185 				; as Pointer
   186 212E B5 98			lda :STACKORIGIN,x
   187 2130 85 88			sta A
   188 2132 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   189 2134 85 89			sta A+1
   190 2136 CA				dex
   191
   192 				; ---------------------  ASM Block 021  ---------------------
   193
   194 2137 A0 00			ldy #0
   195 2139 A5 8C 91 88			mva value (edx),y
   196
   197
   198 				; ------------------------------------------------------------
   199
   200 = 0088			A	= edx
   201 = 008C			VALUE	= ecx
   202 213D			@exit
   203 					.ifdef @new
   204 					lda <@VarData
   205 					sta :ztmp
   206 					lda >@VarData
   207 					ldy #@VarDataSize-1
   208 					jmp @FreeMem
   209 					els
   210 213D 60				rts						; ret
   211 					eif
   212 				.endl
   213
   214 213E			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   215
   216 				; ------------------------------------------------------------
   217
   218 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   219 				; as Pointer
   220 213E B5 98			lda :STACKORIGIN,x
   221 2140 85 8C			sta VALUE
   222 2142 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   223 2144 85 8D			sta VALUE+1
   224 2146 CA				dex
   225
   226 				; ------------------------------------------------------------
   227
   228 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   229 				; as Pointer
   230 2147 B5 98			lda :STACKORIGIN,x
   231 2149 85 88			sta A
   232 214B B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   233 214D 85 89			sta A+1
   234 214F CA				dex
   235
   236 				; ---------------------  ASM Block 022  ---------------------
   237
   238 2150 A0 00			ldy #0
   239 2152 A5 8C 91 88			mva value (edx),y
   240 2156 C8				iny
   241 2157 A5 8D 91 88			mva value+1 (edx),y
   242
   243
   244 				; ------------------------------------------------------------
   245
   246 = 0088			A	= edx
   247 = 008C			VALUE	= ecx
   248 215B			@exit
   249 					.ifdef @new
   250 					lda <@VarData
   251 					sta :ztmp
   252 					lda >@VarData
   253 					ldy #@VarDataSize-1
   254 					jmp @FreeMem
   255 					els
   256 215B 60				rts						; ret
   257 					eif
   258 				.endl
   259
   260 215C			.local	FILLBYTE_0050					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   261
   262 				; ------------------------------------------------------------
   263
   264 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   265 				; as Pointer
   266 215C B5 98			lda :STACKORIGIN,x
   267 215E 85 84			sta VALUE
   268 2160 CA				dex
   269
   270 				; ------------------------------------------------------------
   271
   272 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   273 				; as Pointer
   274 2161 B5 98			lda :STACKORIGIN,x
   275 2163 85 8C			sta COUNT
   276 2165 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   277 2167 85 8D			sta COUNT+1
   278 2169 CA				dex
   279
   280 				; ------------------------------------------------------------
   281
   282 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   283 				; as Pointer
   284 216A B5 98			lda :STACKORIGIN,x
   285 216C 85 88			sta A
   286 216E B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   287 2170 85 89			sta A+1
   288 2172 CA				dex
   289
   290 				; ---------------------  ASM Block 029  ---------------------
   291
   292 2173 20 80 20			jsr @fill
   293
   294
   295 				; ------------------------------------------------------------
   296
   297 = 0088			A	= edx
   298 = 008C			COUNT	= ecx
   299 = 0084			VALUE	= eax
   300 2176			@exit
   301 					.ifdef @new
   302 					lda <@VarData
   303 					sta :ztmp
   304 					lda >@VarData
   305 					ldy #@VarDataSize-1
   306 					jmp @FreeMem
   307 					els
   308 2176 60				rts						; ret
   309 					eif
   310 				.endl
   311
   312 2177			.local	MOVE_005A					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   313
   314 				; ------------------------------------------------------------
   315
   316 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   317 				; as Pointer
   318 2177 B5 98			lda :STACKORIGIN,x
   319 2179 85 84			sta COUNT
   320 217B B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   321 217D 85 85			sta COUNT+1
   322 217F CA				dex
   323
   324 				; ------------------------------------------------------------
   325
   326 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   327 				; as Pointer
   328 2180 B5 98			lda :STACKORIGIN,x
   329 2182 85 8C			sta DEST
   330 2184 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   331 2186 85 8D			sta DEST+1
   332 2188 CA				dex
   333
   334 				; ------------------------------------------------------------
   335
   336 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   337 				; as Pointer
   338 2189 B5 98			lda :STACKORIGIN,x
   339 218B 85 88			sta SOURCE
   340 218D B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   341 218F 85 89			sta SOURCE+1
   342 2191 CA				dex
   343
   344 				; ---------------------  ASM Block 031  ---------------------
   345
   346 2192 20 2B 20			jsr @move
   347
   348
   349 				; ------------------------------------------------------------
   350
   351 = 0088			SOURCE	= edx
   352 = 008C			DEST	= ecx
   353 = 0084			COUNT	= eax
   354 2195			@exit
   355 					.ifdef @new
   356 					lda <@VarData
   357 					sta :ztmp
   358 					lda >@VarData
   359 					ldy #@VarDataSize-1
   360 					jmp @FreeMem
   361 					els
   362 2195 60				rts						; ret
   363 					eif
   364 				.endl
   365
   366 2196			.local	PAUSE_0078					; PROCEDURE | ASSEMBLER | OVERLOAD
   367
   368 				; ---------------------  ASM Block 039  ---------------------
   369
   370 2196 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   371
   372 219C			@exit
   373 					.ifdef @new
   374 					lda <@VarData
   375 					sta :ztmp
   376 					lda >@VarData
   377 					ldy #@VarDataSize-1
   378 					jmp @FreeMem
   379 					els
   380 219C 60				rts						; ret
   381 					eif
   382 				.endl
   383
   384 				; ------------------------------------------------------------
   385
   386 = 0101			__PORTB_BANKS	= $0101
   387 = 0648			M_PI_2	= $0648
   388 = 0192			D_PI_2	= $0192
   389 = 0004			D_PI_180	= $04
   390 = 0000			MGTIA	= $00
   391 = 0080			MVBXE	= $80
   392 = 0000			VBXE_XDLADR	= $00
   393 = 0100			VBXE_BCBADR	= $0100
   394 = 1000			VBXE_MAPADR	= $1000
   395 = 5000			VBXE_OVRADR	= $5000
   396 = B000			VBXE_WINDOW	= $B000
   397 = 0000			IDLI	= $00
   398 = 0001			IVBL	= $01
   399 = 00FE			CH_DELCHR	= $FE
   400 = 009B			CH_ENTER	= $9B
   401 = 001B			CH_ESC	= $1B
   402 = 001C			CH_CURS_UP	= $1C
   403 = 001D			CH_CURS_DOWN	= $1D
   404 = 001E			CH_CURS_LEFT	= $1E
   405 = 001F			CH_CURS_RIGHT	= $1F
   406 = 007F			CH_TAB	= $7F
   407 = 009B			CH_EOL	= $9B
   408 = 007D			CH_CLR	= $7D
   409 = 00FD			CH_BELL	= $FD
   410 = 007E			CH_DEL	= $7E
   411 = 009C			CH_DELLINE	= $9C
   412 = 009D			CH_INSLINE	= $9D
   413 = 0000			COLOR_BLACK	= $00
   414 = 000E			COLOR_WHITE	= $0E
   415 = 0032			COLOR_RED	= $32
   416 = 0096			COLOR_CYAN	= $96
   417 = 0068			COLOR_VIOLET	= $68
   418 = 00C4			COLOR_GREEN	= $C4
   419 = 0074			COLOR_BLUE	= $74
   420 = 00EE			COLOR_YELLOW	= $EE
   421 = 0028			COLOR_ORANGE	= $28
   422 = 00E4			COLOR_BROWN	= $E4
   423 = 003C			COLOR_LIGHTRED	= $3C
   424 = 0004			COLOR_GRAY1	= $04
   425 = 0006			COLOR_GRAY2	= $06
   426 = 000A			COLOR_GRAY3	= $0A
   427 = 00CC			COLOR_LIGHTGREEN	= $CC
   428 = 007C			COLOR_LIGHTBLUE	= $7C
   429 = 0004			FMOPENREAD	= $04
   430 = 0008			FMOPENWRITE	= $08
   431 = 0009			FMOPENAPPEND	= $09
   432 = 000C			FMOPENREADWRITE	= $0C
   433 = 24FC			SCREENWIDTH	= DATAORIGIN+$0000
   434 = 24FE			SCREENHEIGHT	= DATAORIGIN+$0002
   435 = 2500			DATESEPARATOR	= DATAORIGIN+$0004
   436 = D014			TVSYSTEM	= $D014
   437 = D20A			RND	= $D20A
   438 = 02C0			adr.PALETTE	= $02C0
   439 219D			.var PALETTE	= adr.PALETTE .word
   440 = D012			adr.HPALETTE	= $D012
   441 219D			.var HPALETTE	= adr.HPALETTE .word
   442 = 2501			FILEMODE	= DATAORIGIN+$0005
   443 = 2502			GRAPHMODE	= DATAORIGIN+$0006
   444 = 2503			IORESULT	= DATAORIGIN+$0007
   445 = 2504			EOLN	= DATAORIGIN+$0008
   446 = 2505			RNDSEED	= DATAORIGIN+$0009
   447
   448 = 219D C0 02		PALETTE
   448 = 219F 12 D0		HPALETTE
   448 				.endl							; UNIT SYSTEM
   449
   450 				; ------------------------------------------------------------
   451
   452 21A1			.local	GLOBALS						; UNIT
   453
   454 				; ------------------------------------------------------------
   455
   456 = 1000			PM_ADR	= $1000
   457 = 1300			M0_ADR	= $1300
   458 = 1400			P0_ADR	= $1400
   459 = 1500			P1_ADR	= $1500
   460 = 1000			GFX_SHIP_ADR	= $1000
   461 = 0008			GFX_SHIP_SEG	= $08
   462 = 1800			GFX_FONTS_ADR	= $1800
   463 = 1100			DL_2	= $1100
   464 = EC3F			GAME_LMS	= $EC3F
   465 = E000			GAME_LMS_EMD	= $E000
   466 = 0015			GAME_SCREEN_ROWS	= $15
   467 = 0E0E			SHIP_COL	= $0E0E
   468 = 0030			SHIP_LEFT_LIMIT	= $30
   469 = 00B0			SHIP_RIGHT_LIMIT	= $B0
   470 = 0020			SHIP_TOP_LIMIT	= $20
   471 = 00A8			SHIP_BOTTOM_LIMIT	= $A8
   472 = 0202			SHIP_X_STEP	= $0202
   473 = 0008			JOY_LEFT	= $08
   474 = 0004			JOY_RIGHT	= $04
   475 = 0002			JOY_UP	= $02
   476 = 0001			JOY_DOWN	= $01
   477 = 0014			RTCLOK	= $14
   478 = D000			HPOSP0	= $D000
   479 = D001			HPOSP1	= $D001
   480 = D004			HPOSM0	= $D004
   481 = D005			HPOSM1	= $D005
   482 = D006			HPOSM2	= $D006
   483 = D007			HPOSM3	= $D007
   484 = D008			SIZEP0	= $D008
   485 = D009			SIZEP1	= $D009
   486 = D00A			SIZEP2	= $D00A
   487 = D00B			SIZEP3	= $D00B
   488 = D00C			SIZEM	= $D00C
   489 = D011			GRAFM	= $D011
   490 = D012			COLPM0	= $D012
   491 = D013			COLPM1	= $D013
   492 = D014			COLPM2	= $D014
   493 = D015			COLPM3	= $D015
   494 = D016			COLPF0	= $D016
   495 = D017			COLPF1	= $D017
   496 = D018			COLPF2	= $D018
   497 = D019			COLPF3	= $D019
   498 = D01A			COLBK	= $D01A
   499 = D01B			PRIOR	= $D01B
   500 = D01D			GRACTL	= $D01D
   501 = D20A			RND	= $D20A
   502 = D300			PORTA	= $D300
   503 = D301			PORTB	= $D301
   504 = D302			PACTL	= $D302
   505 = D400			DMACTL	= $D400
   506 = D402			DLIST	= $D402
   507 = D407			PMBASE	= $D407
   508 = D409			CHBAS	= $D409
   509 = D40A			WSYNC	= $D40A
   510 = D40B			VCOUNT	= $D40B
   511 = D40E			NMIEN	= $D40E
   512 = FFFA			NMIVEC	= $FFFA
   513 = D000			HPOSP01	= $D000
   514 = D008			SIZEP01	= $D008
   515 = D012			COLPM01	= $D012
   516 = 1104			DL2LMS	= $1104
   517 = 00FF			BTMP1	= $FF
   518 = 00FE			BTMP2	= $FE
   519 = 00FD			B1I	= $FD
   520 = 00FC			B2I	= $FC
   521 = 00FA			WTMP1	= $FA
   522 = 00F8			WTMP2	= $F8
   523
   524 				.endl							; UNIT GLOBALS
   525
   526 				; ------------------------------------------------------------
   527
   528 21A1			.local	SYS						; UNIT
   529
   530 21A1			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
   531
   532 				; ---------------------  ASM Block 049  ---------------------
   533
   534
   535 				      bit NMIST \ bpl vbi     ; check kind of interrupt
   535 21A1 2C 0F D4		      BIT NMIST 
   535 21A4 10 03		 BPL VBI     
   536 = 21A6			.def  :__dlijmp
   537 21A6 4C AE 21		      jmp __off               ; VDSLST
   538 21A9 E6 14		vbi:  inc RTCLOK+2
   539 = 21AB			.def  :__vbijmp
   540 21AB 4C AE 21		      jmp __off               ; VBIVEC
   541 = 21AE			.def  :__off
   542
   543 21AE 40				rti						; ret
   544 				.endl
   545
   546 21AF			.local	SETVBI						; PROCEDURE | ASSEMBLER
   547
   548 				; ------------------------------------------------------------
   549
   550 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   551 				; as Pointer
   552 21AF B5 98			lda :STACKORIGIN,x
   553 21B1 8D 07 25			sta A
   554 21B4 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   555 21B6 8D 08 25			sta A+1
   556 21B9 CA				dex
   557
   558 				; ---------------------  ASM Block 050  ---------------------
   559
   560
   561 21BA AD 07 25 8D AC 21 +   mwa a __vbijmp+1
   562
   563
   564 				; ------------------------------------------------------------
   565
   566 = 2507			A	= DATAORIGIN+$000B
   567
   568 = 2507			@VarData	= A
   569 = 0002			@VarDataSize	= 2
   570
   571 21C6			@exit
   572 					.ifdef @new
   573 					lda <@VarData
   574 					sta :ztmp
   575 					lda >@VarData
   576 					ldy #@VarDataSize-1
   577 					jmp @FreeMem
   578 					els
   579 21C6 60				rts						; ret
   580 					eif
   581 				.endl
   582
   583 21C7			.local	SETDLI						; PROCEDURE | ASSEMBLER
   584
   585 				; ------------------------------------------------------------
   586
   587 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   588 				; as Pointer
   589 21C7 B5 98			lda :STACKORIGIN,x
   590 21C9 8D 09 25			sta A
   591 21CC B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   592 21CE 8D 0A 25			sta A+1
   593 21D1 CA				dex
   594
   595 				; ---------------------  ASM Block 051  ---------------------
   596
   597
   598 21D2 AD 09 25 8D A7 21 +   mwa a __dlijmp+1
   599
   600
   601 				; ------------------------------------------------------------
   602
   603 = 2509			A	= DATAORIGIN+$000D
   604
   605 = 2509			@VarData	= A
   606 = 0002			@VarDataSize	= 2
   607
   608 21DE			@exit
   609 					.ifdef @new
   610 					lda <@VarData
   611 					sta :ztmp
   612 					lda >@VarData
   613 					ldy #@VarDataSize-1
   614 					jmp @FreeMem
   615 					els
   616 21DE 60				rts						; ret
   617 					eif
   618 				.endl
   619
   620 21DF			.local	SYSTEMOFF					; PROCEDURE
   621
   622 				; ---------------------  ASM Block 054  ---------------------
   623
   624 21DF 78			 sei 
   625
   626 				; optimize OK (SYS), line = 63
   627
   628 21E0 A9 00			lda #$00
   629 21E2 8D 0E D4			sta GLOBALS.NMIEN
   630 21E5 A9 FE			lda #$FE
   631 21E7 8D 01 D3			sta GLOBALS.PORTB
   632 21EA A9 A1			lda <NMI
   633 21EC 8D FA FF			sta GLOBALS.NMIVEC
   634 21EF A9 21			lda >NMI
   635 21F1 8D FB FF			sta GLOBALS.NMIVEC+1
   636 21F4 A9 C0			lda #$C0
   637 21F6 8D 0E D4			sta GLOBALS.NMIEN
   638 21F9			@exit
   639 					.ifdef @new
   640 					lda <@VarData
   641 					sta :ztmp
   642 					lda >@VarData
   643 					ldy #@VarDataSize-1
   644 					jmp @FreeMem
   645 					els
   646 21F9 60				rts						; ret
   647 					eif
   648 				.endl
   649
   650 				; ------------------------------------------------------------
   651 				; ------------------------------------------------------------
   652 21FA			@UnitInit
   653
   654 21FA 60				rts
   655
   656 				; ------------------------------------------------------------
   657
   658 				.endl							; UNIT SYS
   659
   660 				; ------------------------------------------------------------
   661
   662 21FB			.local	GR						; UNIT
   663
   664 21FB			.local	MODE2						; PROCEDURE
   665
   666 				; optimize OK (GR), line = 17
   667
   668 21FB A9 00			lda #$00
   669 21FD 8D 02 D4			sta GLOBALS.DLIST
   670 2200 A9 11			lda #$11
   671 2202 8D 03 D4			sta GLOBALS.DLIST+1
   672 2205			@exit
   673 					.ifdef @new
   674 					lda <@VarData
   675 					sta :ztmp
   676 					lda >@VarData
   677 					ldy #@VarDataSize-1
   678 					jmp @FreeMem
   679 					els
   680 2205 60				rts						; ret
   681 					eif
   682 				.endl
   683
   684 				; ------------------------------------------------------------
   685 				; ------------------------------------------------------------
   686 2206			@UnitInit
   687
   688 2206 60				rts
   689
   690 				; ------------------------------------------------------------
   691
   692 				.endl							; UNIT GR
   693
   694 				; ------------------------------------------------------------
   695
   696 2207			.local	SPRITES						; UNIT
   697
   698 2207			.local	COPYSHIP					; PROCEDURE
   699
   700 				; optimize OK (SPRITES), line = 25
   701
   702 2207 A5 03			lda BSHIPYCLEAR
   703 2209 85 92			sta :bp2
   704 220B A9 14			lda #$14
   705 220D 85 93			sta :bp2+1
   706 220F A0 00			ldy #$00
   707 2211 98				tya
   708 2212 91 92			sta (:bp2),y
   709 2214 C8				iny
   710 2215 91 92			sta (:bp2),y
   711 2217 A5 03			lda BSHIPYCLEAR
   712 2219 85 92			sta :bp2
   713 221B A9 15			lda #$15
   714 221D 85 93			sta :bp2+1
   715 221F A0 00			ldy #$00
   716 2221 98				tya
   717 2222 91 92			sta (:bp2),y
   718 2224 C8				iny
   719 2225 91 92			sta (:bp2),y
   720
   721 				; optimize OK (SPRITES), line = 26
   722
   723 2227 A5 02			lda BSHIPY
   724 2229 85 8C			sta :ecx
   725 222B A9 14			lda #$14
   726 222D 85 8D			sta :ecx+1
   727 222F A9 00			lda #$00
   728 2231 85 88			sta :edx
   729 2233 A9 10			lda #$10
   730 2235 85 89			sta :edx+1
   731 2237 A9 08			lda #$08
   732 2239 85 84			sta :eax
   733 223B A9 00			lda #$00
   734 223D 85 85			sta :eax+1
   735 223F 20 2B 20			jsr @move
   736
   737 				; optimize OK (SPRITES), line = 27
   738
   739 2242 A5 02			lda BSHIPY
   740 2244 85 8C			sta :ecx
   741 2246 A9 15			lda #$15
   742 2248 85 8D			sta :ecx+1
   743 224A A9 08			lda #$08
   744 224C 85 88			sta :edx
   745 224E A9 10			lda #$10
   746 2250 85 89			sta :edx+1
   747 2252 A9 08			lda #$08
   748 2254 85 84			sta :eax
   749 2256 A9 00			lda #$00
   750 2258 85 85			sta :eax+1
   751 225A 20 2B 20			jsr @move
   752 225D			@exit
   753 					.ifdef @new
   754 					lda <@VarData
   755 					sta :ztmp
   756 					lda >@VarData
   757 					ldy #@VarDataSize-1
   758 					jmp @FreeMem
   759 					els
   760 225D 60				rts						; ret
   761 					eif
   762 				.endl
   763
   764 225E			.local	INIT						; PROCEDURE
   765
   766 				; optimize OK (SPRITES), line = 32
   767
   768 225E				.LOCAL
   769 225E A0 00			ldy #$00
   770 2260 98				tya
   771 2261 99 00 13 99 80 13 + fill	:10 sta $1300+#*$80,y
   772 227F C8				iny
   773 2280 10 DF			bpl fill
   774 					.ENDL
   775
   776 				; optimize OK (SPRITES), line = 33
   777
   778 2282 A0 70			ldy #256-$90
   779 2284 A9 FF			lda #$FF
   780 2286 99 B0 12 C8 D0 FA		sta:rne $1320+$90-256,y+
   781
   782 				; optimize OK (SPRITES), line = 35
   783
   784 228C A9 10			lda #$10
   785 228E 8D 07 D4			sta GLOBALS.PMBASE
   786
   787 				; optimize OK (SPRITES), line = 36
   788
   789 2291 A9 0A			lda #$0A
   790 2293 8D 15 D0			sta GLOBALS.COLPM3
   791 2296 A9 0E			lda #$0E
   792 2298 8D 12 D0			sta GLOBALS.COLPM01
   793 229B 8D 13 D0			sta GLOBALS.COLPM01+1
   794
   795 				; optimize OK (SPRITES), line = 37
   796
   797 229E A9 50			lda #$50
   798 22A0 85 02			sta BSHIPY
   799 22A2 85 03			sta BSHIPYCLEAR
   800
   801 				; optimize OK (SPRITES), line = 38
   802
   803 22A4 A9 30			lda #$30
   804 22A6 85 00			sta BHPOSP0
   805 22A8 A9 38			lda #$38
   806 22AA 85 01			sta BHPOSP1
   807 22AC A5 00			lda WSHIPX
   808 22AE 8D 00 D0			sta GLOBALS.HPOSP01
   809 22B1 A5 01			lda WSHIPX+1
   810 22B3 8D 01 D0			sta GLOBALS.HPOSP01+1
   811
   812 				; optimize OK (SPRITES), line = 39
   813
   814 22B6 A9 00			lda #$00
   815 22B8 8D 08 D0			sta GLOBALS.SIZEP01
   816 22BB 8D 09 D0			sta GLOBALS.SIZEP01+1
   817 22BE 8D 0C D0			sta GLOBALS.SIZEM
   818 22C1 8D 1B D0			sta GLOBALS.PRIOR
   819 22C4 A9 03			lda #$03
   820 22C6 8D 1D D0			sta GLOBALS.GRACTL
   821
   822 				; optimize FAIL ('COPYSHIP', SPRITES), line = 41
   823
   824 22C9 20 07 22			jsr COPYSHIP
   825 22CC			@exit
   826 					.ifdef @new
   827 					lda <@VarData
   828 					sta :ztmp
   829 					lda >@VarData
   830 					ldy #@VarDataSize-1
   831 					jmp @FreeMem
   832 					els
   833 22CC 60				rts						; ret
   834 					eif
   835 				.endl
   836
   837 				; ------------------------------------------------------------
   838 				; ------------------------------------------------------------
   839 22CD			@UnitInit
   840
   841 22CD 60				rts
   842
   843 				; ------------------------------------------------------------
   844
   845 = 0000			BHPOSP0	= $00
   846 = 0001			BHPOSP1	= $01
   847 = 0002			BSHIPY	= $02
   848 = 0003			BSHIPYCLEAR	= $03
   849 = 0000			WSHIPX	= $00
   850
   851 				.endl							; UNIT SPRITES
   852
   853 				; ------------------------------------------------------------
   854
   855 22CE			.local	JOY						; UNIT
   856
   857 22CE			.local	MOVESHIP					; PROCEDURE
   858
   859 				; optimize OK (JOY), line = 20
   860
   861 22CE A9 0C			lda #$0C
   862 22D0 85 FF			sta GLOBALS.BTMP1
   863
   864 				; optimize OK (JOY), line = 21
   865
   866 22D2 A9 01			lda #$01
   867 22D4 85 FD			sta GLOBALS.B1I
   868
   869 22D6			l_0117
   870 				; --- ForToDoCondition
   871
   872 				; optimize OK (JOY), line = 22
   873
   874 22D6 A5 04			lda JOYDIRECTION
   875 22D8 25 FF			and GLOBALS.BTMP1
   876 22DA 8D 0B 25			sta @CASETMP_0003
   877 22DD C9 04			cmp #$04
   878 22DF D0 20			jne l_0136
   879 22E1			@
   880
   881 				; optimize OK (JOY), line = 24
   882
   883 22E1 A5 01			lda SPRITES.BHPOSP1
   884 22E3 C9 B0			cmp #$B0
   885 22E5 B0 17			jcs l_0148
   886
   887 				; optimize OK (JOY), line = 25
   888
   889 22E7 A5 00			lda SPRITES.WSHIPX
   890 22E9 18 69 02			add #$02
   891 22EC 85 00			sta SPRITES.WSHIPX
   892 22EE A5 01			lda SPRITES.WSHIPX+1
   893 22F0 69 02			adc #$02
   894 22F2 85 01			sta SPRITES.WSHIPX+1
   895 22F4 A5 00			lda SPRITES.WSHIPX
   896 22F6 8D 00 D0			sta GLOBALS.HPOSP01
   897 22F9 A5 01			lda SPRITES.WSHIPX+1
   898 22FB 8D 01 D0			sta GLOBALS.HPOSP01+1
   899 22FE			l_0148
   900
   901 22FE 4C 55 23			jmp a_0003
   902 2301			l_0136
   903 2301 C9 08			cmp #$08
   904 2303 D0 20			jne l_015A
   905 2305			@
   906
   907 				; optimize OK (JOY), line = 29
   908
   909 2305 A5 00			lda SPRITES.BHPOSP0
   910 2307 C9 31			cmp #$31
   911 2309 90 17			jcc l_016C
   912
   913 				; optimize OK (JOY), line = 30
   914
   915 230B A5 00			lda SPRITES.WSHIPX
   916 230D 38 E9 02			sub #$02
   917 2310 85 00			sta SPRITES.WSHIPX
   918 2312 A5 01			lda SPRITES.WSHIPX+1
   919 2314 E9 02			sbc #$02
   920 2316 85 01			sta SPRITES.WSHIPX+1
   921 2318 A5 00			lda SPRITES.WSHIPX
   922 231A 8D 00 D0			sta GLOBALS.HPOSP01
   923 231D A5 01			lda SPRITES.WSHIPX+1
   924 231F 8D 01 D0			sta GLOBALS.HPOSP01+1
   925 2322			l_016C
   926
   927 2322 4C 55 23			jmp a_0003
   928 2325			l_015A
   929 2325 C9 02			cmp #$02
   930 2327 D0 18			jne l_017E
   931 2329			@
   932
   933 				; optimize OK (JOY), line = 34
   934
   935 2329 A5 02			lda SPRITES.BSHIPY
   936 232B C9 21			cmp #$21
   937 232D 90 0F			jcc l_0190
   938
   939 				; optimize OK (JOY), line = 35
   940
   941 232F 18 69 06			add #$06
   942 2332 85 03			sta SPRITES.BSHIPYCLEAR
   943 2334 A5 02			lda SPRITES.BSHIPY
   944 2336 38 E9 02			sub #$02
   945 2339 85 02			sta SPRITES.BSHIPY
   946
   947 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 36
   948
   949 233B 20 07 22			jsr SPRITES.COPYSHIP
   950 233E			l_0190
   951
   952 233E 4C 55 23			jmp a_0003
   953 2341			l_017E
   954 2341 C9 01			cmp #$01
   955 2343 D0 10			jne l_01A8
   956 2345			@
   957
   958 				; optimize OK (JOY), line = 40
   959
   960 2345 A5 02			lda SPRITES.BSHIPY
   961 2347 C9 A8			cmp #$A8
   962 2349 B0 0A			jcs l_01BA
   963
   964 				; optimize OK (JOY), line = 41
   965
   966 234B 85 03			sta SPRITES.BSHIPYCLEAR
   967 234D 18 69 02			add #$02
   968 2350 85 02			sta SPRITES.BSHIPY
   969
   970 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 42
   971
   972 2352 20 07 22			jsr SPRITES.COPYSHIP
   973 2355			l_01BA
   974
   975 2355			l_01A8
   976 2355			a_0003
   977
   978 				; optimize OK (JOY), line = 46
   979
   980 2355 A9 03			lda #$03
   981 2357 85 FF			sta GLOBALS.BTMP1
   982
   983 				; --- ForToDoEpilog
   984 2359 C6 FD			dec GLOBALS.B1I
   985 235B 30 03 4C D6 22		jpl l_0117
   986 2360			l_0125
   987
   988 				; ------------------------------------------------------------
   989
   990 = 0000			@FORTMP_0114	= $00
   991 = 250B			@CASETMP_0003	= DATAORIGIN+$000F
   992
   993 = 250B			@VarData	= @CASETMP_0003
   994 = 0001			@VarDataSize	= 1
   995
   996 2360			@exit
   997 					.ifdef @new
   998 					lda <@VarData
   999 					sta :ztmp
  1000 					lda >@VarData
  1001 					ldy #@VarDataSize-1
  1002 					jmp @FreeMem
  1003 					els
  1004 2360 60				rts						; ret
  1005 					eif
  1006 				.endl
  1007
  1008 				; ------------------------------------------------------------
  1009 				; ------------------------------------------------------------
  1010 2361			@UnitInit
  1011
  1012 2361 60				rts
  1013
  1014 				; ------------------------------------------------------------
  1015
  1016 = 0004			JOYDIRECTION	= $04
  1017
  1018 				.endl							; UNIT JOY
  1019
  1020 2362			.local	VBI						; PROCEDURE | INTERRUPT
  1021
  1022 				; ---------------------  ASM Block 055  ---------------------
  1023
  1024 2362 48 8A 48 98 48	 phr 
  1025
  1026 				; ---------------------  ASM Block 056  ---------------------
  1027
  1028 2367 68 A8 68 AA 68	 plr 
  1029 236C 40				rti						; ret
  1030 				.endl
  1031
  1032 236D			.local	JOYHANDLER					; PROCEDURE | INTERRUPT
  1033
  1034 				; ---------------------  ASM Block 057  ---------------------
  1035
  1036 236D 48 8A 48 98 48	 phr 
  1037
  1038 				; optimize OK (main.pas), line = 29
  1039
  1040 2372 AD 00 D3			lda GLOBALS.PORTA
  1041 2375 85 04			sta JOY.JOYDIRECTION
  1042
  1043 				; optimize OK (main.pas), line = 30
  1044
  1045 2377 29 0F			and #$0F
  1046 2379 C9 0F			cmp #$0F
  1047 237B F0 03			jeq l_01FA
  1048 237D 20 CE 22			jsr JOY.MOVESHIP
  1049 2380			l_01FA
  1050
  1051 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 32
  1052
  1053 2380 E8				inx
  1054 2381 AD 0E 25 95 98		mva PSTARS :STACKORIGIN,x
  1055 2386 AD 0F 25 95 A8		mva PSTARS+1 :STACKORIGIN+STACKWIDTH,x
  1056 238B 20 C7 21			jsr SYS.SETDLI
  1057
  1058 				; ---------------------  ASM Block 058  ---------------------
  1059
  1060 238E 68 A8 68 AA 68	 plr 
  1061 2393 40				rti						; ret
  1062 				.endl
  1063
  1064 2394			.local	STARS						; PROCEDURE | INTERRUPT
  1065
  1066 				; ---------------------  ASM Block 059  ---------------------
  1067
  1068 2394 48 8A 48 98 48	 phr 
  1069
  1070 				; optimize OK (main.pas), line = 41
  1071
  1072 2399 A9 7C			lda #$7C
  1073 239B 85 FD			sta GLOBALS.B1I
  1074
  1075 239D			l_020E
  1076 				; --- ForToDoCondition
  1077
  1078 				; ---------------------  ASM Block 060  ---------------------
  1079
  1080 239D 8D 0A D4		 sta WSYNC 
  1081
  1082 				; optimize OK (main.pas), line = 43
  1083
  1084 23A0 A4 FD			ldy GLOBALS.B1I
  1085 23A2 B9 00 12			lda adr.ASTARS,y
  1086 23A5 8D 07 D0			sta GLOBALS.HPOSM3
  1087
  1088 				; optimize OK (main.pas), line = 44
  1089
  1090 23A8 B9 00 12			lda adr.ASTARS,y
  1091 23AB 38 F9 7D 12			sub adr.ASPEED,y
  1092 23AF 99 00 12			sta adr.ASTARS,y
  1093
  1094 				; optimize OK (main.pas), line = 45
  1095
  1096 23B2 AD 0A D2			lda SYSTEM.RND
  1097 23B5 8D 15 D0			sta GLOBALS.COLPM3
  1098
  1099 				; --- ForToDoEpilog
  1100 23B8 C6 FD			dec GLOBALS.B1I
  1101 23BA 10 E1			jpl l_020E
  1102 23BC			l_021C
  1103
  1104 				; optimize OK (main.pas), line = 50
  1105
  1106 23BC A5 14			lda GLOBALS.RTCLOK
  1107 23BE 29 01			and #$01
  1108 23C0 D0 25			jne l_024F
  1109
  1110 				; optimize OK (main.pas), line = 51
  1111
  1112 23C2 AD 04 11			lda GLOBALS.DL2LMS
  1113 23C5 18 69 03			add #$03
  1114 23C8 85 A1			sta :STACKORIGIN+9
  1115 23CA AD 05 11			lda GLOBALS.DL2LMS+1
  1116 23CD 69 00			adc #$00
  1117 23CF 85 B1			sta :STACKORIGIN+STACKWIDTH+9
  1118 23D1 AD 0A D2			lda SYSTEM.RND
  1119 23D4 29 0F			and #$0F
  1120 23D6 20 C8 20			jsr @mul40
  1121 23D9 18 65 A1			add :STACKORIGIN+9
  1122 23DC A8				tay
  1123 23DD A5 B1			lda :STACKORIGIN+STACKWIDTH+9
  1124 23DF 65 85			adc :eax+1
  1125 23E1 85 91			sta :bp+1
  1126 23E3 A9 02			lda #$02
  1127 23E5 91 90			sta (:bp),y
  1128 23E7			l_024F
  1129
  1130 				; optimize OK (main.pas), line = 54
  1131
  1132 23E7 AD 05 11			lda GLOBALS.DL2LMS+1
  1133 23EA C9 E0			cmp #$E0
  1134 23EC 90 17			jcc l_0279
  1135 23EE D0 07			bne @+
  1136 23F0 AD 04 11			lda GLOBALS.DL2LMS
  1137 23F3 C9 01			cmp #$01
  1138 23F5 90 0E			jcc l_0279
  1139 23F7			@
  1140 23F7 AD 04 11 D0 03 CE + 	dew GLOBALS.DL2LMS
  1141 2402 4C 0F 24			jmp l_0287
  1142 2405			l_0279
  1143 2405 A9 3F			lda #$3F
  1144 2407 8D 04 11			sta GLOBALS.DL2LMS
  1145 240A A9 EC			lda #$EC
  1146 240C 8D 05 11			sta GLOBALS.DL2LMS+1
  1147 240F			l_0287
  1148
  1149 				; optimize OK (main.pas), line = 56
  1150
  1151 240F AD 04 11			lda GLOBALS.DL2LMS
  1152 2412 85 FA			sta GLOBALS.WTMP1
  1153 2414 AD 05 11			lda GLOBALS.DL2LMS+1
  1154 2417 85 FB			sta GLOBALS.WTMP1+1
  1155
  1156 				; ---------------------  ASM Block 061  ---------------------
  1157
  1158
  1159 2419 A2 15		        ldx #GAME_SCREEN_ROWS
  1160 241B A0 00		        ldy #0
  1161 241D 98			  clr:  tya
  1162 241E 91 FA		        sta (GLOBALS.WTMP1),y
  1163 2420 A5 FA		        lda GLOBALS.WTMP1
  1164 2422 18 69 28		        add #40
  1165 2425 85 FA		        sta GLOBALS.WTMP1
  1166 2427 90 02		        bcc @+
  1167 2429 E6 FB		        inc GLOBALS.WTMP1+1
  1168 242B CA			  @:    dex
  1169 242C 10 EF		        bpl clr
  1170 				  
  1171
  1172 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 74
  1173
  1174 242E E8				inx
  1175 242F AD 0C 25 95 98		mva PJOY :STACKORIGIN,x
  1176 2434 AD 0D 25 95 A8		mva PJOY+1 :STACKORIGIN+STACKWIDTH,x
  1177 2439 20 C7 21			jsr SYS.SETDLI
  1178
  1179 				; ---------------------  ASM Block 062  ---------------------
  1180
  1181 243C 68 A8 68 AA 68	 plr 
  1182
  1183 				; ------------------------------------------------------------
  1184
  1185 = 0000			@FORTMP_020B	= $00
  1186 2441 40				rti						; ret
  1187 				.endl
  1188
  1189 2442			.local	INIT						; PROCEDURE
  1190
  1191 				; optimize FAIL ('SYSTEM.PAUSE_0078', main.pas), line = 81
  1192
  1193 2442 20 96 21			jsr SYSTEM.PAUSE_0078
  1194 2445 A9 00			lda #$00
  1195 2447 8D 00 D4			sta GLOBALS.DMACTL
  1196 244A 20 DF 21			jsr SYS.SYSTEMOFF
  1197
  1198 				; optimize OK (main.pas), line = 83
  1199
  1200 244D A9 18			lda #$18
  1201 244F 8D 09 D4			sta GLOBALS.CHBAS
  1202
  1203 				; optimize OK (main.pas), line = 85
  1204
  1205 2452 A9 3F			lda #$3F
  1206 2454 85 88			sta :edx
  1207 2456 A9 EC			lda #$EC
  1208 2458 85 89			sta :edx+1
  1209 245A A9 C0			lda #$C0
  1210 245C 85 8C			sta :ecx
  1211 245E A9 03			lda #$03
  1212 2460 85 8D			sta :ecx+1
  1213 2462 A9 00			lda #$00
  1214 2464 85 84			sta :eax
  1215 2466 20 80 20			jsr @fill
  1216
  1217 				; optimize OK (main.pas), line = 87
  1218
  1219 2469 A9 7C			lda #$7C
  1220 246B 85 FD			sta GLOBALS.B1I
  1221
  1222 246D			l_02AE
  1223 				; --- ForToDoCondition
  1224
  1225 				; optimize OK (main.pas), line = 88
  1226
  1227 246D A4 FD			ldy GLOBALS.B1I
  1228 246F AD 0A D2			lda SYSTEM.RND
  1229 2472 99 00 12			sta adr.ASTARS,y
  1230
  1231 				; optimize OK (main.pas), line = 89
  1232
  1233 2475 29 03			and #$03
  1234 2477 18 69 01			add #$01
  1235 247A 99 7D 12			sta adr.ASPEED,y
  1236
  1237 				; --- ForToDoEpilog
  1238 247D C6 FD			dec GLOBALS.B1I
  1239 247F 10 EC			jpl l_02AE
  1240 2481			l_02BC
  1241
  1242 				; optimize OK (main.pas), line = 92
  1243
  1244 2481 AD 02 D3			lda GLOBALS.PACTL
  1245 2484 09 04			ora #$04
  1246 2486 8D 02 D3			sta GLOBALS.PACTL
  1247 2489 20 5E 22			jsr SPRITES.INIT
  1248 248C 20 FB 21			jsr GR.MODE2
  1249
  1250 				; optimize OK (main.pas), line = 93
  1251
  1252 248F A9 00			lda #$00
  1253 2491 8D 1A D0			sta GLOBALS.COLBK
  1254 2494 8D 16 D0			sta GLOBALS.COLPF0
  1255 2497 A9 0F			lda #$0F
  1256 2499 8D 17 D0			sta GLOBALS.COLPF1
  1257 249C A9 02			lda #$02
  1258 249E 8D 18 D0			sta GLOBALS.COLPF2
  1259 24A1 A9 00			lda #$00
  1260 24A3 8D 19 D0			sta GLOBALS.COLPF3
  1261
  1262 				; optimize OK (main.pas), line = 94
  1263
  1264 24A6 A9 6D			lda <JOYHANDLER
  1265 24A8 8D 0C 25			sta PJOY
  1266 24AB A9 23			lda >JOYHANDLER
  1267 24AD 8D 0D 25			sta PJOY+1
  1268 24B0 A9 94			lda <STARS
  1269 24B2 8D 0E 25			sta PSTARS
  1270 24B5 A9 23			lda >STARS
  1271 24B7 8D 0F 25			sta PSTARS+1
  1272
  1273 				; optimize FAIL ('SYS.SETVBI', main.pas), line = 96
  1274
  1275 24BA E8				inx
  1276 24BB A9 62 95 98			mva <VBI :STACKORIGIN,x
  1277 24BF A9 23 95 A8			mva >VBI :STACKORIGIN+STACKWIDTH,x
  1278 24C3 20 AF 21			jsr SYS.SETVBI
  1279
  1280 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 97
  1281
  1282 24C6 E8				inx
  1283 24C7 A9 6D 95 98			mva <JOYHANDLER :STACKORIGIN,x
  1284 24CB A9 23 95 A8			mva >JOYHANDLER :STACKORIGIN+STACKWIDTH,x
  1285 24CF 20 C7 21			jsr SYS.SETDLI
  1286
  1287 				; optimize FAIL ('SYSTEM.PAUSE_0078', main.pas), line = 99
  1288
  1289 24D2 20 96 21			jsr SYSTEM.PAUSE_0078
  1290 24D5 A9 3E			lda #$3E
  1291 24D7 8D 00 D4			sta GLOBALS.DMACTL
  1292
  1293 				; ------------------------------------------------------------
  1294
  1295 = 0000			@FORTMP_02AB	= $00
  1296 24DA			@exit
  1297 					.ifdef @new
  1298 					lda <@VarData
  1299 					sta :ztmp
  1300 					lda >@VarData
  1301 					ldy #@VarDataSize-1
  1302 					jmp @FreeMem
  1303 					els
  1304 24DA 60				rts						; ret
  1305 					eif
  1306 				.endl
  1307 24DB			l_0007
  1308
  1309 				; optimize FAIL ('INIT', main.pas), line = 103
  1310
  1311 24DB 20 42 24			jsr INIT
  1312
  1313 				; --- RepeatUntilProlog
  1314 24DE			l_030B
  1315
  1316 				; optimize OK (main.pas), line = 104
  1317
  1318 24DE 4C DE 24			jmp l_030B
  1319
  1320 				; ------------------------------------------------------------
  1321
  1322 = 1000			PM_ADR	= $1000
  1323 = 1300			M0_ADR	= $1300
  1324 = 1400			P0_ADR	= $1400
  1325 = 1500			P1_ADR	= $1500
  1326 = 1000			GFX_SHIP_ADR	= $1000
  1327 = 0008			GFX_SHIP_SEG	= $08
  1328 = 1800			GFX_FONTS_ADR	= $1800
  1329 = 1100			DL_2	= $1100
  1330 = EC3F			GAME_LMS	= $EC3F
  1331 = E000			GAME_LMS_EMD	= $E000
  1332 = 0015			GAME_SCREEN_ROWS	= $15
  1333 = 0E0E			SHIP_COL	= $0E0E
  1334 = 0030			SHIP_LEFT_LIMIT	= $30
  1335 = 00B0			SHIP_RIGHT_LIMIT	= $B0
  1336 = 0020			SHIP_TOP_LIMIT	= $20
  1337 = 00A8			SHIP_BOTTOM_LIMIT	= $A8
  1338 = 0202			SHIP_X_STEP	= $0202
  1339 = 0008			JOY_LEFT	= $08
  1340 = 0004			JOY_RIGHT	= $04
  1341 = 0002			JOY_UP	= $02
  1342 = 0001			JOY_DOWN	= $01
  1343 = 1200			adr.ASTARS	= $1200
  1344 24E1			.var ASTARS	= adr.ASTARS .word
  1345 = 127D			adr.ASPEED	= $127D
  1346 24E1			.var ASPEED	= adr.ASPEED .word
  1347 = 250C			PJOY	= DATAORIGIN+$0010
  1348 = 250E			PSTARS	= DATAORIGIN+$0012
  1349 24E1			@exit
  1350
  1351 24E1 A2 00		@halt	ldx #$00
  1352 24E3 9A				txs
  1353 					.ifdef MAIN.@DEFINES.ROMOFF
  1354 					inc portb
  1355 					.endif
  1356
  1357 24E4 A0 01			ldy #$01
  1358
  1359 24E6 60				rts
  1360
  1361 				; ------------------------------------------------------------
  1362
  1363 24E7 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1364
  1365 				; ------------------------------------------------------------
  1366
  1367 24F7			.local	@DEFINES
  1368 24F7			ATARI
  1369 				.endl
  1370
  1371 24F7			.local	@RESOURCE
  1372 				.endl
  1373
  1374 = 24F7 00 12		ASTARS
  1374 = 24F9 7D 12		ASPEED
  1374 				.endl							; MAIN
  1375
  1376 				; ------------------------------------------------------------
  1377 				; ------------------------------------------------------------
  1378
  1379 				.macro	UNITINITIALIZATION
  1380 				
  1381 					.ifdef MAIN.SYSTEM.@UnitInit
  1382 					jsr MAIN.SYSTEM.@UnitInit
  1383 					eif
  1384 				
  1385 					.ifdef MAIN.GLOBALS.@UnitInit
  1386 					jsr MAIN.GLOBALS.@UnitInit
  1387 					eif
  1388 				
  1389 					.ifdef MAIN.SYS.@UnitInit
  1390 					jsr MAIN.SYS.@UnitInit
  1391 					eif
  1392 				
  1393 					.ifdef MAIN.GR.@UnitInit
  1394 					jsr MAIN.GR.@UnitInit
  1395 					eif
  1396 				
  1397 					.ifdef MAIN.SPRITES.@UnitInit
  1398 					jsr MAIN.SPRITES.@UnitInit
  1399 					eif
  1400 				
  1401 					.ifdef MAIN.JOY.@UnitInit
  1402 					jsr MAIN.JOY.@UnitInit
  1403 					eif
  1404 				.endm
  1405
  1406 				; ------------------------------------------------------------
  1407
  1408 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1409 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1409 				SYSTEM: $2129..$21A0
  1410 					eif
  1411
  1412 					ift .SIZEOF(MAIN.GLOBALS) > 0
  1413 					.print 'GLOBALS: ',MAIN.GLOBALS,'..',MAIN.GLOBALS+.SIZEOF(MAIN.GLOBALS)-1
  1414 					eif
  1415
  1416 					ift .SIZEOF(MAIN.SYS) > 0
  1417 					.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
  1417 				SYS: $21A1..$21FA
  1418 					eif
  1419
  1420 					ift .SIZEOF(MAIN.GR) > 0
  1421 					.print 'GR: ',MAIN.GR,'..',MAIN.GR+.SIZEOF(MAIN.GR)-1
  1421 				GR: $21FB..$2206
  1422 					eif
  1423
  1424 					ift .SIZEOF(MAIN.SPRITES) > 0
  1425 					.print 'SPRITES: ',MAIN.SPRITES,'..',MAIN.SPRITES+.SIZEOF(MAIN.SPRITES)-1
  1425 				SPRITES: $2207..$22CD
  1426 					eif
  1427
  1428 					ift .SIZEOF(MAIN.JOY) > 0
  1429 					.print 'JOY: ',MAIN.JOY,'..',MAIN.JOY+.SIZEOF(MAIN.JOY)-1
  1429 				JOY: $22CE..$2361
  1430 					eif
  1431
  1432 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1432 				CODE: $2000..$24F6
  1433
  1434 				; ------------------------------------------------------------
  1435
  1436 24FB				.align $04
  1437
  1438 24FC			DATAORIGIN
  1439 24FC-2501> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  1440
  1441 = 0006			VARINITSIZE	= *-DATAORIGIN
  1442 = 0014			VARDATASIZE	= 20
  1443
  1444 = 2510			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1445
  1446 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1446 				DATA: $24FC..$2510
  1447
  1448 02E0-02E1> ED 20			run START
  1449
  1450 				; ------------------------------------------------------------
  1451
  1452 				.macro	STATICDATA
  1453 				.endm
  1454
  1455 					end
