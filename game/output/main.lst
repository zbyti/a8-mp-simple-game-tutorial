mads 2.1.1
  1133 					opt l+
    98 = 0000				?EXTDETECT = 0
    99 = 0000				?VBXDETECT = 0
   100
   101 2075				RCASM 'res/gr_dl.asm' GLOBALS.DL_2 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 001A			len = .sizeof(_GLOBALS.DL_2)
     6 				mcpy	ift main.GLOBALS.DL_2+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 11 +  MWA #MAIN.GLOBALS.DL_2 ECX
    13 2088 A9 1A 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: const.inc
     1 = 1000			PM_ADR              = $1000;                      // players & missiles memory (2K) start address
     2 = 1300			M0_ADR              = PM_ADR + $300;              // missile 0 start memory address
     3 = 1400			P0_ADR              = PM_ADR + $400;              // player 0 start memory address
     4 = 1500			P1_ADR              = PM_ADR + $500;              // player 1 start memory address
     5 = 1000			GFX_SHIP_ADR        = $1000;                      // ship gfx memory start address, ship size = 20 bytes, 16 bytes for gfx and 4 bytes fo top/bottom empty rows
     6 = 0008			GFX_SHIP_SEG        = 8;                          // ship gfx 10 byte segment, 10B for P0 & 10B for P1
     8 = 1800			GFX_FONTS_ADR       = $1800;
    10 = 1100			DL_2                = $1100;                      // display list memory start address for ANTIC mode 2
    11 = EC3F			GAME_LMS            = $efff - $3c0;               // Load Memory Scan address
    12 = E000			GAME_LMS_END        = $e000;
    13 = 0015			GAME_SCREEN_ROWS    = 21;
    15 = 0E0E			SHIP_COL            = $0e0e;
    16 = 0030			SHIP_LEFT_LIMIT     = 48;
    17 = 00B0			SHIP_RIGHT_LIMIT    = SHIP_LEFT_LIMIT + (16 * 8);
    18 = 0020			SHIP_TOP_LIMIT      = 32;
    19 = 00A8			SHIP_BOTTOM_LIMIT   = 8 * GAME_SCREEN_ROWS;
    20 = 0202			SHIP_X_STEP         = $0202;
    22 = 0008			JOY_LEFT            = %1000;
    23 = 0004			JOY_RIGHT           = %0100;
    24 = 0002			JOY_UP              = %0010;
    25 = 0001			JOY_DOWN            = %0001;
     3 1100			dl2
     4 1100 F0 70 F0		    .byte $f0,$70,$f0
     5 1103 42 3F EC		    .byte $42,a(GAME_LMS)
     6 1106 02 02 02 02 02 02 + :17 .byte 2
     7 1117 41 00 11		    .byte $41,a(dl2)
    23 					.print '$R RCASM   ',main.GLOBALS.DL_2,'..',main.GLOBALS.DL_2+len-1," 'res/gr_dl.asm'"
    23 				$R RCASM   $1100..$1119 'res/gr_dl.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: main.a65
   102 20B0				RCDATA 'res/gfx_ship.bin' GLOBALS.GFX_SHIP_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0010			len = .filesize('res/gfx_ship.bin')
    28 20B0				org main.GLOBALS.GFX_SHIP_ADR
    30 1000-100F> 70 7B 1E 3F + 	ins 'res/gfx_ship.bin'
    32 					.print '$R RCDATA  ',main.GLOBALS.GFX_SHIP_ADR,'..',*-1," 'res/gfx_ship.bin'"
    32 				$R RCDATA  $1000..$100F 'res/gfx_ship.bin'
Source: main.a65
   103 1010				RCDATA 'res/charset.fnt' GLOBALS.GFX_FONTS_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0400			len = .filesize('res/charset.fnt')
    28 1010				org main.GLOBALS.GFX_FONTS_ADR
    30 1800-1BFF> 00 00 00 00 + 	ins 'res/charset.fnt'
    32 					.print '$R RCDATA  ',main.GLOBALS.GFX_FONTS_ADR,'..',*-1," 'res/charset.fnt'"
    32 				$R RCDATA  $1800..$1BFF 'res/charset.fnt'
Source: main.a65
   104 				.endl
   105
   106 				; ------------------------------------------------------------
   107
   108 1C00				org CODEORIGIN
   109
   110 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
Source: main.a65
   111
   112 				; ------------------------------------------------------------
   113
   114 2000			RTLIB
   115 2000				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
   148 					opt l+
   116
   117 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   117 				ZPAGE: $0080..$00D7
   118
   119 				.print 'RTLIB: ',RTLIB,'..',*-1
   119 				RTLIB: $2000..$20DB
   120
   121 				; ------------------------------------------------------------
   122
   123 20DC			START
   124 20DC BA				tsx
   125 20DD 8E FA 24			stx MAIN.@halt+1
   126
   127 					.ifdef fmulinit
   128 					fmulinit
   129 					eif
   130
   131 = 000E			VLEN	= VARDATASIZE-VARINITSIZE
   132 = 251A			VADR	= DATAORIGIN+VARINITSIZE
   133
   134 					ift VADR > $BFFF
   135 					ert 'Invalid memory address range ',VADR
   136 					eli (VLEN>0) && (VLEN<=256)
   137 20E0 A2 F2			ldx #256-VLEN
   138 20E2 A9 00			lda #$00
   139 20E4 9D 28 24 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   140 					eli VLEN>0
   141 					@fill #VADR #VLEN #$00
   142 					eif
   143
   144 20EA A9 28 85 82 A9 25 + 	mwa #PROGRAMSTACK psptr
   145
   146 					.ifdef MAIN.@DEFINES.ROMOFF
   147 					icl 'atari\romoff.asm'
   148 					.endif
   149
   150 20F2 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   151 20F4 BD 40 03 9D FF 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   152
   153 20FD E8				inx						; X = 0
   154 20FE 86 90			stx bp						; BP = 0
   155
   156 2100 8E 08 D2			stx audctl					; reset POKEY
   157 2103 A9 03			lda #3
   158 2105 8D 0F D2			sta skctl
   159
   160 2108 CA				dex						; X = 255
   161
   162 2109				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
    11 2109 20 CB 21			jsr MAIN.SYS.@UnitInit
    15 210C 20 D7 21			jsr MAIN.GR.@UnitInit
    19 210F 20 A0 22			jsr MAIN.SPRITES.@UnitInit
    23 2112 20 59 23			jsr MAIN.JOY.@UnitInit
   163
   164 2115			.local	MAIN						; PROCEDURE
   165
   166 2115 4C F3 24			jmp l_0007
   167
   168 				; ------------------------------------------------------------
   169
   170 2118			.local	SYSTEM						; UNIT
   171
   172 2118			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   173
   174 				; ------------------------------------------------------------
   175
   176 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   177 				; as Pointer
   178 2118 B5 98			lda :STACKORIGIN,x
   179 211A 85 8C			sta VALUE
   180 211C CA				dex
   181
   182 				; ------------------------------------------------------------
   183
   184 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   185 				; as Pointer
   186 211D B5 98			lda :STACKORIGIN,x
   187 211F 85 88			sta A
   188 2121 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   189 2123 85 89			sta A+1
   190 2125 CA				dex
   191
   192 				; ---------------------  ASM Block 021  ---------------------
   193
   194 2126 A0 00			ldy #0
   195 2128 A5 8C 91 88			mva value (edx),y
   196
   197
   198 				; ------------------------------------------------------------
   199
   200 = 0088			A	= edx
   201 = 008C			VALUE	= ecx
   202 212C			@exit
   203 					.ifdef @new
   204 					lda <@VarData
   205 					sta :ztmp
   206 					lda >@VarData
   207 					ldy #@VarDataSize-1
   208 					jmp @FreeMem
   209 					els
   210 212C 60				rts						; ret
   211 					eif
   212 				.endl
   213
   214 212D			.local	FILLBYTE_0049					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   215
   216 				; ------------------------------------------------------------
   217
   218 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   219 				; as Pointer
   220 212D B5 98			lda :STACKORIGIN,x
   221 212F 85 84			sta VALUE
   222 2131 CA				dex
   223
   224 				; ------------------------------------------------------------
   225
   226 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   227 				; as Pointer
   228 2132 B5 98			lda :STACKORIGIN,x
   229 2134 85 8C			sta COUNT
   230 2136 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   231 2138 85 8D			sta COUNT+1
   232 213A CA				dex
   233
   234 				; ------------------------------------------------------------
   235
   236 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   237 				; as Pointer
   238 213B B5 98			lda :STACKORIGIN,x
   239 213D 85 88			sta A
   240 213F B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   241 2141 85 89			sta A+1
   242 2143 CA				dex
   243
   244 				; ---------------------  ASM Block 029  ---------------------
   245
   246 2144 20 80 20			jsr @fill
   247
   248
   249 				; ------------------------------------------------------------
   250
   251 = 0088			A	= edx
   252 = 008C			COUNT	= ecx
   253 = 0084			VALUE	= eax
   254 2147			@exit
   255 					.ifdef @new
   256 					lda <@VarData
   257 					sta :ztmp
   258 					lda >@VarData
   259 					ldy #@VarDataSize-1
   260 					jmp @FreeMem
   261 					els
   262 2147 60				rts						; ret
   263 					eif
   264 				.endl
   265
   266 2148			.local	MOVE_0053					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   267
   268 				; ------------------------------------------------------------
   269
   270 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   271 				; as Pointer
   272 2148 B5 98			lda :STACKORIGIN,x
   273 214A 85 84			sta COUNT
   274 214C B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   275 214E 85 85			sta COUNT+1
   276 2150 CA				dex
   277
   278 				; ------------------------------------------------------------
   279
   280 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   281 				; as Pointer
   282 2151 B5 98			lda :STACKORIGIN,x
   283 2153 85 8C			sta DEST
   284 2155 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   285 2157 85 8D			sta DEST+1
   286 2159 CA				dex
   287
   288 				; ------------------------------------------------------------
   289
   290 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   291 				; as Pointer
   292 215A B5 98			lda :STACKORIGIN,x
   293 215C 85 88			sta SOURCE
   294 215E B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   295 2160 85 89			sta SOURCE+1
   296 2162 CA				dex
   297
   298 				; ---------------------  ASM Block 031  ---------------------
   299
   300 2163 20 2B 20			jsr @move
   301
   302
   303 				; ------------------------------------------------------------
   304
   305 = 0088			SOURCE	= edx
   306 = 008C			DEST	= ecx
   307 = 0084			COUNT	= eax
   308 2166			@exit
   309 					.ifdef @new
   310 					lda <@VarData
   311 					sta :ztmp
   312 					lda >@VarData
   313 					ldy #@VarDataSize-1
   314 					jmp @FreeMem
   315 					els
   316 2166 60				rts						; ret
   317 					eif
   318 				.endl
   319
   320 2167			.local	PAUSE_0071					; PROCEDURE | ASSEMBLER | OVERLOAD
   321
   322 				; ---------------------  ASM Block 039  ---------------------
   323
   324 2167 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   325
   326 216D			@exit
   327 					.ifdef @new
   328 					lda <@VarData
   329 					sta :ztmp
   330 					lda >@VarData
   331 					ldy #@VarDataSize-1
   332 					jmp @FreeMem
   333 					els
   334 216D 60				rts						; ret
   335 					eif
   336 				.endl
   337
   338 				; ------------------------------------------------------------
   339
   340 = 0101			__PORTB_BANKS	= $0101
   341 = 0648			M_PI_2	= $0648
   342 = 0192			D_PI_2	= $0192
   343 = 0004			D_PI_180	= $04
   344 = 0000			MGTIA	= $00
   345 = 0080			MVBXE	= $80
   346 = 0000			VBXE_XDLADR	= $00
   347 = 0100			VBXE_BCBADR	= $0100
   348 = 1000			VBXE_MAPADR	= $1000
   349 = 5000			VBXE_OVRADR	= $5000
   350 = B000			VBXE_WINDOW	= $B000
   351 = 0000			IDLI	= $00
   352 = 0001			IVBL	= $01
   353 = 00FE			CH_DELCHR	= $FE
   354 = 009B			CH_ENTER	= $9B
   355 = 001B			CH_ESC	= $1B
   356 = 001C			CH_CURS_UP	= $1C
   357 = 001D			CH_CURS_DOWN	= $1D
   358 = 001E			CH_CURS_LEFT	= $1E
   359 = 001F			CH_CURS_RIGHT	= $1F
   360 = 007F			CH_TAB	= $7F
   361 = 009B			CH_EOL	= $9B
   362 = 007D			CH_CLR	= $7D
   363 = 00FD			CH_BELL	= $FD
   364 = 007E			CH_DEL	= $7E
   365 = 009C			CH_DELLINE	= $9C
   366 = 009D			CH_INSLINE	= $9D
   367 = 0000			COLOR_BLACK	= $00
   368 = 000E			COLOR_WHITE	= $0E
   369 = 0032			COLOR_RED	= $32
   370 = 0096			COLOR_CYAN	= $96
   371 = 0068			COLOR_VIOLET	= $68
   372 = 00C4			COLOR_GREEN	= $C4
   373 = 0074			COLOR_BLUE	= $74
   374 = 00EE			COLOR_YELLOW	= $EE
   375 = 0028			COLOR_ORANGE	= $28
   376 = 00E4			COLOR_BROWN	= $E4
   377 = 003C			COLOR_LIGHTRED	= $3C
   378 = 0004			COLOR_GRAY1	= $04
   379 = 0006			COLOR_GRAY2	= $06
   380 = 000A			COLOR_GRAY3	= $0A
   381 = 00CC			COLOR_LIGHTGREEN	= $CC
   382 = 007C			COLOR_LIGHTBLUE	= $7C
   383 = 0004			FMOPENREAD	= $04
   384 = 0008			FMOPENWRITE	= $08
   385 = 0009			FMOPENAPPEND	= $09
   386 = 000C			FMOPENREADWRITE	= $0C
   387 = 2514			SCREENWIDTH	= DATAORIGIN+$0000
   388 = 2516			SCREENHEIGHT	= DATAORIGIN+$0002
   389 = 2518			DATESEPARATOR	= DATAORIGIN+$0004
   390 = D014			TVSYSTEM	= $D014
   391 = D20A			RND	= $D20A
   392 = 02C0			adr.PALETTE	= $02C0
   393 216E			.var PALETTE	= adr.PALETTE .word
   394 = D012			adr.HPALETTE	= $D012
   395 216E			.var HPALETTE	= adr.HPALETTE .word
   396 = 2519			FILEMODE	= DATAORIGIN+$0005
   397 = 251A			GRAPHMODE	= DATAORIGIN+$0006
   398 = 251B			IORESULT	= DATAORIGIN+$0007
   399 = 251C			EOLN	= DATAORIGIN+$0008
   400 = 251D			RNDSEED	= DATAORIGIN+$0009
   401
   402 = 216E C0 02		PALETTE
   402 = 2170 12 D0		HPALETTE
   402 				.endl							; UNIT SYSTEM
   403
   404 				; ------------------------------------------------------------
   405
   406 2172			.local	GLOBALS						; UNIT
   407
   408 				; ------------------------------------------------------------
   409
   410 = 1000			PM_ADR	= $1000
   411 = 1300			M0_ADR	= $1300
   412 = 1400			P0_ADR	= $1400
   413 = 1500			P1_ADR	= $1500
   414 = 1000			GFX_SHIP_ADR	= $1000
   415 = 0008			GFX_SHIP_SEG	= $08
   416 = 1800			GFX_FONTS_ADR	= $1800
   417 = 1100			DL_2	= $1100
   418 = EC3F			GAME_LMS	= $EC3F
   419 = E000			GAME_LMS_END	= $E000
   420 = 0015			GAME_SCREEN_ROWS	= $15
   421 = 0E0E			SHIP_COL	= $0E0E
   422 = 0030			SHIP_LEFT_LIMIT	= $30
   423 = 00B0			SHIP_RIGHT_LIMIT	= $B0
   424 = 0020			SHIP_TOP_LIMIT	= $20
   425 = 00A8			SHIP_BOTTOM_LIMIT	= $A8
   426 = 0202			SHIP_X_STEP	= $0202
   427 = 0008			JOY_LEFT	= $08
   428 = 0004			JOY_RIGHT	= $04
   429 = 0002			JOY_UP	= $02
   430 = 0001			JOY_DOWN	= $01
   431 = 0014			RTCLOK	= $14
   432 = D000			HPOSP0	= $D000
   433 = D001			HPOSP1	= $D001
   434 = D004			HPOSM0	= $D004
   435 = D005			HPOSM1	= $D005
   436 = D006			HPOSM2	= $D006
   437 = D007			HPOSM3	= $D007
   438 = D008			SIZEP0	= $D008
   439 = D009			SIZEP1	= $D009
   440 = D00A			SIZEP2	= $D00A
   441 = D00B			SIZEP3	= $D00B
   442 = D00C			SIZEM	= $D00C
   443 = D010			GRAFP3	= $D010
   444 = D010			TRIG0	= $D010
   445 = D011			GRAFM	= $D011
   446 = D012			COLPM0	= $D012
   447 = D013			COLPM1	= $D013
   448 = D014			COLPM2	= $D014
   449 = D015			COLPM3	= $D015
   450 = D016			COLPF0	= $D016
   451 = D017			COLPF1	= $D017
   452 = D018			COLPF2	= $D018
   453 = D019			COLPF3	= $D019
   454 = D01A			COLBK	= $D01A
   455 = D01B			PRIOR	= $D01B
   456 = D01D			GRACTL	= $D01D
   457 = D20A			RND	= $D20A
   458 = D300			PORTA	= $D300
   459 = D301			PORTB	= $D301
   460 = D302			PACTL	= $D302
   461 = D400			DMACTL	= $D400
   462 = D402			DLIST	= $D402
   463 = D407			PMBASE	= $D407
   464 = D409			CHBAS	= $D409
   465 = D40A			WSYNC	= $D40A
   466 = D40B			VCOUNT	= $D40B
   467 = D40E			NMIEN	= $D40E
   468 = FFFA			NMIVEC	= $FFFA
   469 = D000			HPOSP01	= $D000
   470 = D008			SIZEP01	= $D008
   471 = D012			COLPM01	= $D012
   472 = 1104			WDL2LMS	= $1104
   473 = 00FF			BTMP1	= $FF
   474 = 00FE			BTMP2	= $FE
   475 = 00FD			B1I	= $FD
   476 = 00FC			B2I	= $FC
   477 = 00FA			WTMP1	= $FA
   478 = 00F8			WTMP2	= $F8
   479
   480 				.endl							; UNIT GLOBALS
   481
   482 				; ------------------------------------------------------------
   483
   484 2172			.local	SYS						; UNIT
   485
   486 2172			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
   487
   488 				; ---------------------  ASM Block 049  ---------------------
   489
   490
   491 				      bit NMIST \ bpl vbi     ; check kind of interrupt
   491 2172 2C 0F D4		      BIT NMIST 
   491 2175 10 03		 BPL VBI     
   492 = 2177			.def  :__dlijmp
   493 2177 4C 7F 21		      jmp __off               ; VDSLST
   494 217A E6 14		vbi:  inc RTCLOK+2
   495 = 217C			.def  :__vbijmp
   496 217C 4C 7F 21		      jmp __off               ; VBIVEC
   497 = 217F			.def  :__off
   498
   499 217F 40				rti						; ret
   500 				.endl
   501
   502 2180			.local	SETVBI						; PROCEDURE | ASSEMBLER
   503
   504 				; ------------------------------------------------------------
   505
   506 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   507 				; as Pointer
   508 2180 B5 98			lda :STACKORIGIN,x
   509 2182 8D 1F 25			sta A
   510 2185 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   511 2187 8D 20 25			sta A+1
   512 218A CA				dex
   513
   514 				; ---------------------  ASM Block 050  ---------------------
   515
   516
   517 218B AD 1F 25 8D 7D 21 +   mwa a __vbijmp+1
   518
   519
   520 				; ------------------------------------------------------------
   521
   522 = 251F			A	= DATAORIGIN+$000B
   523
   524 = 251F			@VarData	= A
   525 = 0002			@VarDataSize	= 2
   526
   527 2197			@exit
   528 					.ifdef @new
   529 					lda <@VarData
   530 					sta :ztmp
   531 					lda >@VarData
   532 					ldy #@VarDataSize-1
   533 					jmp @FreeMem
   534 					els
   535 2197 60				rts						; ret
   536 					eif
   537 				.endl
   538
   539 2198			.local	SETDLI						; PROCEDURE | ASSEMBLER
   540
   541 				; ------------------------------------------------------------
   542
   543 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   544 				; as Pointer
   545 2198 B5 98			lda :STACKORIGIN,x
   546 219A 8D 21 25			sta A
   547 219D B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   548 219F 8D 22 25			sta A+1
   549 21A2 CA				dex
   550
   551 				; ---------------------  ASM Block 051  ---------------------
   552
   553
   554 21A3 AD 21 25 8D 78 21 +   mwa a __dlijmp+1
   555
   556
   557 				; ------------------------------------------------------------
   558
   559 = 2521			A	= DATAORIGIN+$000D
   560
   561 = 2521			@VarData	= A
   562 = 0002			@VarDataSize	= 2
   563
   564 21AF			@exit
   565 					.ifdef @new
   566 					lda <@VarData
   567 					sta :ztmp
   568 					lda >@VarData
   569 					ldy #@VarDataSize-1
   570 					jmp @FreeMem
   571 					els
   572 21AF 60				rts						; ret
   573 					eif
   574 				.endl
   575
   576 21B0			.local	SYSTEMOFF					; PROCEDURE
   577
   578 				; ---------------------  ASM Block 054  ---------------------
   579
   580 21B0 78			 sei 
   581
   582 				; optimize OK (SYS), line = 63
   583
   584 21B1 A9 00			lda #$00
   585 21B3 8D 0E D4			sta GLOBALS.NMIEN
   586 21B6 A9 FE			lda #$FE
   587 21B8 8D 01 D3			sta GLOBALS.PORTB
   588 21BB A9 72			lda <NMI
   589 21BD 8D FA FF			sta GLOBALS.NMIVEC
   590 21C0 A9 21			lda >NMI
   591 21C2 8D FB FF			sta GLOBALS.NMIVEC+1
   592 21C5 A9 C0			lda #$C0
   593 21C7 8D 0E D4			sta GLOBALS.NMIEN
   594 21CA			@exit
   595 					.ifdef @new
   596 					lda <@VarData
   597 					sta :ztmp
   598 					lda >@VarData
   599 					ldy #@VarDataSize-1
   600 					jmp @FreeMem
   601 					els
   602 21CA 60				rts						; ret
   603 					eif
   604 				.endl
   605
   606 				; ------------------------------------------------------------
   607 				; ------------------------------------------------------------
   608 21CB			@UnitInit
   609
   610 21CB 60				rts
   611
   612 				; ------------------------------------------------------------
   613
   614 				.endl							; UNIT SYS
   615
   616 				; ------------------------------------------------------------
   617
   618 21CC			.local	GR						; UNIT
   619
   620 21CC			.local	MODE2						; PROCEDURE
   621
   622 				; optimize OK (GR), line = 17
   623
   624 21CC A9 00			lda #$00
   625 21CE 8D 02 D4			sta GLOBALS.DLIST
   626 21D1 A9 11			lda #$11
   627 21D3 8D 03 D4			sta GLOBALS.DLIST+1
   628 21D6			@exit
   629 					.ifdef @new
   630 					lda <@VarData
   631 					sta :ztmp
   632 					lda >@VarData
   633 					ldy #@VarDataSize-1
   634 					jmp @FreeMem
   635 					els
   636 21D6 60				rts						; ret
   637 					eif
   638 				.endl
   639
   640 				; ------------------------------------------------------------
   641 				; ------------------------------------------------------------
   642 21D7			@UnitInit
   643
   644 21D7 60				rts
   645
   646 				; ------------------------------------------------------------
   647
   648 				.endl							; UNIT GR
   649
   650 				; ------------------------------------------------------------
   651
   652 21D8			.local	SPRITES						; UNIT
   653
   654 21D8			.local	COPYSHIP					; PROCEDURE
   655
   656 				; optimize OK (SPRITES), line = 25
   657
   658 21D8 A5 03			lda BSHIPYCLEAR
   659 21DA 85 88			sta :edx
   660 21DC A9 14			lda #$14
   661 21DE 85 89			sta :edx+1
   662 21E0 A0 07			ldy #$07
   663 21E2 A9 00			lda #$00
   664 21E4 91 88 88 10 FB		sta:rpl (:edx),y-
   665
   666 				; optimize OK (SPRITES), line = 26
   667
   668 21E9 A5 03			lda BSHIPYCLEAR
   669 21EB 85 88			sta :edx
   670 21ED A9 15			lda #$15
   671 21EF 85 89			sta :edx+1
   672 21F1 A0 07			ldy #$07
   673 21F3 A9 00			lda #$00
   674 21F5 91 88 88 10 FB		sta:rpl (:edx),y-
   675
   676 				; optimize OK (SPRITES), line = 27
   677
   678 21FA A5 02			lda BSHIPY
   679 21FC 85 8C			sta :ecx
   680 21FE A9 14			lda #$14
   681 2200 85 8D			sta :ecx+1
   682 2202 A9 00			lda #$00
   683 2204 85 88			sta :edx
   684 2206 A9 10			lda #$10
   685 2208 85 89			sta :edx+1
   686 220A A9 08			lda #$08
   687 220C 85 84			sta :eax
   688 220E A9 00			lda #$00
   689 2210 85 85			sta :eax+1
   690 2212 20 2B 20			jsr @move
   691
   692 				; optimize OK (SPRITES), line = 28
   693
   694 2215 A5 02			lda BSHIPY
   695 2217 85 8C			sta :ecx
   696 2219 A9 15			lda #$15
   697 221B 85 8D			sta :ecx+1
   698 221D A9 08			lda #$08
   699 221F 85 88			sta :edx
   700 2221 A9 10			lda #$10
   701 2223 85 89			sta :edx+1
   702 2225 A9 08			lda #$08
   703 2227 85 84			sta :eax
   704 2229 A9 00			lda #$00
   705 222B 85 85			sta :eax+1
   706 222D 20 2B 20			jsr @move
   707 2230			@exit
   708 					.ifdef @new
   709 					lda <@VarData
   710 					sta :ztmp
   711 					lda >@VarData
   712 					ldy #@VarDataSize-1
   713 					jmp @FreeMem
   714 					els
   715 2230 60				rts						; ret
   716 					eif
   717 				.endl
   718
   719 2231			.local	INIT						; PROCEDURE
   720
   721 				; optimize OK (SPRITES), line = 33
   722
   723 2231				.LOCAL
   724 2231 A0 00			ldy #$00
   725 2233 98				tya
   726 2234 99 00 13 99 80 13 + fill	:10 sta $1300+#*$80,y
   727 2252 C8				iny
   728 2253 10 DF			bpl fill
   729 					.ENDL
   730
   731 				; optimize OK (SPRITES), line = 34
   732
   733 2255 A0 70			ldy #256-$90
   734 2257 A9 FF			lda #$FF
   735 2259 99 B0 12 C8 D0 FA		sta:rne $1320+$90-256,y+
   736
   737 				; optimize OK (SPRITES), line = 36
   738
   739 225F A9 10			lda #$10
   740 2261 8D 07 D4			sta GLOBALS.PMBASE
   741
   742 				; optimize OK (SPRITES), line = 37
   743
   744 2264 A9 0A			lda #$0A
   745 2266 8D 15 D0			sta GLOBALS.COLPM3
   746 2269 A9 0E			lda #$0E
   747 226B 8D 12 D0			sta GLOBALS.COLPM01
   748 226E 8D 13 D0			sta GLOBALS.COLPM01+1
   749
   750 				; optimize OK (SPRITES), line = 38
   751
   752 2271 A9 50			lda #$50
   753 2273 85 02			sta BSHIPY
   754 2275 85 03			sta BSHIPYCLEAR
   755
   756 				; optimize OK (SPRITES), line = 39
   757
   758 2277 A9 30			lda #$30
   759 2279 85 00			sta BHPOSP0
   760 227B A9 38			lda #$38
   761 227D 85 01			sta BHPOSP1
   762 227F A5 00			lda WSHIPX
   763 2281 8D 00 D0			sta GLOBALS.HPOSP01
   764 2284 A5 01			lda WSHIPX+1
   765 2286 8D 01 D0			sta GLOBALS.HPOSP01+1
   766
   767 				; optimize OK (SPRITES), line = 40
   768
   769 2289 A9 00			lda #$00
   770 228B 8D 08 D0			sta GLOBALS.SIZEP01
   771 228E 8D 09 D0			sta GLOBALS.SIZEP01+1
   772 2291 8D 0C D0			sta GLOBALS.SIZEM
   773 2294 8D 1B D0			sta GLOBALS.PRIOR
   774 2297 A9 03			lda #$03
   775 2299 8D 1D D0			sta GLOBALS.GRACTL
   776
   777 				; optimize FAIL ('COPYSHIP', SPRITES), line = 42
   778
   779 229C 20 D8 21			jsr COPYSHIP
   780 229F			@exit
   781 					.ifdef @new
   782 					lda <@VarData
   783 					sta :ztmp
   784 					lda >@VarData
   785 					ldy #@VarDataSize-1
   786 					jmp @FreeMem
   787 					els
   788 229F 60				rts						; ret
   789 					eif
   790 				.endl
   791
   792 				; ------------------------------------------------------------
   793 				; ------------------------------------------------------------
   794 22A0			@UnitInit
   795
   796 22A0 60				rts
   797
   798 				; ------------------------------------------------------------
   799
   800 = 0000			BHPOSP0	= $00
   801 = 0001			BHPOSP1	= $01
   802 = 0002			BSHIPY	= $02
   803 = 0003			BSHIPYCLEAR	= $03
   804 = 0000			WSHIPX	= $00
   805
   806 				.endl							; UNIT SPRITES
   807
   808 				; ------------------------------------------------------------
   809
   810 22A1			.local	JOY						; UNIT
   811
   812 22A1			.local	MOVESHIP					; PROCEDURE
   813
   814 				; optimize OK (JOY), line = 22
   815
   816 22A1 A9 0C			lda #$0C
   817 22A3 85 FF			sta GLOBALS.BTMP1
   818 22A5 A5 02			lda SPRITES.BSHIPY
   819 22A7 85 03			sta SPRITES.BSHIPYCLEAR
   820
   821 				; optimize OK (JOY), line = 23
   822
   823 22A9 A9 01			lda #$01
   824 22AB 85 FD			sta GLOBALS.B1I
   825
   826 22AD			l_0118
   827 				; --- ForToDoCondition
   828
   829 				; optimize OK (JOY), line = 24
   830
   831 22AD A5 07			lda JOYDIRECTION
   832 22AF 25 FF			and GLOBALS.BTMP1
   833 22B1 8D 23 25			sta @CASETMP_0003
   834 22B4 C9 04			cmp #$04
   835 22B6 D0 2A			jne l_0137
   836 22B8			@
   837
   838 				; optimize OK (JOY), line = 26
   839
   840 22B8 A5 01			lda SPRITES.BHPOSP1
   841 22BA C9 B0			cmp #$B0
   842 22BC B0 21			jcs l_0149
   843
   844 				; optimize OK (JOY), line = 27
   845
   846 22BE A5 00			lda SPRITES.WSHIPX
   847 22C0 18 69 02			add #$02
   848 22C3 85 00			sta SPRITES.WSHIPX
   849 22C5 A5 01			lda SPRITES.WSHIPX+1
   850 22C7 69 02			adc #$02
   851 22C9 85 01			sta SPRITES.WSHIPX+1
   852 22CB A5 00			lda SPRITES.WSHIPX
   853 22CD 8D 00 D0			sta GLOBALS.HPOSP01
   854 22D0 A5 01			lda SPRITES.WSHIPX+1
   855 22D2 8D 01 D0			sta GLOBALS.HPOSP01+1
   856
   857 				; optimize OK (JOY), line = 28
   858
   859 22D5 A5 14			lda GLOBALS.RTCLOK
   860 22D7 29 01			and #$01
   861 22D9 C9 01			cmp #$01
   862 22DB D0 02			jne l_0166
   863 22DD E6 04			inc BCANNONX
   864 22DF			l_0166
   865 22DF			l_0149
   866
   867 22DF 4C 4D 23			jmp a_0003
   868 22E2			l_0137
   869 22E2 C9 08			cmp #$08
   870 22E4 D0 2A			jne l_0178
   871 22E6			@
   872
   873 				; optimize OK (JOY), line = 32
   874
   875 22E6 A5 00			lda SPRITES.BHPOSP0
   876 22E8 C9 31			cmp #$31
   877 22EA 90 21			jcc l_018A
   878
   879 				; optimize OK (JOY), line = 33
   880
   881 22EC A5 00			lda SPRITES.WSHIPX
   882 22EE 38 E9 02			sub #$02
   883 22F1 85 00			sta SPRITES.WSHIPX
   884 22F3 A5 01			lda SPRITES.WSHIPX+1
   885 22F5 E9 02			sbc #$02
   886 22F7 85 01			sta SPRITES.WSHIPX+1
   887 22F9 A5 00			lda SPRITES.WSHIPX
   888 22FB 8D 00 D0			sta GLOBALS.HPOSP01
   889 22FE A5 01			lda SPRITES.WSHIPX+1
   890 2300 8D 01 D0			sta GLOBALS.HPOSP01+1
   891
   892 				; optimize OK (JOY), line = 34
   893
   894 2303 A5 14			lda GLOBALS.RTCLOK
   895 2305 29 01			and #$01
   896 2307 C9 01			cmp #$01
   897 2309 D0 02			jne l_01A7
   898 230B C6 04			dec BCANNONX
   899 230D			l_01A7
   900 230D			l_018A
   901
   902 230D 4C 4D 23			jmp a_0003
   903 2310			l_0178
   904 2310 C9 02			cmp #$02
   905 2312 D0 1C			jne l_01B9
   906 2314			@
   907
   908 				; optimize OK (JOY), line = 38
   909
   910 2314 A5 02			lda SPRITES.BSHIPY
   911 2316 C9 21			cmp #$21
   912 2318 90 13			jcc l_01CB
   913
   914 				; optimize OK (JOY), line = 39
   915
   916 231A 38 E9 04			sub #$04
   917 231D 85 02			sta SPRITES.BSHIPY
   918 231F A5 05			lda WCANNONY
   919 2321 38 E9 14			sub #$14
   920 2324 85 05			sta WCANNONY
   921 2326 B0 02			scs
   922 2328 C6 06			dec WCANNONY+1
   923
   924 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 40
   925
   926 232A 20 D8 21			jsr SPRITES.COPYSHIP
   927 232D			l_01CB
   928
   929 232D 4C 4D 23			jmp a_0003
   930 2330			l_01B9
   931 2330 C9 01			cmp #$01
   932 2332 D0 19			jne l_01DA
   933 2334			@
   934
   935 				; optimize OK (JOY), line = 44
   936
   937 2334 A5 02			lda SPRITES.BSHIPY
   938 2336 C9 A8			cmp #$A8
   939 2338 B0 13			jcs l_01EC
   940
   941 				; optimize OK (JOY), line = 45
   942
   943 233A 18 69 04			add #$04
   944 233D 85 02			sta SPRITES.BSHIPY
   945 233F A5 05			lda WCANNONY
   946 2341 18 69 14			add #$14
   947 2344 85 05			sta WCANNONY
   948 2346 90 02			scc
   949 2348 E6 06			inc WCANNONY+1
   950
   951 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 46
   952
   953 234A 20 D8 21			jsr SPRITES.COPYSHIP
   954 234D			l_01EC
   955
   956 234D			l_01DA
   957 234D			a_0003
   958
   959 				; optimize OK (JOY), line = 50
   960
   961 234D A9 03			lda #$03
   962 234F 85 FF			sta GLOBALS.BTMP1
   963
   964 				; --- ForToDoEpilog
   965 2351 C6 FD			dec GLOBALS.B1I
   966 2353 30 03 4C AD 22		jpl l_0118
   967 2358			l_0126
   968
   969 				; ------------------------------------------------------------
   970
   971 = 0000			@FORTMP_0115	= $00
   972 = 2523			@CASETMP_0003	= DATAORIGIN+$000F
   973
   974 = 2523			@VarData	= @CASETMP_0003
   975 = 0001			@VarDataSize	= 1
   976
   977 2358			@exit
   978 					.ifdef @new
   979 					lda <@VarData
   980 					sta :ztmp
   981 					lda >@VarData
   982 					ldy #@VarDataSize-1
   983 					jmp @FreeMem
   984 					els
   985 2358 60				rts						; ret
   986 					eif
   987 				.endl
   988
   989 				; ------------------------------------------------------------
   990 				; ------------------------------------------------------------
   991 2359			@UnitInit
   992
   993 2359 60				rts
   994
   995 				; ------------------------------------------------------------
   996
   997 = 0004			BCANNONX	= $04
   998 = 0005			WCANNONY	= $05
   999 = 0007			JOYDIRECTION	= $07
  1000
  1001 				.endl							; UNIT JOY
  1002
  1003 235A			.local	VBI						; PROCEDURE | INTERRUPT
  1004
  1005 				; ---------------------  ASM Block 055  ---------------------
  1006
  1007 235A 48 8A 48 98 48	 phr 
  1008
  1009 				; optimize OK (main.pas), line = 23
  1010
  1011 235F A5 14			lda GLOBALS.RTCLOK
  1012 2361 29 03			and #$03
  1013 2363 D0 24			jne l_021D
  1014
  1015 				; optimize OK (main.pas), line = 24
  1016
  1017 2365 AD 10 D0			lda GLOBALS.TRIG0
  1018 2368 D0 1F			jne l_0230
  1019 236A AD 04 11			lda GLOBALS.WDL2LMS
  1020 236D 18 65 04			add JOY.BCANNONX
  1021 2370 85 A1			sta :STACKORIGIN+9
  1022 2372 AD 05 11			lda GLOBALS.WDL2LMS+1
  1023 2375 69 00			adc #$00
  1024 2377 85 B1			sta :STACKORIGIN+STACKWIDTH+9
  1025 2379 A5 A1			lda :STACKORIGIN+9
  1026 237B 18 65 05			add JOY.WCANNONY
  1027 237E A8				tay
  1028 237F A5 B1			lda :STACKORIGIN+STACKWIDTH+9
  1029 2381 65 06			adc JOY.WCANNONY+1
  1030 2383 85 91			sta :bp+1
  1031 2385 A9 02			lda #$02
  1032 2387 91 90			sta (:bp),y
  1033 2389			l_0230
  1034 2389			l_021D
  1035
  1036 				; optimize OK (main.pas), line = 27
  1037
  1038 2389 AD 05 11			lda GLOBALS.WDL2LMS+1
  1039 238C C9 E0			cmp #$E0
  1040 238E 90 17			jcc l_0255
  1041 2390 D0 07			bne @+
  1042 2392 AD 04 11			lda GLOBALS.WDL2LMS
  1043 2395 C9 01			cmp #$01
  1044 2397 90 0E			jcc l_0255
  1045 2399			@
  1046 2399 AD 04 11 D0 03 CE + 	dew GLOBALS.WDL2LMS
  1047 23A4 4C B1 23			jmp l_0263
  1048 23A7			l_0255
  1049 23A7 A9 3F			lda #$3F
  1050 23A9 8D 04 11			sta GLOBALS.WDL2LMS
  1051 23AC A9 EC			lda #$EC
  1052 23AE 8D 05 11			sta GLOBALS.WDL2LMS+1
  1053 23B1			l_0263
  1054
  1055 				; optimize OK (main.pas), line = 29
  1056
  1057 23B1 AD 04 11			lda GLOBALS.WDL2LMS
  1058 23B4 85 FA			sta GLOBALS.WTMP1
  1059 23B6 AD 05 11			lda GLOBALS.WDL2LMS+1
  1060 23B9 85 FB			sta GLOBALS.WTMP1+1
  1061
  1062 				; ---------------------  ASM Block 056  ---------------------
  1063
  1064
  1065 23BB A2 15		        ldx #GAME_SCREEN_ROWS
  1066 23BD A0 00		        ldy #0
  1067 23BF 98			  clr:  tya
  1068 23C0 91 FA		        sta (GLOBALS.WTMP1),y
  1069 23C2 A5 FA		        lda GLOBALS.WTMP1
  1070 23C4 18 69 28		        add #40
  1071 23C7 85 FA		        sta GLOBALS.WTMP1
  1072 23C9 90 02		        bcc @+
  1073 23CB E6 FB		        inc GLOBALS.WTMP1+1
  1074 23CD CA			  @:    dex
  1075 23CE 10 EF		        bpl clr
  1076 				  
  1077
  1078 				; ---------------------  ASM Block 057  ---------------------
  1079
  1080 23D0 68 A8 68 AA 68	 plr 
  1081 23D5 40				rti						; ret
  1082 				.endl
  1083
  1084 23D6			.local	JOYHANDLER					; PROCEDURE | INTERRUPT
  1085
  1086 				; ---------------------  ASM Block 058  ---------------------
  1087
  1088 23D6 48 8A 48 98 48	 phr 
  1089
  1090 				; optimize OK (main.pas), line = 53
  1091
  1092 23DB A5 14			lda GLOBALS.RTCLOK
  1093 23DD 29 01			and #$01
  1094 23DF D0 11			jne l_0286
  1095
  1096 				; optimize OK (main.pas), line = 55
  1097
  1098 23E1 AD 00 D3			lda GLOBALS.PORTA
  1099 23E4 85 07			sta JOY.JOYDIRECTION
  1100
  1101 				; optimize OK (main.pas), line = 56
  1102
  1103 23E6 29 0F			and #$0F
  1104 23E8 C9 0F			cmp #$0F
  1105 23EA F0 03			jeq l_02A3
  1106 23EC 20 A1 22			jsr JOY.MOVESHIP
  1107 23EF			l_02A3
  1108 23EF 4C F5 23			jmp l_02B0
  1109 23F2			l_0286
  1110
  1111 				; optimize FAIL ('JOY.MOVESHIP', main.pas), line = 58
  1112
  1113 23F2 20 A1 22			jsr JOY.MOVESHIP
  1114 23F5			l_02B0
  1115
  1116 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 60
  1117
  1118 23F5 E8				inx
  1119 23F6 AD 26 25 95 98		mva PSTARS :STACKORIGIN,x
  1120 23FB AD 27 25 95 A8		mva PSTARS+1 :STACKORIGIN+STACKWIDTH,x
  1121 2400 20 98 21			jsr SYS.SETDLI
  1122
  1123 				; ---------------------  ASM Block 059  ---------------------
  1124
  1125 2403 68 A8 68 AA 68	 plr 
  1126 2408 40				rti						; ret
  1127 				.endl
  1128
  1129 2409			.local	STARS						; PROCEDURE | INTERRUPT
  1130
  1131 				; ---------------------  ASM Block 060  ---------------------
  1132
  1133 2409 48 8A 48 98 48	 phr 
  1134
  1135 				; optimize OK (main.pas), line = 69
  1136
  1137 240E A9 7C			lda #$7C
  1138 2410 85 FD			sta GLOBALS.B1I
  1139
  1140 2412			l_02C1
  1141 				; --- ForToDoCondition
  1142
  1143 				; ---------------------  ASM Block 061  ---------------------
  1144
  1145 2412 8D 0A D4		 sta WSYNC 
  1146
  1147 				; optimize OK (main.pas), line = 71
  1148
  1149 2415 A4 FD			ldy GLOBALS.B1I
  1150 2417 B9 00 12			lda adr.ASTARS,y
  1151 241A 8D 07 D0			sta GLOBALS.HPOSM3
  1152
  1153 				; optimize OK (main.pas), line = 72
  1154
  1155 241D B9 00 12			lda adr.ASTARS,y
  1156 2420 38 F9 7D 12			sub adr.ASPEED,y
  1157 2424 99 00 12			sta adr.ASTARS,y
  1158
  1159 				; optimize OK (main.pas), line = 73
  1160
  1161 2427 AD 0A D2			lda SYSTEM.RND
  1162 242A 8D 15 D0			sta GLOBALS.COLPM3
  1163
  1164 				; --- ForToDoEpilog
  1165 242D C6 FD			dec GLOBALS.B1I
  1166 242F 10 E1			jpl l_02C1
  1167 2431			l_02CF
  1168
  1169 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 76
  1170
  1171 2431 E8				inx
  1172 2432 AD 24 25 95 98		mva PJOY :STACKORIGIN,x
  1173 2437 AD 25 25 95 A8		mva PJOY+1 :STACKORIGIN+STACKWIDTH,x
  1174 243C 20 98 21			jsr SYS.SETDLI
  1175
  1176 				; ---------------------  ASM Block 062  ---------------------
  1177
  1178 243F 68 A8 68 AA 68	 plr 
  1179
  1180 				; ------------------------------------------------------------
  1181
  1182 = 0000			@FORTMP_02BE	= $00
  1183 2444 40				rti						; ret
  1184 				.endl
  1185
  1186 2445			.local	INIT						; PROCEDURE
  1187
  1188 				; optimize FAIL ('SYSTEM.PAUSE_0071', main.pas), line = 83
  1189
  1190 2445 20 67 21			jsr SYSTEM.PAUSE_0071
  1191 2448 A9 00			lda #$00
  1192 244A 8D 00 D4			sta GLOBALS.DMACTL
  1193 244D 20 B0 21			jsr SYS.SYSTEMOFF
  1194
  1195 				; optimize OK (main.pas), line = 85
  1196
  1197 2450 A9 18			lda #$18
  1198 2452 8D 09 D4			sta GLOBALS.CHBAS
  1199
  1200 				; optimize OK (main.pas), line = 87
  1201
  1202 2455 A9 3F			lda #$3F
  1203 2457 85 88			sta :edx
  1204 2459 A9 EC			lda #$EC
  1205 245B 85 89			sta :edx+1
  1206 245D A9 C0			lda #$C0
  1207 245F 85 8C			sta :ecx
  1208 2461 A9 03			lda #$03
  1209 2463 85 8D			sta :ecx+1
  1210 2465 A9 00			lda #$00
  1211 2467 85 84			sta :eax
  1212 2469 20 80 20			jsr @fill
  1213
  1214 				; optimize OK (main.pas), line = 89
  1215
  1216 246C A9 7C			lda #$7C
  1217 246E 85 FD			sta GLOBALS.B1I
  1218
  1219 2470			l_030A
  1220 				; --- ForToDoCondition
  1221
  1222 				; optimize OK (main.pas), line = 90
  1223
  1224 2470 A4 FD			ldy GLOBALS.B1I
  1225 2472 AD 0A D2			lda SYSTEM.RND
  1226 2475 99 00 12			sta adr.ASTARS,y
  1227
  1228 				; optimize OK (main.pas), line = 91
  1229
  1230 2478 29 03			and #$03
  1231 247A 18 69 01			add #$01
  1232 247D 99 7D 12			sta adr.ASPEED,y
  1233
  1234 				; --- ForToDoEpilog
  1235 2480 C6 FD			dec GLOBALS.B1I
  1236 2482 10 EC			jpl l_030A
  1237 2484			l_0318
  1238
  1239 				; optimize OK (main.pas), line = 94
  1240
  1241 2484 AD 02 D3			lda GLOBALS.PACTL
  1242 2487 09 04			ora #$04
  1243 2489 8D 02 D3			sta GLOBALS.PACTL
  1244 248C 20 31 22			jsr SPRITES.INIT
  1245 248F 20 CC 21			jsr GR.MODE2
  1246
  1247 				; optimize OK (main.pas), line = 95
  1248
  1249 2492 A9 00			lda #$00
  1250 2494 8D 1A D0			sta GLOBALS.COLBK
  1251 2497 8D 16 D0			sta GLOBALS.COLPF0
  1252 249A A9 0F			lda #$0F
  1253 249C 8D 17 D0			sta GLOBALS.COLPF1
  1254 249F A9 02			lda #$02
  1255 24A1 8D 18 D0			sta GLOBALS.COLPF2
  1256 24A4 A9 00			lda #$00
  1257 24A6 8D 19 D0			sta GLOBALS.COLPF3
  1258
  1259 				; optimize OK (main.pas), line = 96
  1260
  1261 24A9 A9 D6			lda <JOYHANDLER
  1262 24AB 8D 24 25			sta PJOY
  1263 24AE A9 23			lda >JOYHANDLER
  1264 24B0 8D 25 25			sta PJOY+1
  1265 24B3 A9 09			lda <STARS
  1266 24B5 8D 26 25			sta PSTARS
  1267 24B8 A9 24			lda >STARS
  1268 24BA 8D 27 25			sta PSTARS+1
  1269
  1270 				; optimize OK (main.pas), line = 98
  1271
  1272 24BD A9 03			lda #$03
  1273 24BF 85 04			sta JOY.BCANNONX
  1274 24C1 85 8C			sta :ecx
  1275 24C3 A5 02			lda SPRITES.BSHIPY
  1276 24C5 85 84			sta :eax
  1277 					.ifdef fmulinit
  1278 					fmulu_8
  1279 					els
  1280 24C7 20 C8 20			imulCL
  1281 					eif
  1282 24CA A5 84			lda :eax
  1283 24CC 85 05			sta JOY.WCANNONY
  1284 24CE A5 85			lda :eax+1
  1285 24D0 85 06			sta JOY.WCANNONY+1
  1286
  1287 				; optimize FAIL ('SYS.SETVBI', main.pas), line = 100
  1288
  1289 24D2 E8				inx
  1290 24D3 A9 5A 95 98			mva <VBI :STACKORIGIN,x
  1291 24D7 A9 23 95 A8			mva >VBI :STACKORIGIN+STACKWIDTH,x
  1292 24DB 20 80 21			jsr SYS.SETVBI
  1293
  1294 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 101
  1295
  1296 24DE E8				inx
  1297 24DF A9 D6 95 98			mva <JOYHANDLER :STACKORIGIN,x
  1298 24E3 A9 23 95 A8			mva >JOYHANDLER :STACKORIGIN+STACKWIDTH,x
  1299 24E7 20 98 21			jsr SYS.SETDLI
  1300
  1301 				; optimize FAIL ('SYSTEM.PAUSE_0071', main.pas), line = 103
  1302
  1303 24EA 20 67 21			jsr SYSTEM.PAUSE_0071
  1304 24ED A9 3E			lda #$3E
  1305 24EF 8D 00 D4			sta GLOBALS.DMACTL
  1306
  1307 				; ------------------------------------------------------------
  1308
  1309 = 0000			@FORTMP_0307	= $00
  1310 24F2			@exit
  1311 					.ifdef @new
  1312 					lda <@VarData
  1313 					sta :ztmp
  1314 					lda >@VarData
  1315 					ldy #@VarDataSize-1
  1316 					jmp @FreeMem
  1317 					els
  1318 24F2 60				rts						; ret
  1319 					eif
  1320 				.endl
  1321 24F3			l_0007
  1322
  1323 				; optimize FAIL ('INIT', main.pas), line = 107
  1324
  1325 24F3 20 45 24			jsr INIT
  1326
  1327 				; --- RepeatUntilProlog
  1328 24F6			l_0375
  1329
  1330 				; optimize OK (main.pas), line = 108
  1331
  1332 24F6 4C F6 24			jmp l_0375
  1333
  1334 				; ------------------------------------------------------------
  1335
  1336 = 1000			PM_ADR	= $1000
  1337 = 1300			M0_ADR	= $1300
  1338 = 1400			P0_ADR	= $1400
  1339 = 1500			P1_ADR	= $1500
  1340 = 1000			GFX_SHIP_ADR	= $1000
  1341 = 0008			GFX_SHIP_SEG	= $08
  1342 = 1800			GFX_FONTS_ADR	= $1800
  1343 = 1100			DL_2	= $1100
  1344 = EC3F			GAME_LMS	= $EC3F
  1345 = E000			GAME_LMS_END	= $E000
  1346 = 0015			GAME_SCREEN_ROWS	= $15
  1347 = 0E0E			SHIP_COL	= $0E0E
  1348 = 0030			SHIP_LEFT_LIMIT	= $30
  1349 = 00B0			SHIP_RIGHT_LIMIT	= $B0
  1350 = 0020			SHIP_TOP_LIMIT	= $20
  1351 = 00A8			SHIP_BOTTOM_LIMIT	= $A8
  1352 = 0202			SHIP_X_STEP	= $0202
  1353 = 0008			JOY_LEFT	= $08
  1354 = 0004			JOY_RIGHT	= $04
  1355 = 0002			JOY_UP	= $02
  1356 = 0001			JOY_DOWN	= $01
  1357 = 1200			adr.ASTARS	= $1200
  1358 24F9			.var ASTARS	= adr.ASTARS .word
  1359 = 127D			adr.ASPEED	= $127D
  1360 24F9			.var ASPEED	= adr.ASPEED .word
  1361 = 2524			PJOY	= DATAORIGIN+$0010
  1362 = 2526			PSTARS	= DATAORIGIN+$0012
  1363 24F9			@exit
  1364
  1365 24F9 A2 00		@halt	ldx #$00
  1366 24FB 9A				txs
  1367 					.ifdef MAIN.@DEFINES.ROMOFF
  1368 					inc portb
  1369 					.endif
  1370
  1371 24FC A0 01			ldy #$01
  1372
  1373 24FE 60				rts
  1374
  1375 				; ------------------------------------------------------------
  1376
  1377 24FF 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1378
  1379 				; ------------------------------------------------------------
  1380
  1381 250F			.local	@DEFINES
  1382 250F			ATARI
  1383 				.endl
  1384
  1385 250F			.local	@RESOURCE
  1386 				.endl
  1387
  1388 = 250F 00 12		ASTARS
  1388 = 2511 7D 12		ASPEED
  1388 				.endl							; MAIN
  1389
  1390 				; ------------------------------------------------------------
  1391 				; ------------------------------------------------------------
  1392
  1393 				.macro	UNITINITIALIZATION
  1394 				
  1395 					.ifdef MAIN.SYSTEM.@UnitInit
  1396 					jsr MAIN.SYSTEM.@UnitInit
  1397 					eif
  1398 				
  1399 					.ifdef MAIN.GLOBALS.@UnitInit
  1400 					jsr MAIN.GLOBALS.@UnitInit
  1401 					eif
  1402 				
  1403 					.ifdef MAIN.SYS.@UnitInit
  1404 					jsr MAIN.SYS.@UnitInit
  1405 					eif
  1406 				
  1407 					.ifdef MAIN.GR.@UnitInit
  1408 					jsr MAIN.GR.@UnitInit
  1409 					eif
  1410 				
  1411 					.ifdef MAIN.SPRITES.@UnitInit
  1412 					jsr MAIN.SPRITES.@UnitInit
  1413 					eif
  1414 				
  1415 					.ifdef MAIN.JOY.@UnitInit
  1416 					jsr MAIN.JOY.@UnitInit
  1417 					eif
  1418 				.endm
  1419
  1420 				; ------------------------------------------------------------
  1421
  1422 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1423 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1423 				SYSTEM: $2118..$2171
  1424 					eif
  1425
  1426 					ift .SIZEOF(MAIN.GLOBALS) > 0
  1427 					.print 'GLOBALS: ',MAIN.GLOBALS,'..',MAIN.GLOBALS+.SIZEOF(MAIN.GLOBALS)-1
  1428 					eif
  1429
  1430 					ift .SIZEOF(MAIN.SYS) > 0
  1431 					.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
  1431 				SYS: $2172..$21CB
  1432 					eif
  1433
  1434 					ift .SIZEOF(MAIN.GR) > 0
  1435 					.print 'GR: ',MAIN.GR,'..',MAIN.GR+.SIZEOF(MAIN.GR)-1
  1435 				GR: $21CC..$21D7
  1436 					eif
  1437
  1438 					ift .SIZEOF(MAIN.SPRITES) > 0
  1439 					.print 'SPRITES: ',MAIN.SPRITES,'..',MAIN.SPRITES+.SIZEOF(MAIN.SPRITES)-1
  1439 				SPRITES: $21D8..$22A0
  1440 					eif
  1441
  1442 					ift .SIZEOF(MAIN.JOY) > 0
  1443 					.print 'JOY: ',MAIN.JOY,'..',MAIN.JOY+.SIZEOF(MAIN.JOY)-1
  1443 				JOY: $22A1..$2359
  1444 					eif
  1445
  1446 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1446 				CODE: $2000..$250E
  1447
  1448 				; ------------------------------------------------------------
  1449
  1450 2513				.align $04
  1451
  1452 2514			DATAORIGIN
  1453 2514-2519> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  1454
  1455 = 0006			VARINITSIZE	= *-DATAORIGIN
  1456 = 0014			VARDATASIZE	= 20
  1457
  1458 = 2528			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1459
  1460 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1460 				DATA: $2514..$2528
  1461
  1462 02E0-02E1> DC 20			run START
  1463
  1464 				; ------------------------------------------------------------
  1465
  1466 				.macro	STATICDATA
  1467 				.endm
  1468
  1469 					end
