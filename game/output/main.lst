mads 2.1.1
  1133 					opt l+
    98 = 0000				?EXTDETECT = 0
    99 = 0000				?VBXDETECT = 0
   100
   101 2075				RCASM 'res/gr_dl.asm' GLOBALS.DL_2 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 001A			len = .sizeof(_GLOBALS.DL_2)
     6 				mcpy	ift main.GLOBALS.DL_2+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 11 +  MWA #MAIN.GLOBALS.DL_2 ECX
    13 2088 A9 1A 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: const.inc
     1 = 1000			PM_ADR              = $1000;                      // players & missiles memory (2K) start address
     2 = 1300			M0_ADR              = PM_ADR + $300;              // missile 0 start memory address
     3 = 1400			P0_ADR              = PM_ADR + $400;              // player 0 start memory address
     4 = 1500			P1_ADR              = PM_ADR + $500;              // player 1 start memory address
     5 = 1000			GFX_SHIP_ADR        = $1000;                      // ship gfx memory start address, ship size = 20 bytes, 16 bytes for gfx and 4 bytes fo top/bottom empty rows
     6 = 0008			GFX_SHIP_SEG        = 8;                          // ship gfx 10 byte segment, 10B for P0 & 10B for P1
     8 = 1800			GFX_FONTS_ADR       = $1800;
    10 = 1100			DL_2                = $1100;                      // display list memory start address for ANTIC mode 2
    11 = EC3F			GAME_LMS            = $efff - $3c0;               // Load Memory Scan address
    12 = E000			GAME_LMS_END        = $e000;
    13 = 0015			GAME_SCREEN_ROWS    = 21;
    15 = 0E0E			SHIP_COL            = $0e0e;
    16 = 0030			SHIP_LEFT_LIMIT     = 48;
    17 = 00B0			SHIP_RIGHT_LIMIT    = SHIP_LEFT_LIMIT + (16 * 8);
    18 = 0020			SHIP_TOP_LIMIT      = 32;
    19 = 00A8			SHIP_BOTTOM_LIMIT   = 8 * GAME_SCREEN_ROWS;
    20 = 0202			SHIP_X_STEP         = $0202;
    21 = 0004			SHIP_Y_STEP         = 4;
    23 = 0008			JOY_LEFT            = %1000;
    24 = 0004			JOY_RIGHT           = %0100;
    25 = 0002			JOY_UP              = %0010;
    26 = 0001			JOY_DOWN            = %0001;
     3 1100			dl2
     4 1100 F0 70 F0		    .byte $f0,$70,$f0
     5 1103 42 3F EC		    .byte $42,a(GAME_LMS)
     6 1106 02 02 02 02 02 02 + :17 .byte 2
     7 1117 41 00 11		    .byte $41,a(dl2)
    23 					.print '$R RCASM   ',main.GLOBALS.DL_2,'..',main.GLOBALS.DL_2+len-1," 'res/gr_dl.asm'"
    23 				$R RCASM   $1100..$1119 'res/gr_dl.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: main.a65
   102 20B0				RCDATA 'res/gfx_ship.bin' GLOBALS.GFX_SHIP_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0010			len = .filesize('res/gfx_ship.bin')
    28 20B0				org main.GLOBALS.GFX_SHIP_ADR
    30 1000-100F> 70 7B 1E 3F + 	ins 'res/gfx_ship.bin'
    32 					.print '$R RCDATA  ',main.GLOBALS.GFX_SHIP_ADR,'..',*-1," 'res/gfx_ship.bin'"
    32 				$R RCDATA  $1000..$100F 'res/gfx_ship.bin'
Source: main.a65
   103 1010				RCDATA 'res/charset.fnt' GLOBALS.GFX_FONTS_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0400			len = .filesize('res/charset.fnt')
    28 1010				org main.GLOBALS.GFX_FONTS_ADR
    30 1800-1BFF> 00 00 00 00 + 	ins 'res/charset.fnt'
    32 					.print '$R RCDATA  ',main.GLOBALS.GFX_FONTS_ADR,'..',*-1," 'res/charset.fnt'"
    32 				$R RCDATA  $1800..$1BFF 'res/charset.fnt'
Source: main.a65
   104 				.endl
   105
   106 				; ------------------------------------------------------------
   107
   108 1C00				org CODEORIGIN
   109
   110 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
Source: main.a65
   111
   112 				; ------------------------------------------------------------
   113
   114 2000			RTLIB
   115 2000				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
   148 					opt l+
   116
   117 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   117 				ZPAGE: $0080..$00D7
   118
   119 				.print 'RTLIB: ',RTLIB,'..',*-1
   119 				RTLIB: $2000..$205B
   120
   121 				; ------------------------------------------------------------
   122
   123 205C			START
   124 205C BA				tsx
   125 205D 8E 3C 24			stx MAIN.@halt+1
   126
   127 					.ifdef fmulinit
   128 					fmulinit
   129 					eif
   130
   131 = 000E			VLEN	= VARDATASIZE-VARINITSIZE
   132 = 245E			VADR	= DATAORIGIN+VARINITSIZE
   133
   134 					ift VADR > $BFFF
   135 					ert 'Invalid memory address range ',VADR
   136 					eli (VLEN>0) && (VLEN<=256)
   137 2060 A2 F2			ldx #256-VLEN
   138 2062 A9 00			lda #$00
   139 2064 9D 6C 23 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   140 					eli VLEN>0
   141 					@fill #VADR #VLEN #$00
   142 					eif
   143
   144 206A A9 6C 85 82 A9 24 + 	mwa #PROGRAMSTACK psptr
   145
   146 					.ifdef MAIN.@DEFINES.ROMOFF
   147 					icl 'atari\romoff.asm'
   148 					.endif
   149
   150 2072 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   151 2074 BD 40 03 9D 41 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   152
   153 207D E8				inx						; X = 0
   154 207E 86 90			stx bp						; BP = 0
   155
   156 2080 8E 08 D2			stx audctl					; reset POKEY
   157 2083 A9 03			lda #3
   158 2085 8D 0F D2			sta skctl
   159
   160 2088 CA				dex						; X = 255
   161
   162 2089				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
    11 2089 20 2C 21			jsr MAIN.SYS.@UnitInit
    15 208C 20 38 21			jsr MAIN.GR.@UnitInit
    19 208F 20 EE 21			jsr MAIN.SPRITES.@UnitInit
    23 2092 20 A0 22			jsr MAIN.JOY.@UnitInit
   163
   164 2095			.local	MAIN						; PROCEDURE
   165
   166 2095 4C 35 24			jmp l_0007
   167
   168 				; ------------------------------------------------------------
   169
   170 2098			.local	SYSTEM						; UNIT
   171
   172 2098			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   173
   174 				; ------------------------------------------------------------
   175
   176 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   177 				; as Pointer
   178 2098 B5 98			lda :STACKORIGIN,x
   179 209A 85 8C			sta VALUE
   180 209C CA				dex
   181
   182 				; ------------------------------------------------------------
   183
   184 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   185 				; as Pointer
   186 209D B5 98			lda :STACKORIGIN,x
   187 209F 85 88			sta A
   188 20A1 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   189 20A3 85 89			sta A+1
   190 20A5 CA				dex
   191
   192 				; ---------------------  ASM Block 021  ---------------------
   193
   194 20A6 A0 00			ldy #0
   195 20A8 A5 8C 91 88			mva value (edx),y
   196
   197
   198 				; ------------------------------------------------------------
   199
   200 = 0088			A	= edx
   201 = 008C			VALUE	= ecx
   202 20AC			@exit
   203 					.ifdef @new
   204 					lda <@VarData
   205 					sta :ztmp
   206 					lda >@VarData
   207 					ldy #@VarDataSize-1
   208 					jmp @FreeMem
   209 					els
   210 20AC 60				rts						; ret
   211 					eif
   212 				.endl
   213
   214 20AD			.local	FILLBYTE_0049					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   215
   216 				; ------------------------------------------------------------
   217
   218 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   219 				; as Pointer
   220 20AD B5 98			lda :STACKORIGIN,x
   221 20AF 85 84			sta VALUE
   222 20B1 CA				dex
   223
   224 				; ------------------------------------------------------------
   225
   226 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   227 				; as Pointer
   228 20B2 B5 98			lda :STACKORIGIN,x
   229 20B4 85 8C			sta COUNT
   230 20B6 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   231 20B8 85 8D			sta COUNT+1
   232 20BA CA				dex
   233
   234 				; ------------------------------------------------------------
   235
   236 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   237 				; as Pointer
   238 20BB B5 98			lda :STACKORIGIN,x
   239 20BD 85 88			sta A
   240 20BF B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   241 20C1 85 89			sta A+1
   242 20C3 CA				dex
   243
   244 				; ---------------------  ASM Block 029  ---------------------
   245
   246 20C4 20 00 20			jsr @fill
   247
   248
   249 				; ------------------------------------------------------------
   250
   251 = 0088			A	= edx
   252 = 008C			COUNT	= ecx
   253 = 0084			VALUE	= eax
   254 20C7			@exit
   255 					.ifdef @new
   256 					lda <@VarData
   257 					sta :ztmp
   258 					lda >@VarData
   259 					ldy #@VarDataSize-1
   260 					jmp @FreeMem
   261 					els
   262 20C7 60				rts						; ret
   263 					eif
   264 				.endl
   265
   266 20C8			.local	PAUSE_0067					; PROCEDURE | ASSEMBLER | OVERLOAD
   267
   268 				; ---------------------  ASM Block 039  ---------------------
   269
   270 20C8 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   271
   272 20CE			@exit
   273 					.ifdef @new
   274 					lda <@VarData
   275 					sta :ztmp
   276 					lda >@VarData
   277 					ldy #@VarDataSize-1
   278 					jmp @FreeMem
   279 					els
   280 20CE 60				rts						; ret
   281 					eif
   282 				.endl
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0101			__PORTB_BANKS	= $0101
   287 = 0648			M_PI_2	= $0648
   288 = 0192			D_PI_2	= $0192
   289 = 0004			D_PI_180	= $04
   290 = 0000			MGTIA	= $00
   291 = 0080			MVBXE	= $80
   292 = 0000			VBXE_XDLADR	= $00
   293 = 0100			VBXE_BCBADR	= $0100
   294 = 1000			VBXE_MAPADR	= $1000
   295 = 5000			VBXE_OVRADR	= $5000
   296 = B000			VBXE_WINDOW	= $B000
   297 = 0000			IDLI	= $00
   298 = 0001			IVBL	= $01
   299 = 00FE			CH_DELCHR	= $FE
   300 = 009B			CH_ENTER	= $9B
   301 = 001B			CH_ESC	= $1B
   302 = 001C			CH_CURS_UP	= $1C
   303 = 001D			CH_CURS_DOWN	= $1D
   304 = 001E			CH_CURS_LEFT	= $1E
   305 = 001F			CH_CURS_RIGHT	= $1F
   306 = 007F			CH_TAB	= $7F
   307 = 009B			CH_EOL	= $9B
   308 = 007D			CH_CLR	= $7D
   309 = 00FD			CH_BELL	= $FD
   310 = 007E			CH_DEL	= $7E
   311 = 009C			CH_DELLINE	= $9C
   312 = 009D			CH_INSLINE	= $9D
   313 = 0000			COLOR_BLACK	= $00
   314 = 000E			COLOR_WHITE	= $0E
   315 = 0032			COLOR_RED	= $32
   316 = 0096			COLOR_CYAN	= $96
   317 = 0068			COLOR_VIOLET	= $68
   318 = 00C4			COLOR_GREEN	= $C4
   319 = 0074			COLOR_BLUE	= $74
   320 = 00EE			COLOR_YELLOW	= $EE
   321 = 0028			COLOR_ORANGE	= $28
   322 = 00E4			COLOR_BROWN	= $E4
   323 = 003C			COLOR_LIGHTRED	= $3C
   324 = 0004			COLOR_GRAY1	= $04
   325 = 0006			COLOR_GRAY2	= $06
   326 = 000A			COLOR_GRAY3	= $0A
   327 = 00CC			COLOR_LIGHTGREEN	= $CC
   328 = 007C			COLOR_LIGHTBLUE	= $7C
   329 = 0004			FMOPENREAD	= $04
   330 = 0008			FMOPENWRITE	= $08
   331 = 0009			FMOPENAPPEND	= $09
   332 = 000C			FMOPENREADWRITE	= $0C
   333 = 2458			SCREENWIDTH	= DATAORIGIN+$0000
   334 = 245A			SCREENHEIGHT	= DATAORIGIN+$0002
   335 = 245C			DATESEPARATOR	= DATAORIGIN+$0004
   336 = D014			TVSYSTEM	= $D014
   337 = D20A			RND	= $D20A
   338 = 02C0			adr.PALETTE	= $02C0
   339 20CF			.var PALETTE	= adr.PALETTE .word
   340 = D012			adr.HPALETTE	= $D012
   341 20CF			.var HPALETTE	= adr.HPALETTE .word
   342 = 245D			FILEMODE	= DATAORIGIN+$0005
   343 = 245E			GRAPHMODE	= DATAORIGIN+$0006
   344 = 245F			IORESULT	= DATAORIGIN+$0007
   345 = 2460			EOLN	= DATAORIGIN+$0008
   346 = 2461			RNDSEED	= DATAORIGIN+$0009
   347
   348 = 20CF C0 02		PALETTE
   348 = 20D1 12 D0		HPALETTE
   348 				.endl							; UNIT SYSTEM
   349
   350 				; ------------------------------------------------------------
   351
   352 20D3			.local	GLOBALS						; UNIT
   353
   354 				; ------------------------------------------------------------
   355
   356 = 1000			PM_ADR	= $1000
   357 = 1300			M0_ADR	= $1300
   358 = 1400			P0_ADR	= $1400
   359 = 1500			P1_ADR	= $1500
   360 = 1000			GFX_SHIP_ADR	= $1000
   361 = 0008			GFX_SHIP_SEG	= $08
   362 = 1800			GFX_FONTS_ADR	= $1800
   363 = 1100			DL_2	= $1100
   364 = EC3F			GAME_LMS	= $EC3F
   365 = E000			GAME_LMS_END	= $E000
   366 = 0015			GAME_SCREEN_ROWS	= $15
   367 = 0E0E			SHIP_COL	= $0E0E
   368 = 0030			SHIP_LEFT_LIMIT	= $30
   369 = 00B0			SHIP_RIGHT_LIMIT	= $B0
   370 = 0020			SHIP_TOP_LIMIT	= $20
   371 = 00A8			SHIP_BOTTOM_LIMIT	= $A8
   372 = 0202			SHIP_X_STEP	= $0202
   373 = 0004			SHIP_Y_STEP	= $04
   374 = 0008			JOY_LEFT	= $08
   375 = 0004			JOY_RIGHT	= $04
   376 = 0002			JOY_UP	= $02
   377 = 0001			JOY_DOWN	= $01
   378 = 0014			RTCLOK	= $14
   379 = D000			HPOSP0	= $D000
   380 = D001			HPOSP1	= $D001
   381 = D004			HPOSM0	= $D004
   382 = D005			HPOSM1	= $D005
   383 = D006			HPOSM2	= $D006
   384 = D007			HPOSM3	= $D007
   385 = D008			SIZEP0	= $D008
   386 = D009			SIZEP1	= $D009
   387 = D00A			SIZEP2	= $D00A
   388 = D00B			SIZEP3	= $D00B
   389 = D00C			SIZEM	= $D00C
   390 = D010			GRAFP3	= $D010
   391 = D010			TRIG0	= $D010
   392 = D011			GRAFM	= $D011
   393 = D012			COLPM0	= $D012
   394 = D013			COLPM1	= $D013
   395 = D014			COLPM2	= $D014
   396 = D015			COLPM3	= $D015
   397 = D016			COLPF0	= $D016
   398 = D017			COLPF1	= $D017
   399 = D018			COLPF2	= $D018
   400 = D019			COLPF3	= $D019
   401 = D01A			COLBK	= $D01A
   402 = D01B			PRIOR	= $D01B
   403 = D01D			GRACTL	= $D01D
   404 = D20A			RND	= $D20A
   405 = D300			PORTA	= $D300
   406 = D301			PORTB	= $D301
   407 = D302			PACTL	= $D302
   408 = D400			DMACTL	= $D400
   409 = D402			DLIST	= $D402
   410 = D407			PMBASE	= $D407
   411 = D409			CHBAS	= $D409
   412 = D40A			WSYNC	= $D40A
   413 = D40B			VCOUNT	= $D40B
   414 = D40E			NMIEN	= $D40E
   415 = FFFA			NMIVEC	= $FFFA
   416 = D000			HPOSP01	= $D000
   417 = D008			SIZEP01	= $D008
   418 = D012			COLPM01	= $D012
   419 = 1104			WDL2LMS	= $1104
   420 = 00FF			BTMP1	= $FF
   421 = 00FE			BTMP2	= $FE
   422 = 00FD			B1I	= $FD
   423 = 00FC			B2I	= $FC
   424 = 00FA			WTMP1	= $FA
   425 = 00F8			WTMP2	= $F8
   426 = 00F6			WTMP3	= $F6
   427 = 00F4			WTMP4	= $F4
   428 = 00F3			ODDCOUNTER	= $F3
   429
   430 				.endl							; UNIT GLOBALS
   431
   432 				; ------------------------------------------------------------
   433
   434 20D3			.local	SYS						; UNIT
   435
   436 20D3			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
   437
   438 				; ---------------------  ASM Block 049  ---------------------
   439
   440
   441 				      bit NMIST \ bpl vbi     ; check kind of interrupt
   441 20D3 2C 0F D4		      BIT NMIST 
   441 20D6 10 03		 BPL VBI     
   442 = 20D8			.def  :__dlijmp
   443 20D8 4C E0 20		      jmp __off               ; VDSLST
   444 20DB E6 14		vbi:  inc RTCLOK+2
   445 = 20DD			.def  :__vbijmp
   446 20DD 4C E0 20		      jmp __off               ; VBIVEC
   447 = 20E0			.def  :__off
   448
   449 20E0 40				rti						; ret
   450 				.endl
   451
   452 20E1			.local	SETVBI						; PROCEDURE | ASSEMBLER
   453
   454 				; ------------------------------------------------------------
   455
   456 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   457 				; as Pointer
   458 20E1 B5 98			lda :STACKORIGIN,x
   459 20E3 8D 63 24			sta A
   460 20E6 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   461 20E8 8D 64 24			sta A+1
   462 20EB CA				dex
   463
   464 				; ---------------------  ASM Block 050  ---------------------
   465
   466
   467 20EC AD 63 24 8D DE 20 +   mwa a __vbijmp+1
   468
   469
   470 				; ------------------------------------------------------------
   471
   472 = 2463			A	= DATAORIGIN+$000B
   473
   474 = 2463			@VarData	= A
   475 = 0002			@VarDataSize	= 2
   476
   477 20F8			@exit
   478 					.ifdef @new
   479 					lda <@VarData
   480 					sta :ztmp
   481 					lda >@VarData
   482 					ldy #@VarDataSize-1
   483 					jmp @FreeMem
   484 					els
   485 20F8 60				rts						; ret
   486 					eif
   487 				.endl
   488
   489 20F9			.local	SETDLI						; PROCEDURE | ASSEMBLER
   490
   491 				; ------------------------------------------------------------
   492
   493 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   494 				; as Pointer
   495 20F9 B5 98			lda :STACKORIGIN,x
   496 20FB 8D 65 24			sta A
   497 20FE B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   498 2100 8D 66 24			sta A+1
   499 2103 CA				dex
   500
   501 				; ---------------------  ASM Block 051  ---------------------
   502
   503
   504 2104 AD 65 24 8D D9 20 +   mwa a __dlijmp+1
   505
   506
   507 				; ------------------------------------------------------------
   508
   509 = 2465			A	= DATAORIGIN+$000D
   510
   511 = 2465			@VarData	= A
   512 = 0002			@VarDataSize	= 2
   513
   514 2110			@exit
   515 					.ifdef @new
   516 					lda <@VarData
   517 					sta :ztmp
   518 					lda >@VarData
   519 					ldy #@VarDataSize-1
   520 					jmp @FreeMem
   521 					els
   522 2110 60				rts						; ret
   523 					eif
   524 				.endl
   525
   526 2111			.local	SYSTEMOFF					; PROCEDURE
   527
   528 				; ---------------------  ASM Block 054  ---------------------
   529
   530 2111 78			 sei 
   531
   532 				; optimize OK (SYS), line = 63
   533
   534 2112 A9 00			lda #$00
   535 2114 8D 0E D4			sta GLOBALS.NMIEN
   536 2117 A9 FE			lda #$FE
   537 2119 8D 01 D3			sta GLOBALS.PORTB
   538 211C A9 D3			lda <NMI
   539 211E 8D FA FF			sta GLOBALS.NMIVEC
   540 2121 A9 20			lda >NMI
   541 2123 8D FB FF			sta GLOBALS.NMIVEC+1
   542 2126 A9 C0			lda #$C0
   543 2128 8D 0E D4			sta GLOBALS.NMIEN
   544 212B			@exit
   545 					.ifdef @new
   546 					lda <@VarData
   547 					sta :ztmp
   548 					lda >@VarData
   549 					ldy #@VarDataSize-1
   550 					jmp @FreeMem
   551 					els
   552 212B 60				rts						; ret
   553 					eif
   554 				.endl
   555
   556 				; ------------------------------------------------------------
   557 				; ------------------------------------------------------------
   558 212C			@UnitInit
   559
   560 212C 60				rts
   561
   562 				; ------------------------------------------------------------
   563
   564 				.endl							; UNIT SYS
   565
   566 				; ------------------------------------------------------------
   567
   568 212D			.local	GR						; UNIT
   569
   570 212D			.local	MODE2						; PROCEDURE
   571
   572 				; optimize OK (GR), line = 17
   573
   574 212D A9 00			lda #$00
   575 212F 8D 02 D4			sta GLOBALS.DLIST
   576 2132 A9 11			lda #$11
   577 2134 8D 03 D4			sta GLOBALS.DLIST+1
   578 2137			@exit
   579 					.ifdef @new
   580 					lda <@VarData
   581 					sta :ztmp
   582 					lda >@VarData
   583 					ldy #@VarDataSize-1
   584 					jmp @FreeMem
   585 					els
   586 2137 60				rts						; ret
   587 					eif
   588 				.endl
   589
   590 				; ------------------------------------------------------------
   591 				; ------------------------------------------------------------
   592 2138			@UnitInit
   593
   594 2138 60				rts
   595
   596 				; ------------------------------------------------------------
   597
   598 				.endl							; UNIT GR
   599
   600 				; ------------------------------------------------------------
   601
   602 2139			.local	SPRITES						; UNIT
   603
   604 2139			.local	COPYSHIP					; PROCEDURE | ASSEMBLER
   605
   606 				; ---------------------  ASM Block 055  ---------------------
   607
   608
   609 2139 48 8A 48 98 48	        phr
   610
   611 213E A2 14		        ldx #>P0_ADR
   612 2140 86 FB		        stx GLOBALS.WTMP1+1
   613 2142 E8			        inx
   614 2143 86 F9		        stx GLOBALS.WTMP2+1
   615
   616 2145 A6 02		        ldx BSHIPY
   617 2147 86 FA		        stx GLOBALS.WTMP1
   618 2149 86 F8		        stx GLOBALS.WTMP2
   619
   620 				        ;move
   621 214B A0 07		        ldy #GFX_SHIP_SEG-1
   622 214D B9 00 10 91 FA	@:      mva GFX_SHIP_ADR,y (GLOBALS.WTMP1),y
   623 2152 B9 08 10 91 F8	        mva GFX_SHIP_ADR+GFX_SHIP_SEG,y (GLOBALS.WTMP2),y
   624 2157 88			        dey
   625 2158 10 F3		        bpl @-
   626
   627 				        ;clear
   628 215A A5 06		        lda JOY.JOYDIRECTION
   629 215C 29 03		        and #%0011
   630 215E C9 01		        cmp #JOY_DOWN
   631 2160 F0 06		        beq @+
   632 2162 8A			        txa
   633 2163 18 69 08		        add #SHIP_Y_STEP*2
   634 2166 D0 04		        bne @+1
   635 2168 8A			@:      txa
   636 2169 38 E9 04		        sub #SHIP_Y_STEP
   637 216C 85 FA		@:      sta GLOBALS.WTMP1
   638 216E 85 F8		        sta GLOBALS.WTMP2
   639
   640 2170 A9 00		        lda #0
   641 2172 A0 03		        ldy #GFX_SHIP_SEG-SHIP_Y_STEP-1
   642 2174 91 FA		@:      sta (GLOBALS.WTMP1),y
   643 2176 91 F8		        sta (GLOBALS.WTMP2),y
   644 2178 88			        dey
   645 2179 10 F9		        bpl @-
   646
   647 217B 68 A8 68 AA 68	        plr
   648
   649 2180			@exit
   650 					.ifdef @new
   651 					lda <@VarData
   652 					sta :ztmp
   653 					lda >@VarData
   654 					ldy #@VarDataSize-1
   655 					jmp @FreeMem
   656 					els
   657 2180 60				rts						; ret
   658 					eif
   659 				.endl
   660
   661 2181			.local	INIT						; PROCEDURE
   662
   663 				; optimize OK (SPRITES), line = 72
   664
   665 2181				.LOCAL
   666 2181 A0 00			ldy #$00
   667 2183 98				tya
   668 2184 99 00 13 99 80 13 + fill	:10 sta $1300+#*$80,y
   669 21A2 C8				iny
   670 21A3 10 DF			bpl fill
   671 					.ENDL
   672
   673 				; optimize OK (SPRITES), line = 73
   674
   675 21A5 A0 70			ldy #256-$90
   676 21A7 A9 FF			lda #$FF
   677 21A9 99 B0 12 C8 D0 FA		sta:rne $1320+$90-256,y+
   678
   679 				; optimize OK (SPRITES), line = 75
   680
   681 21AF A9 10			lda #$10
   682 21B1 8D 07 D4			sta GLOBALS.PMBASE
   683
   684 				; optimize OK (SPRITES), line = 76
   685
   686 21B4 A9 0A			lda #$0A
   687 21B6 8D 15 D0			sta GLOBALS.COLPM3
   688 21B9 A9 0E			lda #$0E
   689 21BB 8D 12 D0			sta GLOBALS.COLPM01
   690 21BE 8D 13 D0			sta GLOBALS.COLPM01+1
   691
   692 				; optimize OK (SPRITES), line = 77
   693
   694 21C1 A9 30			lda #$30
   695 21C3 85 00			sta BHPOSP0
   696 21C5 A9 38			lda #$38
   697 21C7 85 01			sta BHPOSP1
   698 21C9 A5 00			lda WSHIPX
   699 21CB 8D 00 D0			sta GLOBALS.HPOSP01
   700 21CE A5 01			lda WSHIPX+1
   701 21D0 8D 01 D0			sta GLOBALS.HPOSP01+1
   702
   703 				; optimize OK (SPRITES), line = 78
   704
   705 21D3 A9 50			lda #$50
   706 21D5 85 02			sta BSHIPY
   707 21D7 A9 00			lda #$00
   708 21D9 8D 08 D0			sta GLOBALS.SIZEP01
   709 21DC 8D 09 D0			sta GLOBALS.SIZEP01+1
   710 21DF 8D 0C D0			sta GLOBALS.SIZEM
   711 21E2 8D 1B D0			sta GLOBALS.PRIOR
   712 21E5 A9 03			lda #$03
   713 21E7 8D 1D D0			sta GLOBALS.GRACTL
   714
   715 				; optimize FAIL ('COPYSHIP', SPRITES), line = 80
   716
   717 21EA 20 39 21			jsr COPYSHIP
   718 21ED			@exit
   719 					.ifdef @new
   720 					lda <@VarData
   721 					sta :ztmp
   722 					lda >@VarData
   723 					ldy #@VarDataSize-1
   724 					jmp @FreeMem
   725 					els
   726 21ED 60				rts						; ret
   727 					eif
   728 				.endl
   729
   730 				; ------------------------------------------------------------
   731 				; ------------------------------------------------------------
   732 21EE			@UnitInit
   733
   734 21EE 60				rts
   735
   736 				; ------------------------------------------------------------
   737
   738 = 0000			BHPOSP0	= $00
   739 = 0001			BHPOSP1	= $01
   740 = 0002			BSHIPY	= $02
   741 = 0003			BCANNONX	= $03
   742 = 0000			WSHIPX	= $00
   743 = 0004			WCANNONY	= $04
   744
   745 				.endl							; UNIT SPRITES
   746
   747 				; ------------------------------------------------------------
   748
   749 21EF			.local	JOY						; UNIT
   750
   751 21EF			.local	MOVESHIP					; PROCEDURE
   752
   753 				; ---------------------  ASM Block 056  ---------------------
   754
   755 21EF 8D 0A D4		 sta WSYNC 
   756
   757 				; optimize OK (JOY), line = 20
   758
   759 21F2 A9 0F			lda #$0F
   760 21F4 8D 1A D0			sta GLOBALS.COLBK
   761
   762 				; optimize OK (JOY), line = 21
   763
   764 21F7 A9 0C			lda #$0C
   765 21F9 85 FF			sta GLOBALS.BTMP1
   766
   767 				; optimize OK (JOY), line = 22
   768
   769 21FB A9 01			lda #$01
   770 21FD 85 FD			sta GLOBALS.B1I
   771
   772 21FF			l_00DB
   773 				; --- ForToDoCondition
   774
   775 				; optimize OK (JOY), line = 23
   776
   777 21FF A5 06			lda JOYDIRECTION
   778 2201 25 FF			and GLOBALS.BTMP1
   779 2203 8D 67 24			sta @CASETMP_0003
   780 2206 C9 04			cmp #$04
   781 2208 D0 22			jne l_00FA
   782 220A			@
   783
   784 				; optimize OK (JOY), line = 25
   785
   786 220A A5 01			lda SPRITES.BHPOSP1
   787 220C C9 B0			cmp #$B0
   788 220E B0 19			jcs l_010C
   789
   790 				; optimize OK (JOY), line = 26
   791
   792 2210 A5 00			lda SPRITES.WSHIPX
   793 2212 18 69 02			add #$02
   794 2215 85 00			sta SPRITES.WSHIPX
   795 2217 A5 01			lda SPRITES.WSHIPX+1
   796 2219 69 02			adc #$02
   797 221B 85 01			sta SPRITES.WSHIPX+1
   798 221D E6 03			inc SPRITES.BCANNONX
   799
   800 				; optimize OK (JOY), line = 27
   801
   802 221F A5 00			lda SPRITES.WSHIPX
   803 2221 8D 00 D0			sta GLOBALS.HPOSP01
   804 2224 A5 01			lda SPRITES.WSHIPX+1
   805 2226 8D 01 D0			sta GLOBALS.HPOSP01+1
   806 2229			l_010C
   807
   808 2229 4C 8F 22			jmp a_0003
   809 222C			l_00FA
   810 222C C9 08			cmp #$08
   811 222E D0 22			jne l_0122
   812 2230			@
   813
   814 				; optimize OK (JOY), line = 31
   815
   816 2230 A5 00			lda SPRITES.BHPOSP0
   817 2232 C9 31			cmp #$31
   818 2234 90 19			jcc l_0134
   819
   820 				; optimize OK (JOY), line = 32
   821
   822 2236 A5 00			lda SPRITES.WSHIPX
   823 2238 38 E9 02			sub #$02
   824 223B 85 00			sta SPRITES.WSHIPX
   825 223D A5 01			lda SPRITES.WSHIPX+1
   826 223F E9 02			sbc #$02
   827 2241 85 01			sta SPRITES.WSHIPX+1
   828 2243 C6 03			dec SPRITES.BCANNONX
   829
   830 				; optimize OK (JOY), line = 33
   831
   832 2245 A5 00			lda SPRITES.WSHIPX
   833 2247 8D 00 D0			sta GLOBALS.HPOSP01
   834 224A A5 01			lda SPRITES.WSHIPX+1
   835 224C 8D 01 D0			sta GLOBALS.HPOSP01+1
   836 224F			l_0134
   837
   838 224F 4C 8F 22			jmp a_0003
   839 2252			l_0122
   840 2252 C9 02			cmp #$02
   841 2254 D0 1C			jne l_014A
   842 2256			@
   843
   844 				; optimize OK (JOY), line = 37
   845
   846 2256 A5 02			lda SPRITES.BSHIPY
   847 2258 C9 21			cmp #$21
   848 225A 90 13			jcc l_015C
   849
   850 				; optimize OK (JOY), line = 38
   851
   852 225C 38 E9 04			sub #$04
   853 225F 85 02			sta SPRITES.BSHIPY
   854 2261 A5 04			lda SPRITES.WCANNONY
   855 2263 38 E9 14			sub #$14
   856 2266 85 04			sta SPRITES.WCANNONY
   857 2268 B0 02			scs
   858 226A C6 05			dec SPRITES.WCANNONY+1
   859
   860 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 39
   861
   862 226C 20 39 21			jsr SPRITES.COPYSHIP
   863 226F			l_015C
   864
   865 226F 4C 8F 22			jmp a_0003
   866 2272			l_014A
   867 2272 C9 01			cmp #$01
   868 2274 D0 19			jne l_016B
   869 2276			@
   870
   871 				; optimize OK (JOY), line = 43
   872
   873 2276 A5 02			lda SPRITES.BSHIPY
   874 2278 C9 A8			cmp #$A8
   875 227A B0 13			jcs l_017D
   876
   877 				; optimize OK (JOY), line = 44
   878
   879 227C 18 69 04			add #$04
   880 227F 85 02			sta SPRITES.BSHIPY
   881 2281 A5 04			lda SPRITES.WCANNONY
   882 2283 18 69 14			add #$14
   883 2286 85 04			sta SPRITES.WCANNONY
   884 2288 90 02			scc
   885 228A E6 05			inc SPRITES.WCANNONY+1
   886
   887 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 45
   888
   889 228C 20 39 21			jsr SPRITES.COPYSHIP
   890 228F			l_017D
   891
   892 228F			l_016B
   893 228F			a_0003
   894
   895 				; optimize OK (JOY), line = 49
   896
   897 228F A9 03			lda #$03
   898 2291 85 FF			sta GLOBALS.BTMP1
   899
   900 				; --- ForToDoEpilog
   901 2293 C6 FD			dec GLOBALS.B1I
   902 2295 30 03 4C FF 21		jpl l_00DB
   903 229A			l_00E9
   904
   905 				; optimize OK (JOY), line = 51
   906
   907 229A A9 00			lda #$00
   908 229C 8D 1A D0			sta GLOBALS.COLBK
   909
   910 				; ------------------------------------------------------------
   911
   912 = 0000			@FORTMP_00D8	= $00
   913 = 2467			@CASETMP_0003	= DATAORIGIN+$000F
   914
   915 = 2467			@VarData	= @CASETMP_0003
   916 = 0001			@VarDataSize	= 1
   917
   918 229F			@exit
   919 					.ifdef @new
   920 					lda <@VarData
   921 					sta :ztmp
   922 					lda >@VarData
   923 					ldy #@VarDataSize-1
   924 					jmp @FreeMem
   925 					els
   926 229F 60				rts						; ret
   927 					eif
   928 				.endl
   929
   930 				; ------------------------------------------------------------
   931 				; ------------------------------------------------------------
   932 22A0			@UnitInit
   933
   934 22A0 60				rts
   935
   936 				; ------------------------------------------------------------
   937
   938 = 0006			JOYDIRECTION	= $06
   939
   940 				.endl							; UNIT JOY
   941
   942 22A1			.local	VBI						; PROCEDURE | INTERRUPT
   943
   944 				; ---------------------  ASM Block 057  ---------------------
   945
   946 22A1 48 8A 48 98 48	 phr 
   947
   948 				; optimize OK (main.pas), line = 22
   949
   950 22A6 A5 14			lda GLOBALS.RTCLOK
   951 22A8 29 01			and #$01
   952 22AA 85 F3			sta GLOBALS.ODDCOUNTER
   953
   954 				; optimize OK (main.pas), line = 26
   955
   956 22AC A5 14			lda GLOBALS.RTCLOK
   957 22AE 29 03			and #$03
   958 22B0 D0 25			jne l_01BC
   959
   960 				; optimize OK (main.pas), line = 27
   961
   962 22B2 AD 10 D0			lda GLOBALS.TRIG0
   963 22B5 D0 20			jne l_01CF
   964 22B7 A5 03			lda SPRITES.BCANNONX
   965 22B9 4A				lsr @
   966 22BA 18 6D 04 11			add GLOBALS.WDL2LMS
   967 22BE 85 A1			sta :STACKORIGIN+9
   968 22C0 AD 05 11			lda GLOBALS.WDL2LMS+1
   969 22C3 69 00			adc #$00
   970 22C5 85 B1			sta :STACKORIGIN+STACKWIDTH+9
   971 22C7 A5 A1			lda :STACKORIGIN+9
   972 22C9 18 65 04			add SPRITES.WCANNONY
   973 22CC A8				tay
   974 22CD A5 B1			lda :STACKORIGIN+STACKWIDTH+9
   975 22CF 65 05			adc SPRITES.WCANNONY+1
   976 22D1 85 91			sta :bp+1
   977 22D3 A9 02			lda #$02
   978 22D5 91 90			sta (:bp),y
   979 22D7			l_01CF
   980 22D7			l_01BC
   981
   982 				; optimize OK (main.pas), line = 30
   983
   984 22D7 AD 05 11			lda GLOBALS.WDL2LMS+1
   985 22DA C9 E0			cmp #$E0
   986 22DC 90 17			jcc l_01F8
   987 22DE D0 07			bne @+
   988 22E0 AD 04 11			lda GLOBALS.WDL2LMS
   989 22E3 C9 01			cmp #$01
   990 22E5 90 0E			jcc l_01F8
   991 22E7			@
   992 22E7 AD 04 11 D0 03 CE + 	dew GLOBALS.WDL2LMS
   993 22F2 4C FF 22			jmp l_0206
   994 22F5			l_01F8
   995 22F5 A9 3F			lda #$3F
   996 22F7 8D 04 11			sta GLOBALS.WDL2LMS
   997 22FA A9 EC			lda #$EC
   998 22FC 8D 05 11			sta GLOBALS.WDL2LMS+1
   999 22FF			l_0206
  1000
  1001 				; optimize OK (main.pas), line = 32
  1002
  1003 22FF AD 04 11			lda GLOBALS.WDL2LMS
  1004 2302 85 FA			sta GLOBALS.WTMP1
  1005 2304 AD 05 11			lda GLOBALS.WDL2LMS+1
  1006 2307 85 FB			sta GLOBALS.WTMP1+1
  1007
  1008 				; ---------------------  ASM Block 058  ---------------------
  1009
  1010
  1011 2309 A2 15		        ldx #GAME_SCREEN_ROWS
  1012 230B A0 00		        ldy #0
  1013 230D 98			  clr:  tya
  1014 230E 91 FA		        sta (GLOBALS.WTMP1),y
  1015 2310 A5 FA		        lda GLOBALS.WTMP1
  1016 2312 18 69 28		        add #40
  1017 2315 85 FA		        sta GLOBALS.WTMP1
  1018 2317 90 02		        bcc @+
  1019 2319 E6 FB		        inc GLOBALS.WTMP1+1
  1020 231B CA			  @:    dex
  1021 231C 10 EF		        bpl clr
  1022 				  
  1023
  1024 				; ---------------------  ASM Block 059  ---------------------
  1025
  1026 231E 68 A8 68 AA 68	 plr 
  1027 2323 40				rti						; ret
  1028 				.endl
  1029
  1030 2324			.local	JOYHANDLER					; PROCEDURE | INTERRUPT
  1031
  1032 				; ---------------------  ASM Block 060  ---------------------
  1033
  1034 2324 48 8A 48 98 48	 phr 
  1035
  1036 				; optimize OK (main.pas), line = 56
  1037
  1038 2329 A5 F3			lda GLOBALS.ODDCOUNTER
  1039 232B D0 05			jne l_0222
  1040 232D AD 00 D3			lda GLOBALS.PORTA
  1041 2330 85 06			sta JOY.JOYDIRECTION
  1042 2332			l_0222
  1043 2332 20 EF 21			jsr JOY.MOVESHIP
  1044
  1045 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 58
  1046
  1047 2335 E8				inx
  1048 2336 AD 6A 24 95 98		mva PSTARS :STACKORIGIN,x
  1049 233B AD 6B 24 95 A8		mva PSTARS+1 :STACKORIGIN+STACKWIDTH,x
  1050 2340 20 F9 20			jsr SYS.SETDLI
  1051
  1052 				; ---------------------  ASM Block 061  ---------------------
  1053
  1054 2343 68 A8 68 AA 68	 plr 
  1055 2348 40				rti						; ret
  1056 				.endl
  1057
  1058 2349			.local	STARS						; PROCEDURE | INTERRUPT
  1059
  1060 				; ---------------------  ASM Block 062  ---------------------
  1061
  1062 2349 48 8A 48 98 48	 phr 
  1063
  1064 				; optimize OK (main.pas), line = 67
  1065
  1066 234E A9 7C			lda #$7C
  1067 2350 85 FD			sta GLOBALS.B1I
  1068
  1069 2352			l_023C
  1070 				; --- ForToDoCondition
  1071
  1072 				; ---------------------  ASM Block 063  ---------------------
  1073
  1074 2352 8D 0A D4		 sta WSYNC 
  1075
  1076 				; optimize OK (main.pas), line = 69
  1077
  1078 2355 A4 FD			ldy GLOBALS.B1I
  1079 2357 B9 00 12			lda adr.ASTARS,y
  1080 235A 8D 07 D0			sta GLOBALS.HPOSM3
  1081
  1082 				; optimize OK (main.pas), line = 70
  1083
  1084 235D B9 00 12			lda adr.ASTARS,y
  1085 2360 38 F9 7D 12			sub adr.ASPEED,y
  1086 2364 99 00 12			sta adr.ASTARS,y
  1087
  1088 				; optimize OK (main.pas), line = 71
  1089
  1090 2367 AD 0A D2			lda SYSTEM.RND
  1091 236A 8D 15 D0			sta GLOBALS.COLPM3
  1092
  1093 				; --- ForToDoEpilog
  1094 236D C6 FD			dec GLOBALS.B1I
  1095 236F 10 E1			jpl l_023C
  1096 2371			l_024A
  1097
  1098 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 74
  1099
  1100 2371 E8				inx
  1101 2372 AD 68 24 95 98		mva PJOY :STACKORIGIN,x
  1102 2377 AD 69 24 95 A8		mva PJOY+1 :STACKORIGIN+STACKWIDTH,x
  1103 237C 20 F9 20			jsr SYS.SETDLI
  1104
  1105 				; ---------------------  ASM Block 064  ---------------------
  1106
  1107 237F 68 A8 68 AA 68	 plr 
  1108
  1109 				; ------------------------------------------------------------
  1110
  1111 = 0000			@FORTMP_0239	= $00
  1112 2384 40				rti						; ret
  1113 				.endl
  1114
  1115 2385			.local	INIT						; PROCEDURE
  1116
  1117 				; optimize FAIL ('SYSTEM.PAUSE_0067', main.pas), line = 81
  1118
  1119 2385 20 C8 20			jsr SYSTEM.PAUSE_0067
  1120 2388 A9 00			lda #$00
  1121 238A 8D 00 D4			sta GLOBALS.DMACTL
  1122 238D 20 11 21			jsr SYS.SYSTEMOFF
  1123
  1124 				; optimize OK (main.pas), line = 83
  1125
  1126 2390 A9 18			lda #$18
  1127 2392 8D 09 D4			sta GLOBALS.CHBAS
  1128
  1129 				; optimize OK (main.pas), line = 85
  1130
  1131 2395 A9 3F			lda #$3F
  1132 2397 85 88			sta :edx
  1133 2399 A9 EC			lda #$EC
  1134 239B 85 89			sta :edx+1
  1135 239D A9 C0			lda #$C0
  1136 239F 85 8C			sta :ecx
  1137 23A1 A9 03			lda #$03
  1138 23A3 85 8D			sta :ecx+1
  1139 23A5 A9 00			lda #$00
  1140 23A7 85 84			sta :eax
  1141 23A9 20 00 20			jsr @fill
  1142
  1143 				; optimize OK (main.pas), line = 87
  1144
  1145 23AC A9 7C			lda #$7C
  1146 23AE 85 FD			sta GLOBALS.B1I
  1147
  1148 23B0			l_0285
  1149 				; --- ForToDoCondition
  1150
  1151 				; optimize OK (main.pas), line = 88
  1152
  1153 23B0 A4 FD			ldy GLOBALS.B1I
  1154 23B2 AD 0A D2			lda SYSTEM.RND
  1155 23B5 99 00 12			sta adr.ASTARS,y
  1156
  1157 				; optimize OK (main.pas), line = 89
  1158
  1159 23B8 29 03			and #$03
  1160 23BA 18 69 01			add #$01
  1161 23BD 99 7D 12			sta adr.ASPEED,y
  1162
  1163 				; --- ForToDoEpilog
  1164 23C0 C6 FD			dec GLOBALS.B1I
  1165 23C2 10 EC			jpl l_0285
  1166 23C4			l_0293
  1167
  1168 				; optimize OK (main.pas), line = 92
  1169
  1170 23C4 AD 02 D3			lda GLOBALS.PACTL
  1171 23C7 09 04			ora #$04
  1172 23C9 8D 02 D3			sta GLOBALS.PACTL
  1173 23CC 20 81 21			jsr SPRITES.INIT
  1174 23CF 20 2D 21			jsr GR.MODE2
  1175
  1176 				; optimize OK (main.pas), line = 93
  1177
  1178 23D2 A9 00			lda #$00
  1179 23D4 8D 1A D0			sta GLOBALS.COLBK
  1180 23D7 8D 16 D0			sta GLOBALS.COLPF0
  1181 23DA A9 0F			lda #$0F
  1182 23DC 8D 17 D0			sta GLOBALS.COLPF1
  1183 23DF A9 02			lda #$02
  1184 23E1 8D 18 D0			sta GLOBALS.COLPF2
  1185 23E4 A9 00			lda #$00
  1186 23E6 8D 19 D0			sta GLOBALS.COLPF3
  1187
  1188 				; optimize OK (main.pas), line = 94
  1189
  1190 23E9 A9 24			lda <JOYHANDLER
  1191 23EB 8D 68 24			sta PJOY
  1192 23EE A9 23			lda >JOYHANDLER
  1193 23F0 8D 69 24			sta PJOY+1
  1194 23F3 A9 49			lda <STARS
  1195 23F5 8D 6A 24			sta PSTARS
  1196 23F8 A9 23			lda >STARS
  1197 23FA 8D 6B 24			sta PSTARS+1
  1198
  1199 				; optimize OK (main.pas), line = 96
  1200
  1201 23FD A9 06			lda #$06
  1202 23FF 85 03			sta SPRITES.BCANNONX
  1203 2401 A9 03			lda #$03
  1204 2403 85 8C			sta :ecx
  1205 2405 A5 02			lda SPRITES.BSHIPY
  1206 2407 85 84			sta :eax
  1207 					.ifdef fmulinit
  1208 					fmulu_8
  1209 					els
  1210 2409 20 48 20			imulCL
  1211 					eif
  1212 240C A5 84			lda :eax
  1213 240E 85 04			sta SPRITES.WCANNONY
  1214 2410 A5 85			lda :eax+1
  1215 2412 85 05			sta SPRITES.WCANNONY+1
  1216
  1217 				; optimize FAIL ('SYS.SETVBI', main.pas), line = 98
  1218
  1219 2414 E8				inx
  1220 2415 A9 A1 95 98			mva <VBI :STACKORIGIN,x
  1221 2419 A9 22 95 A8			mva >VBI :STACKORIGIN+STACKWIDTH,x
  1222 241D 20 E1 20			jsr SYS.SETVBI
  1223
  1224 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 99
  1225
  1226 2420 E8				inx
  1227 2421 A9 24 95 98			mva <JOYHANDLER :STACKORIGIN,x
  1228 2425 A9 23 95 A8			mva >JOYHANDLER :STACKORIGIN+STACKWIDTH,x
  1229 2429 20 F9 20			jsr SYS.SETDLI
  1230
  1231 				; optimize FAIL ('SYSTEM.PAUSE_0067', main.pas), line = 101
  1232
  1233 242C 20 C8 20			jsr SYSTEM.PAUSE_0067
  1234 242F A9 3E			lda #$3E
  1235 2431 8D 00 D4			sta GLOBALS.DMACTL
  1236
  1237 				; ------------------------------------------------------------
  1238
  1239 = 0000			@FORTMP_0282	= $00
  1240 2434			@exit
  1241 					.ifdef @new
  1242 					lda <@VarData
  1243 					sta :ztmp
  1244 					lda >@VarData
  1245 					ldy #@VarDataSize-1
  1246 					jmp @FreeMem
  1247 					els
  1248 2434 60				rts						; ret
  1249 					eif
  1250 				.endl
  1251 2435			l_0007
  1252
  1253 				; optimize FAIL ('INIT', main.pas), line = 105
  1254
  1255 2435 20 85 23			jsr INIT
  1256
  1257 				; --- RepeatUntilProlog
  1258 2438			l_02F0
  1259
  1260 				; optimize OK (main.pas), line = 106
  1261
  1262 2438 4C 38 24			jmp l_02F0
  1263
  1264 				; ------------------------------------------------------------
  1265
  1266 = 1000			PM_ADR	= $1000
  1267 = 1300			M0_ADR	= $1300
  1268 = 1400			P0_ADR	= $1400
  1269 = 1500			P1_ADR	= $1500
  1270 = 1000			GFX_SHIP_ADR	= $1000
  1271 = 0008			GFX_SHIP_SEG	= $08
  1272 = 1800			GFX_FONTS_ADR	= $1800
  1273 = 1100			DL_2	= $1100
  1274 = EC3F			GAME_LMS	= $EC3F
  1275 = E000			GAME_LMS_END	= $E000
  1276 = 0015			GAME_SCREEN_ROWS	= $15
  1277 = 0E0E			SHIP_COL	= $0E0E
  1278 = 0030			SHIP_LEFT_LIMIT	= $30
  1279 = 00B0			SHIP_RIGHT_LIMIT	= $B0
  1280 = 0020			SHIP_TOP_LIMIT	= $20
  1281 = 00A8			SHIP_BOTTOM_LIMIT	= $A8
  1282 = 0202			SHIP_X_STEP	= $0202
  1283 = 0004			SHIP_Y_STEP	= $04
  1284 = 0008			JOY_LEFT	= $08
  1285 = 0004			JOY_RIGHT	= $04
  1286 = 0002			JOY_UP	= $02
  1287 = 0001			JOY_DOWN	= $01
  1288 = 1200			adr.ASTARS	= $1200
  1289 243B			.var ASTARS	= adr.ASTARS .word
  1290 = 127D			adr.ASPEED	= $127D
  1291 243B			.var ASPEED	= adr.ASPEED .word
  1292 = 2468			PJOY	= DATAORIGIN+$0010
  1293 = 246A			PSTARS	= DATAORIGIN+$0012
  1294 243B			@exit
  1295
  1296 243B A2 00		@halt	ldx #$00
  1297 243D 9A				txs
  1298 					.ifdef MAIN.@DEFINES.ROMOFF
  1299 					inc portb
  1300 					.endif
  1301
  1302 243E A0 01			ldy #$01
  1303
  1304 2440 60				rts
  1305
  1306 				; ------------------------------------------------------------
  1307
  1308 2441 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1309
  1310 				; ------------------------------------------------------------
  1311
  1312 2451			.local	@DEFINES
  1313 2451			ATARI
  1314 				.endl
  1315
  1316 2451			.local	@RESOURCE
  1317 				.endl
  1318
  1319 = 2451 00 12		ASTARS
  1319 = 2453 7D 12		ASPEED
  1319 				.endl							; MAIN
  1320
  1321 				; ------------------------------------------------------------
  1322 				; ------------------------------------------------------------
  1323
  1324 				.macro	UNITINITIALIZATION
  1325 				
  1326 					.ifdef MAIN.SYSTEM.@UnitInit
  1327 					jsr MAIN.SYSTEM.@UnitInit
  1328 					eif
  1329 				
  1330 					.ifdef MAIN.GLOBALS.@UnitInit
  1331 					jsr MAIN.GLOBALS.@UnitInit
  1332 					eif
  1333 				
  1334 					.ifdef MAIN.SYS.@UnitInit
  1335 					jsr MAIN.SYS.@UnitInit
  1336 					eif
  1337 				
  1338 					.ifdef MAIN.GR.@UnitInit
  1339 					jsr MAIN.GR.@UnitInit
  1340 					eif
  1341 				
  1342 					.ifdef MAIN.SPRITES.@UnitInit
  1343 					jsr MAIN.SPRITES.@UnitInit
  1344 					eif
  1345 				
  1346 					.ifdef MAIN.JOY.@UnitInit
  1347 					jsr MAIN.JOY.@UnitInit
  1348 					eif
  1349 				.endm
  1350
  1351 				; ------------------------------------------------------------
  1352
  1353 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1354 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1354 				SYSTEM: $2098..$20D2
  1355 					eif
  1356
  1357 					ift .SIZEOF(MAIN.GLOBALS) > 0
  1358 					.print 'GLOBALS: ',MAIN.GLOBALS,'..',MAIN.GLOBALS+.SIZEOF(MAIN.GLOBALS)-1
  1359 					eif
  1360
  1361 					ift .SIZEOF(MAIN.SYS) > 0
  1362 					.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
  1362 				SYS: $20D3..$212C
  1363 					eif
  1364
  1365 					ift .SIZEOF(MAIN.GR) > 0
  1366 					.print 'GR: ',MAIN.GR,'..',MAIN.GR+.SIZEOF(MAIN.GR)-1
  1366 				GR: $212D..$2138
  1367 					eif
  1368
  1369 					ift .SIZEOF(MAIN.SPRITES) > 0
  1370 					.print 'SPRITES: ',MAIN.SPRITES,'..',MAIN.SPRITES+.SIZEOF(MAIN.SPRITES)-1
  1370 				SPRITES: $2139..$21EE
  1371 					eif
  1372
  1373 					ift .SIZEOF(MAIN.JOY) > 0
  1374 					.print 'JOY: ',MAIN.JOY,'..',MAIN.JOY+.SIZEOF(MAIN.JOY)-1
  1374 				JOY: $21EF..$22A0
  1375 					eif
  1376
  1377 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1377 				CODE: $2000..$2450
  1378
  1379 				; ------------------------------------------------------------
  1380
  1381 2455				.align $04
  1382
  1383 2458			DATAORIGIN
  1384 2458-245D> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  1385
  1386 = 0006			VARINITSIZE	= *-DATAORIGIN
  1387 = 0014			VARDATASIZE	= 20
  1388
  1389 = 246C			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1390
  1391 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1391 				DATA: $2458..$246C
  1392
  1393 02E0-02E1> 5C 20			run START
  1394
  1395 				; ------------------------------------------------------------
  1396
  1397 				.macro	STATICDATA
  1398 				.endm
  1399
  1400 					end
