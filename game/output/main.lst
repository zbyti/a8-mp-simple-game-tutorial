mads 2.1.1
  1133 					opt l+
    98 = 0000				?EXTDETECT = 0
    99 = 0000				?VBXDETECT = 0
   100
   101 2075				RCASM 'res/gr_dl.asm' GLOBALS.DL_2 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 001A			len = .sizeof(_GLOBALS.DL_2)
     6 				mcpy	ift main.GLOBALS.DL_2+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 11 +  MWA #MAIN.GLOBALS.DL_2 ECX
    13 2088 A9 1A 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: const.inc
     1 = 1000			PM_ADR              = $1000;                      // players & missiles memory (2K) start address
     2 = 1300			M0_ADR              = PM_ADR + $300;              // missile 0 start memory address
     3 = 1400			P0_ADR              = PM_ADR + $400;              // player 0 start memory address
     4 = 1500			P1_ADR              = PM_ADR + $500;              // player 1 start memory address
     5 = 1000			GFX_SHIP_ADR        = $1000;                      // ship gfx memory start address, ship size = 20 bytes, 16 bytes for gfx and 4 bytes fo top/bottom empty rows
     6 = 0008			GFX_SHIP_SEG        = 8;                          // ship gfx 10 byte segment, 10B for P0 & 10B for P1
     8 = 1800			GFX_FONTS_ADR       = $1800;
    10 = 1100			DL_2                = $1100;                      // display list memory start address for ANTIC mode 2
    11 = EC3F			GAME_LMS            = $efff - $3c0;               // Load Memory Scan address
    12 = E000			GAME_LMS_EMD        = $e000;
    13 = 0015			GAME_SCREEN_ROWS    = 21;
    15 = 0E0E			SHIP_COL            = $0e0e;
    16 = 0030			SHIP_LEFT_LIMIT     = 48;
    17 = 00B0			SHIP_RIGHT_LIMIT    = SHIP_LEFT_LIMIT + (16 * 8);
    18 = 0020			SHIP_TOP_LIMIT      = 32;
    19 = 00A8			SHIP_BOTTOM_LIMIT   = 8 * GAME_SCREEN_ROWS;
    20 = 0202			SHIP_X_STEP         = $0202;
    22 = 0008			JOY_LEFT            = %1000;
    23 = 0004			JOY_RIGHT           = %0100;
    24 = 0002			JOY_UP              = %0010;
    25 = 0001			JOY_DOWN            = %0001;
     3 1100			dl2
     4 1100 F0 70 F0		    .byte $f0,$70,$f0
     5 1103 42 3F EC		    .byte $42,a(GAME_LMS)
     6 1106 02 02 02 02 02 02 + :17 .byte 2
     7 1117 41 00 11		    .byte $41,a(dl2)
    23 					.print '$R RCASM   ',main.GLOBALS.DL_2,'..',main.GLOBALS.DL_2+len-1," 'res/gr_dl.asm'"
    23 				$R RCASM   $1100..$1119 'res/gr_dl.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: main.a65
   102 20B0				RCDATA 'res/gfx_ship.bin' GLOBALS.GFX_SHIP_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0010			len = .filesize('res/gfx_ship.bin')
    28 20B0				org main.GLOBALS.GFX_SHIP_ADR
    30 1000-100F> 70 7B 1E 3F + 	ins 'res/gfx_ship.bin'
    32 					.print '$R RCDATA  ',main.GLOBALS.GFX_SHIP_ADR,'..',*-1," 'res/gfx_ship.bin'"
    32 				$R RCDATA  $1000..$100F 'res/gfx_ship.bin'
Source: main.a65
   103 1010				RCDATA 'res/charset.fnt' GLOBALS.GFX_FONTS_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0400			len = .filesize('res/charset.fnt')
    28 1010				org main.GLOBALS.GFX_FONTS_ADR
    30 1800-1BFF> 00 00 00 00 + 	ins 'res/charset.fnt'
    32 					.print '$R RCDATA  ',main.GLOBALS.GFX_FONTS_ADR,'..',*-1," 'res/charset.fnt'"
    32 				$R RCDATA  $1800..$1BFF 'res/charset.fnt'
Source: main.a65
   104 				.endl
   105
   106 				; ------------------------------------------------------------
   107
   108 1C00				org CODEORIGIN
   109
   110 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
Source: main.a65
   111
   112 				; ------------------------------------------------------------
   113
   114 2000			RTLIB
   115 2000				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
   148 					opt l+
   116
   117 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   117 				ZPAGE: $0080..$00D7
   118
   119 				.print 'RTLIB: ',RTLIB,'..',*-1
   119 				RTLIB: $2000..$20EC
   120
   121 				; ------------------------------------------------------------
   122
   123 20ED			START
   124 20ED BA				tsx
   125 20EE 8E E2 24			stx MAIN.@halt+1
   126
   127 					.ifdef fmulinit
   128 					fmulinit
   129 					eif
   130
   131 = 000E			VLEN	= VARDATASIZE-VARINITSIZE
   132 = 2502			VADR	= DATAORIGIN+VARINITSIZE
   133
   134 					ift VADR > $BFFF
   135 					ert 'Invalid memory address range ',VADR
   136 					eli (VLEN>0) && (VLEN<=256)
   137 20F1 A2 F2			ldx #256-VLEN
   138 20F3 A9 00			lda #$00
   139 20F5 9D 10 24 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   140 					eli VLEN>0
   141 					@fill #VADR #VLEN #$00
   142 					eif
   143
   144 20FB A9 10 85 82 A9 25 + 	mwa #PROGRAMSTACK psptr
   145
   146 					.ifdef MAIN.@DEFINES.ROMOFF
   147 					icl 'atari\romoff.asm'
   148 					.endif
   149
   150 2103 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   151 2105 BD 40 03 9D E7 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   152
   153 210E E8				inx						; X = 0
   154 210F 86 90			stx bp						; BP = 0
   155
   156 2111 8E 08 D2			stx audctl					; reset POKEY
   157 2114 A9 03			lda #3
   158 2116 8D 0F D2			sta skctl
   159
   160 2119 CA				dex						; X = 255
   161
   162 211A				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
    11 211A 20 FA 21			jsr MAIN.SYS.@UnitInit
    15 211D 20 06 22			jsr MAIN.GR.@UnitInit
    19 2120 20 CD 22			jsr MAIN.SPRITES.@UnitInit
    23 2123 20 61 23			jsr MAIN.JOY.@UnitInit
   163
   164 2126			.local	MAIN						; PROCEDURE
   165
   166 2126 4C DB 24			jmp l_0007
   167
   168 				; ------------------------------------------------------------
   169
   170 2129			.local	SYSTEM						; UNIT
   171
   172 2129			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   173
   174 				; ------------------------------------------------------------
   175
   176 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   177 				; as Pointer
   178 2129 B5 98			lda :STACKORIGIN,x
   179 212B 85 8C			sta VALUE
   180 212D CA				dex
   181
   182 				; ------------------------------------------------------------
   183
   184 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   185 				; as Pointer
   186 212E B5 98			lda :STACKORIGIN,x
   187 2130 85 88			sta A
   188 2132 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   189 2134 85 89			sta A+1
   190 2136 CA				dex
   191
   192 				; ---------------------  ASM Block 021  ---------------------
   193
   194 2137 A0 00			ldy #0
   195 2139 A5 8C 91 88			mva value (edx),y
   196
   197
   198 				; ------------------------------------------------------------
   199
   200 = 0088			A	= edx
   201 = 008C			VALUE	= ecx
   202 213D			@exit
   203 					.ifdef @new
   204 					lda <@VarData
   205 					sta :ztmp
   206 					lda >@VarData
   207 					ldy #@VarDataSize-1
   208 					jmp @FreeMem
   209 					els
   210 213D 60				rts						; ret
   211 					eif
   212 				.endl
   213
   214 213E			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   215
   216 				; ------------------------------------------------------------
   217
   218 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   219 				; as Pointer
   220 213E B5 98			lda :STACKORIGIN,x
   221 2140 85 8C			sta VALUE
   222 2142 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   223 2144 85 8D			sta VALUE+1
   224 2146 CA				dex
   225
   226 				; ------------------------------------------------------------
   227
   228 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   229 				; as Pointer
   230 2147 B5 98			lda :STACKORIGIN,x
   231 2149 85 88			sta A
   232 214B B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   233 214D 85 89			sta A+1
   234 214F CA				dex
   235
   236 				; ---------------------  ASM Block 022  ---------------------
   237
   238 2150 A0 00			ldy #0
   239 2152 A5 8C 91 88			mva value (edx),y
   240 2156 C8				iny
   241 2157 A5 8D 91 88			mva value+1 (edx),y
   242
   243
   244 				; ------------------------------------------------------------
   245
   246 = 0088			A	= edx
   247 = 008C			VALUE	= ecx
   248 215B			@exit
   249 					.ifdef @new
   250 					lda <@VarData
   251 					sta :ztmp
   252 					lda >@VarData
   253 					ldy #@VarDataSize-1
   254 					jmp @FreeMem
   255 					els
   256 215B 60				rts						; ret
   257 					eif
   258 				.endl
   259
   260 215C			.local	FILLBYTE_0050					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   261
   262 				; ------------------------------------------------------------
   263
   264 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   265 				; as Pointer
   266 215C B5 98			lda :STACKORIGIN,x
   267 215E 85 84			sta VALUE
   268 2160 CA				dex
   269
   270 				; ------------------------------------------------------------
   271
   272 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   273 				; as Pointer
   274 2161 B5 98			lda :STACKORIGIN,x
   275 2163 85 8C			sta COUNT
   276 2165 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   277 2167 85 8D			sta COUNT+1
   278 2169 CA				dex
   279
   280 				; ------------------------------------------------------------
   281
   282 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   283 				; as Pointer
   284 216A B5 98			lda :STACKORIGIN,x
   285 216C 85 88			sta A
   286 216E B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   287 2170 85 89			sta A+1
   288 2172 CA				dex
   289
   290 				; ---------------------  ASM Block 029  ---------------------
   291
   292 2173 20 80 20			jsr @fill
   293
   294
   295 				; ------------------------------------------------------------
   296
   297 = 0088			A	= edx
   298 = 008C			COUNT	= ecx
   299 = 0084			VALUE	= eax
   300 2176			@exit
   301 					.ifdef @new
   302 					lda <@VarData
   303 					sta :ztmp
   304 					lda >@VarData
   305 					ldy #@VarDataSize-1
   306 					jmp @FreeMem
   307 					els
   308 2176 60				rts						; ret
   309 					eif
   310 				.endl
   311
   312 2177			.local	MOVE_005A					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   313
   314 				; ------------------------------------------------------------
   315
   316 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   317 				; as Pointer
   318 2177 B5 98			lda :STACKORIGIN,x
   319 2179 85 84			sta COUNT
   320 217B B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   321 217D 85 85			sta COUNT+1
   322 217F CA				dex
   323
   324 				; ------------------------------------------------------------
   325
   326 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   327 				; as Pointer
   328 2180 B5 98			lda :STACKORIGIN,x
   329 2182 85 8C			sta DEST
   330 2184 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   331 2186 85 8D			sta DEST+1
   332 2188 CA				dex
   333
   334 				; ------------------------------------------------------------
   335
   336 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   337 				; as Pointer
   338 2189 B5 98			lda :STACKORIGIN,x
   339 218B 85 88			sta SOURCE
   340 218D B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   341 218F 85 89			sta SOURCE+1
   342 2191 CA				dex
   343
   344 				; ---------------------  ASM Block 031  ---------------------
   345
   346 2192 20 2B 20			jsr @move
   347
   348
   349 				; ------------------------------------------------------------
   350
   351 = 0088			SOURCE	= edx
   352 = 008C			DEST	= ecx
   353 = 0084			COUNT	= eax
   354 2195			@exit
   355 					.ifdef @new
   356 					lda <@VarData
   357 					sta :ztmp
   358 					lda >@VarData
   359 					ldy #@VarDataSize-1
   360 					jmp @FreeMem
   361 					els
   362 2195 60				rts						; ret
   363 					eif
   364 				.endl
   365
   366 2196			.local	PAUSE_0078					; PROCEDURE | ASSEMBLER | OVERLOAD
   367
   368 				; ---------------------  ASM Block 039  ---------------------
   369
   370 2196 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   371
   372 219C			@exit
   373 					.ifdef @new
   374 					lda <@VarData
   375 					sta :ztmp
   376 					lda >@VarData
   377 					ldy #@VarDataSize-1
   378 					jmp @FreeMem
   379 					els
   380 219C 60				rts						; ret
   381 					eif
   382 				.endl
   383
   384 				; ------------------------------------------------------------
   385
   386 = 0101			__PORTB_BANKS	= $0101
   387 = 0648			M_PI_2	= $0648
   388 = 0192			D_PI_2	= $0192
   389 = 0004			D_PI_180	= $04
   390 = 0000			MGTIA	= $00
   391 = 0080			MVBXE	= $80
   392 = 0000			VBXE_XDLADR	= $00
   393 = 0100			VBXE_BCBADR	= $0100
   394 = 1000			VBXE_MAPADR	= $1000
   395 = 5000			VBXE_OVRADR	= $5000
   396 = B000			VBXE_WINDOW	= $B000
   397 = 0000			IDLI	= $00
   398 = 0001			IVBL	= $01
   399 = 00FE			CH_DELCHR	= $FE
   400 = 009B			CH_ENTER	= $9B
   401 = 001B			CH_ESC	= $1B
   402 = 001C			CH_CURS_UP	= $1C
   403 = 001D			CH_CURS_DOWN	= $1D
   404 = 001E			CH_CURS_LEFT	= $1E
   405 = 001F			CH_CURS_RIGHT	= $1F
   406 = 007F			CH_TAB	= $7F
   407 = 009B			CH_EOL	= $9B
   408 = 007D			CH_CLR	= $7D
   409 = 00FD			CH_BELL	= $FD
   410 = 007E			CH_DEL	= $7E
   411 = 009C			CH_DELLINE	= $9C
   412 = 009D			CH_INSLINE	= $9D
   413 = 0000			COLOR_BLACK	= $00
   414 = 000E			COLOR_WHITE	= $0E
   415 = 0032			COLOR_RED	= $32
   416 = 0096			COLOR_CYAN	= $96
   417 = 0068			COLOR_VIOLET	= $68
   418 = 00C4			COLOR_GREEN	= $C4
   419 = 0074			COLOR_BLUE	= $74
   420 = 00EE			COLOR_YELLOW	= $EE
   421 = 0028			COLOR_ORANGE	= $28
   422 = 00E4			COLOR_BROWN	= $E4
   423 = 003C			COLOR_LIGHTRED	= $3C
   424 = 0004			COLOR_GRAY1	= $04
   425 = 0006			COLOR_GRAY2	= $06
   426 = 000A			COLOR_GRAY3	= $0A
   427 = 00CC			COLOR_LIGHTGREEN	= $CC
   428 = 007C			COLOR_LIGHTBLUE	= $7C
   429 = 0004			FMOPENREAD	= $04
   430 = 0008			FMOPENWRITE	= $08
   431 = 0009			FMOPENAPPEND	= $09
   432 = 000C			FMOPENREADWRITE	= $0C
   433 = 24FC			SCREENWIDTH	= DATAORIGIN+$0000
   434 = 24FE			SCREENHEIGHT	= DATAORIGIN+$0002
   435 = 2500			DATESEPARATOR	= DATAORIGIN+$0004
   436 = D014			TVSYSTEM	= $D014
   437 = D20A			RND	= $D20A
   438 = 02C0			adr.PALETTE	= $02C0
   439 219D			.var PALETTE	= adr.PALETTE .word
   440 = D012			adr.HPALETTE	= $D012
   441 219D			.var HPALETTE	= adr.HPALETTE .word
   442 = 2501			FILEMODE	= DATAORIGIN+$0005
   443 = 2502			GRAPHMODE	= DATAORIGIN+$0006
   444 = 2503			IORESULT	= DATAORIGIN+$0007
   445 = 2504			EOLN	= DATAORIGIN+$0008
   446 = 2505			RNDSEED	= DATAORIGIN+$0009
   447
   448 = 219D C0 02		PALETTE
   448 = 219F 12 D0		HPALETTE
   448 				.endl							; UNIT SYSTEM
   449
   450 				; ------------------------------------------------------------
   451
   452 21A1			.local	GLOBALS						; UNIT
   453
   454 				; ------------------------------------------------------------
   455
   456 = 1000			PM_ADR	= $1000
   457 = 1300			M0_ADR	= $1300
   458 = 1400			P0_ADR	= $1400
   459 = 1500			P1_ADR	= $1500
   460 = 1000			GFX_SHIP_ADR	= $1000
   461 = 0008			GFX_SHIP_SEG	= $08
   462 = 1800			GFX_FONTS_ADR	= $1800
   463 = 1100			DL_2	= $1100
   464 = EC3F			GAME_LMS	= $EC3F
   465 = E000			GAME_LMS_EMD	= $E000
   466 = 0015			GAME_SCREEN_ROWS	= $15
   467 = 0E0E			SHIP_COL	= $0E0E
   468 = 0030			SHIP_LEFT_LIMIT	= $30
   469 = 00B0			SHIP_RIGHT_LIMIT	= $B0
   470 = 0020			SHIP_TOP_LIMIT	= $20
   471 = 00A8			SHIP_BOTTOM_LIMIT	= $A8
   472 = 0202			SHIP_X_STEP	= $0202
   473 = 0008			JOY_LEFT	= $08
   474 = 0004			JOY_RIGHT	= $04
   475 = 0002			JOY_UP	= $02
   476 = 0001			JOY_DOWN	= $01
   477 = 0014			RTCLOK	= $14
   478 = D000			HPOSP0	= $D000
   479 = D001			HPOSP1	= $D001
   480 = D004			HPOSM0	= $D004
   481 = D005			HPOSM1	= $D005
   482 = D006			HPOSM2	= $D006
   483 = D007			HPOSM3	= $D007
   484 = D008			SIZEP0	= $D008
   485 = D009			SIZEP1	= $D009
   486 = D00A			SIZEP2	= $D00A
   487 = D00B			SIZEP3	= $D00B
   488 = D00C			SIZEM	= $D00C
   489 = D011			GRAFM	= $D011
   490 = D012			COLPM0	= $D012
   491 = D013			COLPM1	= $D013
   492 = D014			COLPM2	= $D014
   493 = D015			COLPM3	= $D015
   494 = D017			COLPF1	= $D017
   495 = D018			COLPF2	= $D018
   496 = D01A			COLBK	= $D01A
   497 = D01B			PRIOR	= $D01B
   498 = D01D			GRACTL	= $D01D
   499 = D20A			RND	= $D20A
   500 = D300			PORTA	= $D300
   501 = D301			PORTB	= $D301
   502 = D302			PACTL	= $D302
   503 = D400			DMACTL	= $D400
   504 = D402			DLIST	= $D402
   505 = D407			PMBASE	= $D407
   506 = D409			CHBAS	= $D409
   507 = D40A			WSYNC	= $D40A
   508 = D40B			VCOUNT	= $D40B
   509 = D40E			NMIEN	= $D40E
   510 = FFFA			NMIVEC	= $FFFA
   511 = D000			HPOSP01	= $D000
   512 = D008			SIZEP01	= $D008
   513 = D012			COLPM01	= $D012
   514 = 1104			DL2LMS	= $1104
   515 = 00FF			BTMP1	= $FF
   516 = 00FE			BTMP2	= $FE
   517 = 00FD			B1I	= $FD
   518 = 00FC			B2I	= $FC
   519 = 00FA			WTMP1	= $FA
   520 = 00F8			WTMP2	= $F8
   521
   522 				.endl							; UNIT GLOBALS
   523
   524 				; ------------------------------------------------------------
   525
   526 21A1			.local	SYS						; UNIT
   527
   528 21A1			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
   529
   530 				; ---------------------  ASM Block 049  ---------------------
   531
   532
   533 				      bit NMIST \ bpl vbi     ; check kind of interrupt
   533 21A1 2C 0F D4		      BIT NMIST 
   533 21A4 10 03		 BPL VBI     
   534 = 21A6			.def  :__dlijmp
   535 21A6 4C AE 21		      jmp __off               ; VDSLST
   536 21A9 E6 14		vbi:  inc RTCLOK+2
   537 = 21AB			.def  :__vbijmp
   538 21AB 4C AE 21		      jmp __off               ; VBIVEC
   539 = 21AE			.def  :__off
   540
   541 21AE 40				rti						; ret
   542 				.endl
   543
   544 21AF			.local	SETVBI						; PROCEDURE | ASSEMBLER
   545
   546 				; ------------------------------------------------------------
   547
   548 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   549 				; as Pointer
   550 21AF B5 98			lda :STACKORIGIN,x
   551 21B1 8D 07 25			sta A
   552 21B4 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   553 21B6 8D 08 25			sta A+1
   554 21B9 CA				dex
   555
   556 				; ---------------------  ASM Block 050  ---------------------
   557
   558
   559 21BA AD 07 25 8D AC 21 +   mwa a __vbijmp+1
   560
   561
   562 				; ------------------------------------------------------------
   563
   564 = 2507			A	= DATAORIGIN+$000B
   565
   566 = 2507			@VarData	= A
   567 = 0002			@VarDataSize	= 2
   568
   569 21C6			@exit
   570 					.ifdef @new
   571 					lda <@VarData
   572 					sta :ztmp
   573 					lda >@VarData
   574 					ldy #@VarDataSize-1
   575 					jmp @FreeMem
   576 					els
   577 21C6 60				rts						; ret
   578 					eif
   579 				.endl
   580
   581 21C7			.local	SETDLI						; PROCEDURE | ASSEMBLER
   582
   583 				; ------------------------------------------------------------
   584
   585 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   586 				; as Pointer
   587 21C7 B5 98			lda :STACKORIGIN,x
   588 21C9 8D 09 25			sta A
   589 21CC B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   590 21CE 8D 0A 25			sta A+1
   591 21D1 CA				dex
   592
   593 				; ---------------------  ASM Block 051  ---------------------
   594
   595
   596 21D2 AD 09 25 8D A7 21 +   mwa a __dlijmp+1
   597
   598
   599 				; ------------------------------------------------------------
   600
   601 = 2509			A	= DATAORIGIN+$000D
   602
   603 = 2509			@VarData	= A
   604 = 0002			@VarDataSize	= 2
   605
   606 21DE			@exit
   607 					.ifdef @new
   608 					lda <@VarData
   609 					sta :ztmp
   610 					lda >@VarData
   611 					ldy #@VarDataSize-1
   612 					jmp @FreeMem
   613 					els
   614 21DE 60				rts						; ret
   615 					eif
   616 				.endl
   617
   618 21DF			.local	SYSTEMOFF					; PROCEDURE
   619
   620 				; ---------------------  ASM Block 054  ---------------------
   621
   622 21DF 78			 sei 
   623
   624 				; optimize OK (SYS), line = 63
   625
   626 21E0 A9 00			lda #$00
   627 21E2 8D 0E D4			sta GLOBALS.NMIEN
   628 21E5 A9 FE			lda #$FE
   629 21E7 8D 01 D3			sta GLOBALS.PORTB
   630 21EA A9 A1			lda <NMI
   631 21EC 8D FA FF			sta GLOBALS.NMIVEC
   632 21EF A9 21			lda >NMI
   633 21F1 8D FB FF			sta GLOBALS.NMIVEC+1
   634 21F4 A9 C0			lda #$C0
   635 21F6 8D 0E D4			sta GLOBALS.NMIEN
   636 21F9			@exit
   637 					.ifdef @new
   638 					lda <@VarData
   639 					sta :ztmp
   640 					lda >@VarData
   641 					ldy #@VarDataSize-1
   642 					jmp @FreeMem
   643 					els
   644 21F9 60				rts						; ret
   645 					eif
   646 				.endl
   647
   648 				; ------------------------------------------------------------
   649 				; ------------------------------------------------------------
   650 21FA			@UnitInit
   651
   652 21FA 60				rts
   653
   654 				; ------------------------------------------------------------
   655
   656 				.endl							; UNIT SYS
   657
   658 				; ------------------------------------------------------------
   659
   660 21FB			.local	GR						; UNIT
   661
   662 21FB			.local	MODE2						; PROCEDURE
   663
   664 				; optimize OK (GR), line = 17
   665
   666 21FB A9 00			lda #$00
   667 21FD 8D 02 D4			sta GLOBALS.DLIST
   668 2200 A9 11			lda #$11
   669 2202 8D 03 D4			sta GLOBALS.DLIST+1
   670 2205			@exit
   671 					.ifdef @new
   672 					lda <@VarData
   673 					sta :ztmp
   674 					lda >@VarData
   675 					ldy #@VarDataSize-1
   676 					jmp @FreeMem
   677 					els
   678 2205 60				rts						; ret
   679 					eif
   680 				.endl
   681
   682 				; ------------------------------------------------------------
   683 				; ------------------------------------------------------------
   684 2206			@UnitInit
   685
   686 2206 60				rts
   687
   688 				; ------------------------------------------------------------
   689
   690 				.endl							; UNIT GR
   691
   692 				; ------------------------------------------------------------
   693
   694 2207			.local	SPRITES						; UNIT
   695
   696 2207			.local	COPYSHIP					; PROCEDURE
   697
   698 				; optimize OK (SPRITES), line = 25
   699
   700 2207 A5 03			lda BSHIPYCLEAR
   701 2209 85 92			sta :bp2
   702 220B A9 14			lda #$14
   703 220D 85 93			sta :bp2+1
   704 220F A0 00			ldy #$00
   705 2211 98				tya
   706 2212 91 92			sta (:bp2),y
   707 2214 C8				iny
   708 2215 91 92			sta (:bp2),y
   709 2217 A5 03			lda BSHIPYCLEAR
   710 2219 85 92			sta :bp2
   711 221B A9 15			lda #$15
   712 221D 85 93			sta :bp2+1
   713 221F A0 00			ldy #$00
   714 2221 98				tya
   715 2222 91 92			sta (:bp2),y
   716 2224 C8				iny
   717 2225 91 92			sta (:bp2),y
   718
   719 				; optimize OK (SPRITES), line = 26
   720
   721 2227 A5 02			lda BSHIPY
   722 2229 85 8C			sta :ecx
   723 222B A9 14			lda #$14
   724 222D 85 8D			sta :ecx+1
   725 222F A9 00			lda #$00
   726 2231 85 88			sta :edx
   727 2233 A9 10			lda #$10
   728 2235 85 89			sta :edx+1
   729 2237 A9 08			lda #$08
   730 2239 85 84			sta :eax
   731 223B A9 00			lda #$00
   732 223D 85 85			sta :eax+1
   733 223F 20 2B 20			jsr @move
   734
   735 				; optimize OK (SPRITES), line = 27
   736
   737 2242 A5 02			lda BSHIPY
   738 2244 85 8C			sta :ecx
   739 2246 A9 15			lda #$15
   740 2248 85 8D			sta :ecx+1
   741 224A A9 08			lda #$08
   742 224C 85 88			sta :edx
   743 224E A9 10			lda #$10
   744 2250 85 89			sta :edx+1
   745 2252 A9 08			lda #$08
   746 2254 85 84			sta :eax
   747 2256 A9 00			lda #$00
   748 2258 85 85			sta :eax+1
   749 225A 20 2B 20			jsr @move
   750 225D			@exit
   751 					.ifdef @new
   752 					lda <@VarData
   753 					sta :ztmp
   754 					lda >@VarData
   755 					ldy #@VarDataSize-1
   756 					jmp @FreeMem
   757 					els
   758 225D 60				rts						; ret
   759 					eif
   760 				.endl
   761
   762 225E			.local	INIT						; PROCEDURE
   763
   764 				; optimize OK (SPRITES), line = 32
   765
   766 225E				.LOCAL
   767 225E A0 00			ldy #$00
   768 2260 98				tya
   769 2261 99 00 13 99 80 13 + fill	:10 sta $1300+#*$80,y
   770 227F C8				iny
   771 2280 10 DF			bpl fill
   772 					.ENDL
   773
   774 				; optimize OK (SPRITES), line = 33
   775
   776 2282 A0 70			ldy #256-$90
   777 2284 A9 FF			lda #$FF
   778 2286 99 B0 12 C8 D0 FA		sta:rne $1320+$90-256,y+
   779
   780 				; optimize OK (SPRITES), line = 35
   781
   782 228C A9 10			lda #$10
   783 228E 8D 07 D4			sta GLOBALS.PMBASE
   784
   785 				; optimize OK (SPRITES), line = 36
   786
   787 2291 A9 0A			lda #$0A
   788 2293 8D 15 D0			sta GLOBALS.COLPM3
   789 2296 A9 0E			lda #$0E
   790 2298 8D 12 D0			sta GLOBALS.COLPM01
   791 229B 8D 13 D0			sta GLOBALS.COLPM01+1
   792
   793 				; optimize OK (SPRITES), line = 37
   794
   795 229E A9 50			lda #$50
   796 22A0 85 02			sta BSHIPY
   797 22A2 85 03			sta BSHIPYCLEAR
   798
   799 				; optimize OK (SPRITES), line = 38
   800
   801 22A4 A9 30			lda #$30
   802 22A6 85 00			sta BHPOSP0
   803 22A8 A9 38			lda #$38
   804 22AA 85 01			sta BHPOSP1
   805 22AC A5 00			lda WSHIPX
   806 22AE 8D 00 D0			sta GLOBALS.HPOSP01
   807 22B1 A5 01			lda WSHIPX+1
   808 22B3 8D 01 D0			sta GLOBALS.HPOSP01+1
   809
   810 				; optimize OK (SPRITES), line = 39
   811
   812 22B6 A9 00			lda #$00
   813 22B8 8D 08 D0			sta GLOBALS.SIZEP01
   814 22BB 8D 09 D0			sta GLOBALS.SIZEP01+1
   815 22BE 8D 0C D0			sta GLOBALS.SIZEM
   816 22C1 8D 1B D0			sta GLOBALS.PRIOR
   817 22C4 A9 03			lda #$03
   818 22C6 8D 1D D0			sta GLOBALS.GRACTL
   819
   820 				; optimize FAIL ('COPYSHIP', SPRITES), line = 41
   821
   822 22C9 20 07 22			jsr COPYSHIP
   823 22CC			@exit
   824 					.ifdef @new
   825 					lda <@VarData
   826 					sta :ztmp
   827 					lda >@VarData
   828 					ldy #@VarDataSize-1
   829 					jmp @FreeMem
   830 					els
   831 22CC 60				rts						; ret
   832 					eif
   833 				.endl
   834
   835 				; ------------------------------------------------------------
   836 				; ------------------------------------------------------------
   837 22CD			@UnitInit
   838
   839 22CD 60				rts
   840
   841 				; ------------------------------------------------------------
   842
   843 = 0000			BHPOSP0	= $00
   844 = 0001			BHPOSP1	= $01
   845 = 0002			BSHIPY	= $02
   846 = 0003			BSHIPYCLEAR	= $03
   847 = 0000			WSHIPX	= $00
   848
   849 				.endl							; UNIT SPRITES
   850
   851 				; ------------------------------------------------------------
   852
   853 22CE			.local	JOY						; UNIT
   854
   855 22CE			.local	MOVESHIP					; PROCEDURE
   856
   857 				; optimize OK (JOY), line = 20
   858
   859 22CE A9 0C			lda #$0C
   860 22D0 85 FF			sta GLOBALS.BTMP1
   861
   862 				; optimize OK (JOY), line = 21
   863
   864 22D2 A9 01			lda #$01
   865 22D4 85 FD			sta GLOBALS.B1I
   866
   867 22D6			l_0117
   868 				; --- ForToDoCondition
   869
   870 				; optimize OK (JOY), line = 22
   871
   872 22D6 A5 04			lda JOYDIRECTION
   873 22D8 25 FF			and GLOBALS.BTMP1
   874 22DA 8D 0B 25			sta @CASETMP_0003
   875 22DD C9 04			cmp #$04
   876 22DF D0 20			jne l_0136
   877 22E1			@
   878
   879 				; optimize OK (JOY), line = 24
   880
   881 22E1 A5 01			lda SPRITES.BHPOSP1
   882 22E3 C9 B0			cmp #$B0
   883 22E5 B0 17			jcs l_0148
   884
   885 				; optimize OK (JOY), line = 25
   886
   887 22E7 A5 00			lda SPRITES.WSHIPX
   888 22E9 18 69 02			add #$02
   889 22EC 85 00			sta SPRITES.WSHIPX
   890 22EE A5 01			lda SPRITES.WSHIPX+1
   891 22F0 69 02			adc #$02
   892 22F2 85 01			sta SPRITES.WSHIPX+1
   893 22F4 A5 00			lda SPRITES.WSHIPX
   894 22F6 8D 00 D0			sta GLOBALS.HPOSP01
   895 22F9 A5 01			lda SPRITES.WSHIPX+1
   896 22FB 8D 01 D0			sta GLOBALS.HPOSP01+1
   897 22FE			l_0148
   898
   899 22FE 4C 55 23			jmp a_0003
   900 2301			l_0136
   901 2301 C9 08			cmp #$08
   902 2303 D0 20			jne l_015A
   903 2305			@
   904
   905 				; optimize OK (JOY), line = 29
   906
   907 2305 A5 00			lda SPRITES.BHPOSP0
   908 2307 C9 31			cmp #$31
   909 2309 90 17			jcc l_016C
   910
   911 				; optimize OK (JOY), line = 30
   912
   913 230B A5 00			lda SPRITES.WSHIPX
   914 230D 38 E9 02			sub #$02
   915 2310 85 00			sta SPRITES.WSHIPX
   916 2312 A5 01			lda SPRITES.WSHIPX+1
   917 2314 E9 02			sbc #$02
   918 2316 85 01			sta SPRITES.WSHIPX+1
   919 2318 A5 00			lda SPRITES.WSHIPX
   920 231A 8D 00 D0			sta GLOBALS.HPOSP01
   921 231D A5 01			lda SPRITES.WSHIPX+1
   922 231F 8D 01 D0			sta GLOBALS.HPOSP01+1
   923 2322			l_016C
   924
   925 2322 4C 55 23			jmp a_0003
   926 2325			l_015A
   927 2325 C9 02			cmp #$02
   928 2327 D0 18			jne l_017E
   929 2329			@
   930
   931 				; optimize OK (JOY), line = 34
   932
   933 2329 A5 02			lda SPRITES.BSHIPY
   934 232B C9 21			cmp #$21
   935 232D 90 0F			jcc l_0190
   936
   937 				; optimize OK (JOY), line = 35
   938
   939 232F 18 69 06			add #$06
   940 2332 85 03			sta SPRITES.BSHIPYCLEAR
   941 2334 A5 02			lda SPRITES.BSHIPY
   942 2336 38 E9 02			sub #$02
   943 2339 85 02			sta SPRITES.BSHIPY
   944
   945 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 36
   946
   947 233B 20 07 22			jsr SPRITES.COPYSHIP
   948 233E			l_0190
   949
   950 233E 4C 55 23			jmp a_0003
   951 2341			l_017E
   952 2341 C9 01			cmp #$01
   953 2343 D0 10			jne l_01A8
   954 2345			@
   955
   956 				; optimize OK (JOY), line = 40
   957
   958 2345 A5 02			lda SPRITES.BSHIPY
   959 2347 C9 A8			cmp #$A8
   960 2349 B0 0A			jcs l_01BA
   961
   962 				; optimize OK (JOY), line = 41
   963
   964 234B 85 03			sta SPRITES.BSHIPYCLEAR
   965 234D 18 69 02			add #$02
   966 2350 85 02			sta SPRITES.BSHIPY
   967
   968 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 42
   969
   970 2352 20 07 22			jsr SPRITES.COPYSHIP
   971 2355			l_01BA
   972
   973 2355			l_01A8
   974 2355			a_0003
   975
   976 				; optimize OK (JOY), line = 46
   977
   978 2355 A9 03			lda #$03
   979 2357 85 FF			sta GLOBALS.BTMP1
   980
   981 				; --- ForToDoEpilog
   982 2359 C6 FD			dec GLOBALS.B1I
   983 235B 30 03 4C D6 22		jpl l_0117
   984 2360			l_0125
   985
   986 				; ------------------------------------------------------------
   987
   988 = 0000			@FORTMP_0114	= $00
   989 = 250B			@CASETMP_0003	= DATAORIGIN+$000F
   990
   991 = 250B			@VarData	= @CASETMP_0003
   992 = 0001			@VarDataSize	= 1
   993
   994 2360			@exit
   995 					.ifdef @new
   996 					lda <@VarData
   997 					sta :ztmp
   998 					lda >@VarData
   999 					ldy #@VarDataSize-1
  1000 					jmp @FreeMem
  1001 					els
  1002 2360 60				rts						; ret
  1003 					eif
  1004 				.endl
  1005
  1006 				; ------------------------------------------------------------
  1007 				; ------------------------------------------------------------
  1008 2361			@UnitInit
  1009
  1010 2361 60				rts
  1011
  1012 				; ------------------------------------------------------------
  1013
  1014 = 0004			JOYDIRECTION	= $04
  1015
  1016 				.endl							; UNIT JOY
  1017
  1018 2362			.local	VBI						; PROCEDURE | INTERRUPT
  1019
  1020 				; ---------------------  ASM Block 055  ---------------------
  1021
  1022 2362 48 8A 48 98 48	 phr 
  1023
  1024 				; ---------------------  ASM Block 056  ---------------------
  1025
  1026 2367 68 A8 68 AA 68	 plr 
  1027 236C 40				rti						; ret
  1028 				.endl
  1029
  1030 236D			.local	JOYHANDLER					; PROCEDURE | INTERRUPT
  1031
  1032 				; ---------------------  ASM Block 057  ---------------------
  1033
  1034 236D 48 8A 48 98 48	 phr 
  1035
  1036 				; ---------------------  ASM Block 058  ---------------------
  1037
  1038 2372 8D 0A D4		 sta WSYNC 
  1039
  1040 				; optimize OK (main.pas), line = 30
  1041
  1042 2375 A9 0F			lda #$0F
  1043 2377 8D 1A D0			sta GLOBALS.COLBK
  1044
  1045 				; optimize OK (main.pas), line = 32
  1046
  1047 237A AD 00 D3			lda GLOBALS.PORTA
  1048 237D 85 04			sta JOY.JOYDIRECTION
  1049
  1050 				; optimize OK (main.pas), line = 33
  1051
  1052 237F 29 0F			and #$0F
  1053 2381 C9 0F			cmp #$0F
  1054 2383 F0 03			jeq l_01FE
  1055 2385 20 CE 22			jsr JOY.MOVESHIP
  1056 2388			l_01FE
  1057
  1058 				; optimize OK (main.pas), line = 35
  1059
  1060 2388 A9 00			lda #$00
  1061 238A 8D 1A D0			sta GLOBALS.COLBK
  1062
  1063 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 37
  1064
  1065 238D E8				inx
  1066 238E AD 0E 25 95 98		mva PSTARS :STACKORIGIN,x
  1067 2393 AD 0F 25 95 A8		mva PSTARS+1 :STACKORIGIN+STACKWIDTH,x
  1068 2398 20 C7 21			jsr SYS.SETDLI
  1069
  1070 				; ---------------------  ASM Block 059  ---------------------
  1071
  1072 239B 68 A8 68 AA 68	 plr 
  1073 23A0 40				rti						; ret
  1074 				.endl
  1075
  1076 23A1			.local	STARS						; PROCEDURE | INTERRUPT
  1077
  1078 				; ---------------------  ASM Block 060  ---------------------
  1079
  1080 23A1 48 8A 48 98 48	 phr 
  1081
  1082 				; optimize OK (main.pas), line = 46
  1083
  1084 23A6 A9 7C			lda #$7C
  1085 23A8 85 FD			sta GLOBALS.B1I
  1086
  1087 23AA			l_0216
  1088 				; --- ForToDoCondition
  1089
  1090 				; ---------------------  ASM Block 061  ---------------------
  1091
  1092 23AA 8D 0A D4		 sta WSYNC 
  1093
  1094 				; optimize OK (main.pas), line = 48
  1095
  1096 23AD A4 FD			ldy GLOBALS.B1I
  1097 23AF B9 00 12			lda adr.ASTARS,y
  1098 23B2 8D 07 D0			sta GLOBALS.HPOSM3
  1099
  1100 				; optimize OK (main.pas), line = 49
  1101
  1102 23B5 B9 00 12			lda adr.ASTARS,y
  1103 23B8 38 F9 7D 12			sub adr.ASPEED,y
  1104 23BC 99 00 12			sta adr.ASTARS,y
  1105
  1106 				; optimize OK (main.pas), line = 50
  1107
  1108 23BF AD 0A D2			lda SYSTEM.RND
  1109 23C2 8D 15 D0			sta GLOBALS.COLPM3
  1110
  1111 				; --- ForToDoEpilog
  1112 23C5 C6 FD			dec GLOBALS.B1I
  1113 23C7 10 E1			jpl l_0216
  1114 23C9			l_0224
  1115
  1116 				; optimize OK (main.pas), line = 55
  1117
  1118 23C9 A5 14			lda GLOBALS.RTCLOK
  1119 23CB 29 01			and #$01
  1120 23CD D0 25			jne l_0257
  1121
  1122 				; optimize OK (main.pas), line = 56
  1123
  1124 23CF AD 04 11			lda GLOBALS.DL2LMS
  1125 23D2 18 69 03			add #$03
  1126 23D5 85 A1			sta :STACKORIGIN+9
  1127 23D7 AD 05 11			lda GLOBALS.DL2LMS+1
  1128 23DA 69 00			adc #$00
  1129 23DC 85 B1			sta :STACKORIGIN+STACKWIDTH+9
  1130 23DE AD 0A D2			lda SYSTEM.RND
  1131 23E1 29 0F			and #$0F
  1132 23E3 20 C8 20			jsr @mul40
  1133 23E6 18 65 A1			add :STACKORIGIN+9
  1134 23E9 A8				tay
  1135 23EA A5 B1			lda :STACKORIGIN+STACKWIDTH+9
  1136 23EC 65 85			adc :eax+1
  1137 23EE 85 91			sta :bp+1
  1138 23F0 A9 02			lda #$02
  1139 23F2 91 90			sta (:bp),y
  1140 23F4			l_0257
  1141
  1142 				; optimize OK (main.pas), line = 59
  1143
  1144 23F4 AD 05 11			lda GLOBALS.DL2LMS+1
  1145 23F7 C9 E0			cmp #$E0
  1146 23F9 90 17			jcc l_0281
  1147 23FB D0 07			bne @+
  1148 23FD AD 04 11			lda GLOBALS.DL2LMS
  1149 2400 C9 01			cmp #$01
  1150 2402 90 0E			jcc l_0281
  1151 2404			@
  1152 2404 AD 04 11 D0 03 CE + 	dew GLOBALS.DL2LMS
  1153 240F 4C 1C 24			jmp l_028F
  1154 2412			l_0281
  1155 2412 A9 3F			lda #$3F
  1156 2414 8D 04 11			sta GLOBALS.DL2LMS
  1157 2417 A9 EC			lda #$EC
  1158 2419 8D 05 11			sta GLOBALS.DL2LMS+1
  1159 241C			l_028F
  1160
  1161 				; optimize OK (main.pas), line = 61
  1162
  1163 241C AD 04 11			lda GLOBALS.DL2LMS
  1164 241F 85 FA			sta GLOBALS.WTMP1
  1165 2421 AD 05 11			lda GLOBALS.DL2LMS+1
  1166 2424 85 FB			sta GLOBALS.WTMP1+1
  1167
  1168 				; ---------------------  ASM Block 062  ---------------------
  1169
  1170
  1171 2426 A2 15		        ldx #GAME_SCREEN_ROWS
  1172 2428 A0 00		        ldy #0
  1173 242A 98			  clr:  tya
  1174 242B 91 FA		        sta (GLOBALS.WTMP1),y
  1175 242D A5 FA		        lda GLOBALS.WTMP1
  1176 242F 18 69 28		        add #40
  1177 2432 85 FA		        sta GLOBALS.WTMP1
  1178 2434 90 02		        bcc @+
  1179 2436 E6 FB		        inc GLOBALS.WTMP1+1
  1180 2438 CA			  @:    dex
  1181 2439 10 EF		        bpl clr
  1182 				  
  1183
  1184 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 79
  1185
  1186 243B E8				inx
  1187 243C AD 0C 25 95 98		mva PJOY :STACKORIGIN,x
  1188 2441 AD 0D 25 95 A8		mva PJOY+1 :STACKORIGIN+STACKWIDTH,x
  1189 2446 20 C7 21			jsr SYS.SETDLI
  1190
  1191 				; ---------------------  ASM Block 063  ---------------------
  1192
  1193 2449 68 A8 68 AA 68	 plr 
  1194
  1195 				; ------------------------------------------------------------
  1196
  1197 = 0000			@FORTMP_0213	= $00
  1198 244E 40				rti						; ret
  1199 				.endl
  1200
  1201 244F			.local	INIT						; PROCEDURE
  1202
  1203 				; optimize FAIL ('SYSTEM.PAUSE_0078', main.pas), line = 86
  1204
  1205 244F 20 96 21			jsr SYSTEM.PAUSE_0078
  1206 2452 A9 00			lda #$00
  1207 2454 8D 00 D4			sta GLOBALS.DMACTL
  1208 2457 20 DF 21			jsr SYS.SYSTEMOFF
  1209
  1210 				; optimize OK (main.pas), line = 88
  1211
  1212 245A A9 18			lda #$18
  1213 245C 8D 09 D4			sta GLOBALS.CHBAS
  1214
  1215 				; optimize OK (main.pas), line = 90
  1216
  1217 245F A9 3F			lda #$3F
  1218 2461 85 88			sta :edx
  1219 2463 A9 EC			lda #$EC
  1220 2465 85 89			sta :edx+1
  1221 2467 A9 C0			lda #$C0
  1222 2469 85 8C			sta :ecx
  1223 246B A9 03			lda #$03
  1224 246D 85 8D			sta :ecx+1
  1225 246F A9 00			lda #$00
  1226 2471 85 84			sta :eax
  1227 2473 20 80 20			jsr @fill
  1228
  1229 				; optimize OK (main.pas), line = 92
  1230
  1231 2476 A9 7C			lda #$7C
  1232 2478 85 FD			sta GLOBALS.B1I
  1233
  1234 247A			l_02B6
  1235 				; --- ForToDoCondition
  1236
  1237 				; optimize OK (main.pas), line = 93
  1238
  1239 247A A4 FD			ldy GLOBALS.B1I
  1240 247C AD 0A D2			lda SYSTEM.RND
  1241 247F 99 00 12			sta adr.ASTARS,y
  1242
  1243 				; optimize OK (main.pas), line = 94
  1244
  1245 2482 29 03			and #$03
  1246 2484 18 69 01			add #$01
  1247 2487 99 7D 12			sta adr.ASPEED,y
  1248
  1249 				; --- ForToDoEpilog
  1250 248A C6 FD			dec GLOBALS.B1I
  1251 248C 10 EC			jpl l_02B6
  1252 248E			l_02C4
  1253
  1254 				; optimize FAIL ('SPRITES.INIT', main.pas), line = 97
  1255
  1256 248E 20 5E 22			jsr SPRITES.INIT
  1257
  1258 				; optimize FAIL ('GR.MODE2', main.pas), line = 98
  1259
  1260 2491 20 FB 21			jsr GR.MODE2
  1261 2494 A9 00			lda #$00
  1262 2496 8D 1A D0			sta GLOBALS.COLBK
  1263 2499 A9 02			lda #$02
  1264 249B 8D 18 D0			sta GLOBALS.COLPF2
  1265
  1266 				; optimize OK (main.pas), line = 99
  1267
  1268 249E AD 02 D3			lda GLOBALS.PACTL
  1269 24A1 09 04			ora #$04
  1270 24A3 8D 02 D3			sta GLOBALS.PACTL
  1271
  1272 				; optimize OK (main.pas), line = 100
  1273
  1274 24A6 A9 6D			lda <JOYHANDLER
  1275 24A8 8D 0C 25			sta PJOY
  1276 24AB A9 23			lda >JOYHANDLER
  1277 24AD 8D 0D 25			sta PJOY+1
  1278 24B0 A9 A1			lda <STARS
  1279 24B2 8D 0E 25			sta PSTARS
  1280 24B5 A9 23			lda >STARS
  1281 24B7 8D 0F 25			sta PSTARS+1
  1282
  1283 				; optimize FAIL ('SYS.SETVBI', main.pas), line = 102
  1284
  1285 24BA E8				inx
  1286 24BB A9 62 95 98			mva <VBI :STACKORIGIN,x
  1287 24BF A9 23 95 A8			mva >VBI :STACKORIGIN+STACKWIDTH,x
  1288 24C3 20 AF 21			jsr SYS.SETVBI
  1289
  1290 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 103
  1291
  1292 24C6 E8				inx
  1293 24C7 A9 6D 95 98			mva <JOYHANDLER :STACKORIGIN,x
  1294 24CB A9 23 95 A8			mva >JOYHANDLER :STACKORIGIN+STACKWIDTH,x
  1295 24CF 20 C7 21			jsr SYS.SETDLI
  1296
  1297 				; optimize FAIL ('SYSTEM.PAUSE_0078', main.pas), line = 105
  1298
  1299 24D2 20 96 21			jsr SYSTEM.PAUSE_0078
  1300 24D5 A9 3E			lda #$3E
  1301 24D7 8D 00 D4			sta GLOBALS.DMACTL
  1302
  1303 				; ------------------------------------------------------------
  1304
  1305 = 0000			@FORTMP_02B3	= $00
  1306 24DA			@exit
  1307 					.ifdef @new
  1308 					lda <@VarData
  1309 					sta :ztmp
  1310 					lda >@VarData
  1311 					ldy #@VarDataSize-1
  1312 					jmp @FreeMem
  1313 					els
  1314 24DA 60				rts						; ret
  1315 					eif
  1316 				.endl
  1317 24DB			l_0007
  1318
  1319 				; optimize FAIL ('INIT', main.pas), line = 109
  1320
  1321 24DB 20 4F 24			jsr INIT
  1322
  1323 				; --- RepeatUntilProlog
  1324 24DE			l_0307
  1325
  1326 				; optimize OK (main.pas), line = 110
  1327
  1328 24DE 4C DE 24			jmp l_0307
  1329
  1330 				; ------------------------------------------------------------
  1331
  1332 = 1000			PM_ADR	= $1000
  1333 = 1300			M0_ADR	= $1300
  1334 = 1400			P0_ADR	= $1400
  1335 = 1500			P1_ADR	= $1500
  1336 = 1000			GFX_SHIP_ADR	= $1000
  1337 = 0008			GFX_SHIP_SEG	= $08
  1338 = 1800			GFX_FONTS_ADR	= $1800
  1339 = 1100			DL_2	= $1100
  1340 = EC3F			GAME_LMS	= $EC3F
  1341 = E000			GAME_LMS_EMD	= $E000
  1342 = 0015			GAME_SCREEN_ROWS	= $15
  1343 = 0E0E			SHIP_COL	= $0E0E
  1344 = 0030			SHIP_LEFT_LIMIT	= $30
  1345 = 00B0			SHIP_RIGHT_LIMIT	= $B0
  1346 = 0020			SHIP_TOP_LIMIT	= $20
  1347 = 00A8			SHIP_BOTTOM_LIMIT	= $A8
  1348 = 0202			SHIP_X_STEP	= $0202
  1349 = 0008			JOY_LEFT	= $08
  1350 = 0004			JOY_RIGHT	= $04
  1351 = 0002			JOY_UP	= $02
  1352 = 0001			JOY_DOWN	= $01
  1353 = 1200			adr.ASTARS	= $1200
  1354 24E1			.var ASTARS	= adr.ASTARS .word
  1355 = 127D			adr.ASPEED	= $127D
  1356 24E1			.var ASPEED	= adr.ASPEED .word
  1357 = 250C			PJOY	= DATAORIGIN+$0010
  1358 = 250E			PSTARS	= DATAORIGIN+$0012
  1359 24E1			@exit
  1360
  1361 24E1 A2 00		@halt	ldx #$00
  1362 24E3 9A				txs
  1363 					.ifdef MAIN.@DEFINES.ROMOFF
  1364 					inc portb
  1365 					.endif
  1366
  1367 24E4 A0 01			ldy #$01
  1368
  1369 24E6 60				rts
  1370
  1371 				; ------------------------------------------------------------
  1372
  1373 24E7 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1374
  1375 				; ------------------------------------------------------------
  1376
  1377 24F7			.local	@DEFINES
  1378 24F7			ATARI
  1379 				.endl
  1380
  1381 24F7			.local	@RESOURCE
  1382 				.endl
  1383
  1384 = 24F7 00 12		ASTARS
  1384 = 24F9 7D 12		ASPEED
  1384 				.endl							; MAIN
  1385
  1386 				; ------------------------------------------------------------
  1387 				; ------------------------------------------------------------
  1388
  1389 				.macro	UNITINITIALIZATION
  1390 				
  1391 					.ifdef MAIN.SYSTEM.@UnitInit
  1392 					jsr MAIN.SYSTEM.@UnitInit
  1393 					eif
  1394 				
  1395 					.ifdef MAIN.GLOBALS.@UnitInit
  1396 					jsr MAIN.GLOBALS.@UnitInit
  1397 					eif
  1398 				
  1399 					.ifdef MAIN.SYS.@UnitInit
  1400 					jsr MAIN.SYS.@UnitInit
  1401 					eif
  1402 				
  1403 					.ifdef MAIN.GR.@UnitInit
  1404 					jsr MAIN.GR.@UnitInit
  1405 					eif
  1406 				
  1407 					.ifdef MAIN.SPRITES.@UnitInit
  1408 					jsr MAIN.SPRITES.@UnitInit
  1409 					eif
  1410 				
  1411 					.ifdef MAIN.JOY.@UnitInit
  1412 					jsr MAIN.JOY.@UnitInit
  1413 					eif
  1414 				.endm
  1415
  1416 				; ------------------------------------------------------------
  1417
  1418 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1419 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1419 				SYSTEM: $2129..$21A0
  1420 					eif
  1421
  1422 					ift .SIZEOF(MAIN.GLOBALS) > 0
  1423 					.print 'GLOBALS: ',MAIN.GLOBALS,'..',MAIN.GLOBALS+.SIZEOF(MAIN.GLOBALS)-1
  1424 					eif
  1425
  1426 					ift .SIZEOF(MAIN.SYS) > 0
  1427 					.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
  1427 				SYS: $21A1..$21FA
  1428 					eif
  1429
  1430 					ift .SIZEOF(MAIN.GR) > 0
  1431 					.print 'GR: ',MAIN.GR,'..',MAIN.GR+.SIZEOF(MAIN.GR)-1
  1431 				GR: $21FB..$2206
  1432 					eif
  1433
  1434 					ift .SIZEOF(MAIN.SPRITES) > 0
  1435 					.print 'SPRITES: ',MAIN.SPRITES,'..',MAIN.SPRITES+.SIZEOF(MAIN.SPRITES)-1
  1435 				SPRITES: $2207..$22CD
  1436 					eif
  1437
  1438 					ift .SIZEOF(MAIN.JOY) > 0
  1439 					.print 'JOY: ',MAIN.JOY,'..',MAIN.JOY+.SIZEOF(MAIN.JOY)-1
  1439 				JOY: $22CE..$2361
  1440 					eif
  1441
  1442 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1442 				CODE: $2000..$24F6
  1443
  1444 				; ------------------------------------------------------------
  1445
  1446 24FB				.align $04
  1447
  1448 24FC			DATAORIGIN
  1449 24FC-2501> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  1450
  1451 = 0006			VARINITSIZE	= *-DATAORIGIN
  1452 = 0014			VARDATASIZE	= 20
  1453
  1454 = 2510			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1455
  1456 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1456 				DATA: $24FC..$2510
  1457
  1458 02E0-02E1> ED 20			run START
  1459
  1460 				; ------------------------------------------------------------
  1461
  1462 				.macro	STATICDATA
  1463 				.endm
  1464
  1465 					end
