mads 2.1.1
  1133 					opt l+
    98 = 0000				?EXTDETECT = 0
    99 = 0000				?VBXDETECT = 0
   100
   101 2075				RCASM 'res/gr_dl.asm' GLOBALS.DL_2 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 001A			len = .sizeof(_GLOBALS.DL_2)
     6 				mcpy	ift main.GLOBALS.DL_2+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 11 +  MWA #MAIN.GLOBALS.DL_2 ECX
    13 2088 A9 1A 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: const.inc
     1 = 1000			PM_ADR              = $1000;                      // players & missiles memory (2K) start address
     2 = 1300			M0_ADR              = PM_ADR + $300;              // missile 0 start memory address
     3 = 1400			P0_ADR              = PM_ADR + $400;              // player 0 start memory address
     4 = 1500			P1_ADR              = PM_ADR + $500;              // player 1 start memory address
     5 = 1000			GFX_SHIP_ADR        = $1000;                      // ship gfx memory start address, ship size = 20 bytes, 16 bytes for gfx and 4 bytes fo top/bottom empty rows
     6 = 0008			GFX_SHIP_SEG        = 8;                          // ship gfx 10 byte segment, 10B for P0 & 10B for P1
     8 = 1100			DL_2                = $1100;                      // display list memory start address for ANTIC mode 2
     9 = EC3F			GAME_LMS            = $efff - $3c0;               // Load Memory Scan address
    10 = E000			GAME_LMS_EMD        = $e000;
    11 = 0015			GAME_SCREEN_ROWS    = 21;
    13 = 0E0E			SHIP_COL            = $0e0e;
    14 = 0030			SHIP_LEFT_LIMIT     = 48;
    15 = 00B0			SHIP_RIGHT_LIMIT    = SHIP_LEFT_LIMIT + (16 * 8);
    16 = 0020			SHIP_TOP_LIMIT      = 32;
    17 = 00A8			SHIP_BOTTOM_LIMIT   = 8 * GAME_SCREEN_ROWS;
    18 = 0202			SHIP_X_STEP         = $0202;
    20 = 0008			JOY_LEFT            = %1000;
    21 = 0004			JOY_RIGHT           = %0100;
    22 = 0002			JOY_UP              = %0010;
    23 = 0001			JOY_DOWN            = %0001;
     3 1100			dl2
     4 1100 F0 70 F0		    .byte $f0,$70,$f0
     5 1103 42 3F EC		    .byte $42,a(GAME_LMS)
     6 1106 02 02 02 02 02 02 + :17 .byte 2
     7 1117 41 00 11		    .byte $41,a(dl2)
    23 					.print '$R RCASM   ',main.GLOBALS.DL_2,'..',main.GLOBALS.DL_2+len-1," 'res/gr_dl.asm'"
    23 				$R RCASM   $1100..$1119 'res/gr_dl.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: main.a65
   102 20B0				RCDATA 'res/gfx_ship.bin' GLOBALS.GFX_SHIP_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0010			len = .filesize('res/gfx_ship.bin')
    28 20B0				org main.GLOBALS.GFX_SHIP_ADR
    30 1000-100F> 70 7B 1E 3F + 	ins 'res/gfx_ship.bin'
    32 					.print '$R RCDATA  ',main.GLOBALS.GFX_SHIP_ADR,'..',*-1," 'res/gfx_ship.bin'"
    32 				$R RCDATA  $1000..$100F 'res/gfx_ship.bin'
Source: main.a65
   103 				.endl
   104
   105 				; ------------------------------------------------------------
   106
   107 1010				org CODEORIGIN
   108
   109 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
Source: main.a65
   110
   111 				; ------------------------------------------------------------
   112
   113 2000			RTLIB
   114 2000				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
   148 					opt l+
   115
   116 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   116 				ZPAGE: $0080..$00D7
   117
   118 				.print 'RTLIB: ',RTLIB,'..',*-1
   118 				RTLIB: $2000..$20EC
   119
   120 				; ------------------------------------------------------------
   121
   122 20ED			START
   123 20ED BA				tsx
   124 20EE 8E DD 24			stx MAIN.@halt+1
   125
   126 					.ifdef fmulinit
   127 					fmulinit
   128 					eif
   129
   130 = 000E			VLEN	= VARDATASIZE-VARINITSIZE
   131 = 24FE			VADR	= DATAORIGIN+VARINITSIZE
   132
   133 					ift VADR > $BFFF
   134 					ert 'Invalid memory address range ',VADR
   135 					eli (VLEN>0) && (VLEN<=256)
   136 20F1 A2 F2			ldx #256-VLEN
   137 20F3 A9 00			lda #$00
   138 20F5 9D 0C 24 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   139 					eli VLEN>0
   140 					@fill #VADR #VLEN #$00
   141 					eif
   142
   143 20FB A9 0C 85 82 A9 25 + 	mwa #PROGRAMSTACK psptr
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 					icl 'atari\romoff.asm'
   147 					.endif
   148
   149 2103 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   150 2105 BD 40 03 9D E2 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   151
   152 210E E8				inx						; X = 0
   153 210F 86 90			stx bp						; BP = 0
   154
   155 2111 8E 08 D2			stx audctl					; reset POKEY
   156 2114 A9 03			lda #3
   157 2116 8D 0F D2			sta skctl
   158
   159 2119 CA				dex						; X = 255
   160
   161 211A				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
    11 211A 20 FA 21			jsr MAIN.SYS.@UnitInit
    15 211D 20 06 22			jsr MAIN.GR.@UnitInit
    19 2120 20 CD 22			jsr MAIN.SPRITES.@UnitInit
    23 2123 20 61 23			jsr MAIN.JOY.@UnitInit
   162
   163 2126			.local	MAIN						; PROCEDURE
   164
   165 2126 4C D6 24			jmp l_0007
   166
   167 				; ------------------------------------------------------------
   168
   169 2129			.local	SYSTEM						; UNIT
   170
   171 2129			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   172
   173 				; ------------------------------------------------------------
   174
   175 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   176 				; as Pointer
   177 2129 B5 98			lda :STACKORIGIN,x
   178 212B 85 8C			sta VALUE
   179 212D CA				dex
   180
   181 				; ------------------------------------------------------------
   182
   183 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   184 				; as Pointer
   185 212E B5 98			lda :STACKORIGIN,x
   186 2130 85 88			sta A
   187 2132 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   188 2134 85 89			sta A+1
   189 2136 CA				dex
   190
   191 				; ---------------------  ASM Block 021  ---------------------
   192
   193 2137 A0 00			ldy #0
   194 2139 A5 8C 91 88			mva value (edx),y
   195
   196
   197 				; ------------------------------------------------------------
   198
   199 = 0088			A	= edx
   200 = 008C			VALUE	= ecx
   201 213D			@exit
   202 					.ifdef @new
   203 					lda <@VarData
   204 					sta :ztmp
   205 					lda >@VarData
   206 					ldy #@VarDataSize-1
   207 					jmp @FreeMem
   208 					els
   209 213D 60				rts						; ret
   210 					eif
   211 				.endl
   212
   213 213E			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   214
   215 				; ------------------------------------------------------------
   216
   217 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   218 				; as Pointer
   219 213E B5 98			lda :STACKORIGIN,x
   220 2140 85 8C			sta VALUE
   221 2142 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   222 2144 85 8D			sta VALUE+1
   223 2146 CA				dex
   224
   225 				; ------------------------------------------------------------
   226
   227 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   228 				; as Pointer
   229 2147 B5 98			lda :STACKORIGIN,x
   230 2149 85 88			sta A
   231 214B B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   232 214D 85 89			sta A+1
   233 214F CA				dex
   234
   235 				; ---------------------  ASM Block 022  ---------------------
   236
   237 2150 A0 00			ldy #0
   238 2152 A5 8C 91 88			mva value (edx),y
   239 2156 C8				iny
   240 2157 A5 8D 91 88			mva value+1 (edx),y
   241
   242
   243 				; ------------------------------------------------------------
   244
   245 = 0088			A	= edx
   246 = 008C			VALUE	= ecx
   247 215B			@exit
   248 					.ifdef @new
   249 					lda <@VarData
   250 					sta :ztmp
   251 					lda >@VarData
   252 					ldy #@VarDataSize-1
   253 					jmp @FreeMem
   254 					els
   255 215B 60				rts						; ret
   256 					eif
   257 				.endl
   258
   259 215C			.local	FILLBYTE_0050					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   260
   261 				; ------------------------------------------------------------
   262
   263 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   264 				; as Pointer
   265 215C B5 98			lda :STACKORIGIN,x
   266 215E 85 84			sta VALUE
   267 2160 CA				dex
   268
   269 				; ------------------------------------------------------------
   270
   271 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   272 				; as Pointer
   273 2161 B5 98			lda :STACKORIGIN,x
   274 2163 85 8C			sta COUNT
   275 2165 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   276 2167 85 8D			sta COUNT+1
   277 2169 CA				dex
   278
   279 				; ------------------------------------------------------------
   280
   281 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   282 				; as Pointer
   283 216A B5 98			lda :STACKORIGIN,x
   284 216C 85 88			sta A
   285 216E B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   286 2170 85 89			sta A+1
   287 2172 CA				dex
   288
   289 				; ---------------------  ASM Block 029  ---------------------
   290
   291 2173 20 80 20			jsr @fill
   292
   293
   294 				; ------------------------------------------------------------
   295
   296 = 0088			A	= edx
   297 = 008C			COUNT	= ecx
   298 = 0084			VALUE	= eax
   299 2176			@exit
   300 					.ifdef @new
   301 					lda <@VarData
   302 					sta :ztmp
   303 					lda >@VarData
   304 					ldy #@VarDataSize-1
   305 					jmp @FreeMem
   306 					els
   307 2176 60				rts						; ret
   308 					eif
   309 				.endl
   310
   311 2177			.local	MOVE_005A					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   312
   313 				; ------------------------------------------------------------
   314
   315 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   316 				; as Pointer
   317 2177 B5 98			lda :STACKORIGIN,x
   318 2179 85 84			sta COUNT
   319 217B B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   320 217D 85 85			sta COUNT+1
   321 217F CA				dex
   322
   323 				; ------------------------------------------------------------
   324
   325 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   326 				; as Pointer
   327 2180 B5 98			lda :STACKORIGIN,x
   328 2182 85 8C			sta DEST
   329 2184 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   330 2186 85 8D			sta DEST+1
   331 2188 CA				dex
   332
   333 				; ------------------------------------------------------------
   334
   335 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   336 				; as Pointer
   337 2189 B5 98			lda :STACKORIGIN,x
   338 218B 85 88			sta SOURCE
   339 218D B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   340 218F 85 89			sta SOURCE+1
   341 2191 CA				dex
   342
   343 				; ---------------------  ASM Block 031  ---------------------
   344
   345 2192 20 2B 20			jsr @move
   346
   347
   348 				; ------------------------------------------------------------
   349
   350 = 0088			SOURCE	= edx
   351 = 008C			DEST	= ecx
   352 = 0084			COUNT	= eax
   353 2195			@exit
   354 					.ifdef @new
   355 					lda <@VarData
   356 					sta :ztmp
   357 					lda >@VarData
   358 					ldy #@VarDataSize-1
   359 					jmp @FreeMem
   360 					els
   361 2195 60				rts						; ret
   362 					eif
   363 				.endl
   364
   365 2196			.local	PAUSE_0078					; PROCEDURE | ASSEMBLER | OVERLOAD
   366
   367 				; ---------------------  ASM Block 039  ---------------------
   368
   369 2196 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   370
   371 219C			@exit
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					els
   379 219C 60				rts						; ret
   380 					eif
   381 				.endl
   382
   383 				; ------------------------------------------------------------
   384
   385 = 0101			__PORTB_BANKS	= $0101
   386 = 0648			M_PI_2	= $0648
   387 = 0192			D_PI_2	= $0192
   388 = 0004			D_PI_180	= $04
   389 = 0000			MGTIA	= $00
   390 = 0080			MVBXE	= $80
   391 = 0000			VBXE_XDLADR	= $00
   392 = 0100			VBXE_BCBADR	= $0100
   393 = 1000			VBXE_MAPADR	= $1000
   394 = 5000			VBXE_OVRADR	= $5000
   395 = B000			VBXE_WINDOW	= $B000
   396 = 0000			IDLI	= $00
   397 = 0001			IVBL	= $01
   398 = 00FE			CH_DELCHR	= $FE
   399 = 009B			CH_ENTER	= $9B
   400 = 001B			CH_ESC	= $1B
   401 = 001C			CH_CURS_UP	= $1C
   402 = 001D			CH_CURS_DOWN	= $1D
   403 = 001E			CH_CURS_LEFT	= $1E
   404 = 001F			CH_CURS_RIGHT	= $1F
   405 = 007F			CH_TAB	= $7F
   406 = 009B			CH_EOL	= $9B
   407 = 007D			CH_CLR	= $7D
   408 = 00FD			CH_BELL	= $FD
   409 = 007E			CH_DEL	= $7E
   410 = 009C			CH_DELLINE	= $9C
   411 = 009D			CH_INSLINE	= $9D
   412 = 0000			COLOR_BLACK	= $00
   413 = 000E			COLOR_WHITE	= $0E
   414 = 0032			COLOR_RED	= $32
   415 = 0096			COLOR_CYAN	= $96
   416 = 0068			COLOR_VIOLET	= $68
   417 = 00C4			COLOR_GREEN	= $C4
   418 = 0074			COLOR_BLUE	= $74
   419 = 00EE			COLOR_YELLOW	= $EE
   420 = 0028			COLOR_ORANGE	= $28
   421 = 00E4			COLOR_BROWN	= $E4
   422 = 003C			COLOR_LIGHTRED	= $3C
   423 = 0004			COLOR_GRAY1	= $04
   424 = 0006			COLOR_GRAY2	= $06
   425 = 000A			COLOR_GRAY3	= $0A
   426 = 00CC			COLOR_LIGHTGREEN	= $CC
   427 = 007C			COLOR_LIGHTBLUE	= $7C
   428 = 0004			FMOPENREAD	= $04
   429 = 0008			FMOPENWRITE	= $08
   430 = 0009			FMOPENAPPEND	= $09
   431 = 000C			FMOPENREADWRITE	= $0C
   432 = 24F8			SCREENWIDTH	= DATAORIGIN+$0000
   433 = 24FA			SCREENHEIGHT	= DATAORIGIN+$0002
   434 = 24FC			DATESEPARATOR	= DATAORIGIN+$0004
   435 = D014			TVSYSTEM	= $D014
   436 = D20A			RND	= $D20A
   437 = 02C0			adr.PALETTE	= $02C0
   438 219D			.var PALETTE	= adr.PALETTE .word
   439 = D012			adr.HPALETTE	= $D012
   440 219D			.var HPALETTE	= adr.HPALETTE .word
   441 = 24FD			FILEMODE	= DATAORIGIN+$0005
   442 = 24FE			GRAPHMODE	= DATAORIGIN+$0006
   443 = 24FF			IORESULT	= DATAORIGIN+$0007
   444 = 2500			EOLN	= DATAORIGIN+$0008
   445 = 2501			RNDSEED	= DATAORIGIN+$0009
   446
   447 = 219D C0 02		PALETTE
   447 = 219F 12 D0		HPALETTE
   447 				.endl							; UNIT SYSTEM
   448
   449 				; ------------------------------------------------------------
   450
   451 21A1			.local	GLOBALS						; UNIT
   452
   453 				; ------------------------------------------------------------
   454
   455 = 1000			PM_ADR	= $1000
   456 = 1300			M0_ADR	= $1300
   457 = 1400			P0_ADR	= $1400
   458 = 1500			P1_ADR	= $1500
   459 = 1000			GFX_SHIP_ADR	= $1000
   460 = 0008			GFX_SHIP_SEG	= $08
   461 = 1100			DL_2	= $1100
   462 = EC3F			GAME_LMS	= $EC3F
   463 = E000			GAME_LMS_EMD	= $E000
   464 = 0015			GAME_SCREEN_ROWS	= $15
   465 = 0E0E			SHIP_COL	= $0E0E
   466 = 0030			SHIP_LEFT_LIMIT	= $30
   467 = 00B0			SHIP_RIGHT_LIMIT	= $B0
   468 = 0020			SHIP_TOP_LIMIT	= $20
   469 = 00A8			SHIP_BOTTOM_LIMIT	= $A8
   470 = 0202			SHIP_X_STEP	= $0202
   471 = 0008			JOY_LEFT	= $08
   472 = 0004			JOY_RIGHT	= $04
   473 = 0002			JOY_UP	= $02
   474 = 0001			JOY_DOWN	= $01
   475 = 0014			RTCLOK	= $14
   476 = D000			HPOSP0	= $D000
   477 = D001			HPOSP1	= $D001
   478 = D004			HPOSM0	= $D004
   479 = D005			HPOSM1	= $D005
   480 = D006			HPOSM2	= $D006
   481 = D007			HPOSM3	= $D007
   482 = D008			SIZEP0	= $D008
   483 = D009			SIZEP1	= $D009
   484 = D00A			SIZEP2	= $D00A
   485 = D00B			SIZEP3	= $D00B
   486 = D00C			SIZEM	= $D00C
   487 = D011			GRAFM	= $D011
   488 = D012			COLPM0	= $D012
   489 = D013			COLPM1	= $D013
   490 = D014			COLPM2	= $D014
   491 = D015			COLPM3	= $D015
   492 = D017			COLPF1	= $D017
   493 = D018			COLPF2	= $D018
   494 = D01A			COLBK	= $D01A
   495 = D01B			PRIOR	= $D01B
   496 = D01D			GRACTL	= $D01D
   497 = D20A			RND	= $D20A
   498 = D300			PORTA	= $D300
   499 = D301			PORTB	= $D301
   500 = D302			PACTL	= $D302
   501 = D400			DMACTL	= $D400
   502 = D402			DLIST	= $D402
   503 = D407			PMBASE	= $D407
   504 = D40A			WSYNC	= $D40A
   505 = D40B			VCOUNT	= $D40B
   506 = D40E			NMIEN	= $D40E
   507 = FFFA			NMIVEC	= $FFFA
   508 = D000			HPOSP01	= $D000
   509 = D008			SIZEP01	= $D008
   510 = D012			COLPM01	= $D012
   511 = 1104			DL2LMS	= $1104
   512 = 00FF			BTMP1	= $FF
   513 = 00FE			BTMP2	= $FE
   514 = 00FD			B1I	= $FD
   515 = 00FC			B2I	= $FC
   516 = 00FA			WTMP1	= $FA
   517 = 00F8			WTMP2	= $F8
   518
   519 				.endl							; UNIT GLOBALS
   520
   521 				; ------------------------------------------------------------
   522
   523 21A1			.local	SYS						; UNIT
   524
   525 21A1			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
   526
   527 				; ---------------------  ASM Block 049  ---------------------
   528
   529
   530 				      bit NMIST \ bpl vbi     ; check kind of interrupt
   530 21A1 2C 0F D4		      BIT NMIST 
   530 21A4 10 03		 BPL VBI     
   531 = 21A6			.def  :__dlijmp
   532 21A6 4C AE 21		      jmp __off               ; VDSLST
   533 21A9 E6 14		vbi:  inc RTCLOK+2
   534 = 21AB			.def  :__vbijmp
   535 21AB 4C AE 21		      jmp __off               ; VBIVEC
   536 = 21AE			.def  :__off
   537
   538 21AE 40				rti						; ret
   539 				.endl
   540
   541 21AF			.local	SETVBI						; PROCEDURE | ASSEMBLER
   542
   543 				; ------------------------------------------------------------
   544
   545 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   546 				; as Pointer
   547 21AF B5 98			lda :STACKORIGIN,x
   548 21B1 8D 03 25			sta A
   549 21B4 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   550 21B6 8D 04 25			sta A+1
   551 21B9 CA				dex
   552
   553 				; ---------------------  ASM Block 050  ---------------------
   554
   555
   556 21BA AD 03 25 8D AC 21 +   mwa a __vbijmp+1
   557
   558
   559 				; ------------------------------------------------------------
   560
   561 = 2503			A	= DATAORIGIN+$000B
   562
   563 = 2503			@VarData	= A
   564 = 0002			@VarDataSize	= 2
   565
   566 21C6			@exit
   567 					.ifdef @new
   568 					lda <@VarData
   569 					sta :ztmp
   570 					lda >@VarData
   571 					ldy #@VarDataSize-1
   572 					jmp @FreeMem
   573 					els
   574 21C6 60				rts						; ret
   575 					eif
   576 				.endl
   577
   578 21C7			.local	SETDLI						; PROCEDURE | ASSEMBLER
   579
   580 				; ------------------------------------------------------------
   581
   582 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   583 				; as Pointer
   584 21C7 B5 98			lda :STACKORIGIN,x
   585 21C9 8D 05 25			sta A
   586 21CC B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   587 21CE 8D 06 25			sta A+1
   588 21D1 CA				dex
   589
   590 				; ---------------------  ASM Block 051  ---------------------
   591
   592
   593 21D2 AD 05 25 8D A7 21 +   mwa a __dlijmp+1
   594
   595
   596 				; ------------------------------------------------------------
   597
   598 = 2505			A	= DATAORIGIN+$000D
   599
   600 = 2505			@VarData	= A
   601 = 0002			@VarDataSize	= 2
   602
   603 21DE			@exit
   604 					.ifdef @new
   605 					lda <@VarData
   606 					sta :ztmp
   607 					lda >@VarData
   608 					ldy #@VarDataSize-1
   609 					jmp @FreeMem
   610 					els
   611 21DE 60				rts						; ret
   612 					eif
   613 				.endl
   614
   615 21DF			.local	SYSTEMOFF					; PROCEDURE
   616
   617 				; ---------------------  ASM Block 054  ---------------------
   618
   619 21DF 78			 sei 
   620
   621 				; optimize OK (SYS), line = 63
   622
   623 21E0 A9 00			lda #$00
   624 21E2 8D 0E D4			sta GLOBALS.NMIEN
   625 21E5 A9 FE			lda #$FE
   626 21E7 8D 01 D3			sta GLOBALS.PORTB
   627 21EA A9 A1			lda <NMI
   628 21EC 8D FA FF			sta GLOBALS.NMIVEC
   629 21EF A9 21			lda >NMI
   630 21F1 8D FB FF			sta GLOBALS.NMIVEC+1
   631 21F4 A9 C0			lda #$C0
   632 21F6 8D 0E D4			sta GLOBALS.NMIEN
   633 21F9			@exit
   634 					.ifdef @new
   635 					lda <@VarData
   636 					sta :ztmp
   637 					lda >@VarData
   638 					ldy #@VarDataSize-1
   639 					jmp @FreeMem
   640 					els
   641 21F9 60				rts						; ret
   642 					eif
   643 				.endl
   644
   645 				; ------------------------------------------------------------
   646 				; ------------------------------------------------------------
   647 21FA			@UnitInit
   648
   649 21FA 60				rts
   650
   651 				; ------------------------------------------------------------
   652
   653 				.endl							; UNIT SYS
   654
   655 				; ------------------------------------------------------------
   656
   657 21FB			.local	GR						; UNIT
   658
   659 21FB			.local	MODE2						; PROCEDURE
   660
   661 				; optimize OK (GR), line = 17
   662
   663 21FB A9 00			lda #$00
   664 21FD 8D 02 D4			sta GLOBALS.DLIST
   665 2200 A9 11			lda #$11
   666 2202 8D 03 D4			sta GLOBALS.DLIST+1
   667 2205			@exit
   668 					.ifdef @new
   669 					lda <@VarData
   670 					sta :ztmp
   671 					lda >@VarData
   672 					ldy #@VarDataSize-1
   673 					jmp @FreeMem
   674 					els
   675 2205 60				rts						; ret
   676 					eif
   677 				.endl
   678
   679 				; ------------------------------------------------------------
   680 				; ------------------------------------------------------------
   681 2206			@UnitInit
   682
   683 2206 60				rts
   684
   685 				; ------------------------------------------------------------
   686
   687 				.endl							; UNIT GR
   688
   689 				; ------------------------------------------------------------
   690
   691 2207			.local	SPRITES						; UNIT
   692
   693 2207			.local	COPYSHIP					; PROCEDURE
   694
   695 				; optimize OK (SPRITES), line = 25
   696
   697 2207 A5 03			lda BSHIPYCLEAR
   698 2209 85 92			sta :bp2
   699 220B A9 14			lda #$14
   700 220D 85 93			sta :bp2+1
   701 220F A0 00			ldy #$00
   702 2211 98				tya
   703 2212 91 92			sta (:bp2),y
   704 2214 C8				iny
   705 2215 91 92			sta (:bp2),y
   706 2217 A5 03			lda BSHIPYCLEAR
   707 2219 85 92			sta :bp2
   708 221B A9 15			lda #$15
   709 221D 85 93			sta :bp2+1
   710 221F A0 00			ldy #$00
   711 2221 98				tya
   712 2222 91 92			sta (:bp2),y
   713 2224 C8				iny
   714 2225 91 92			sta (:bp2),y
   715
   716 				; optimize OK (SPRITES), line = 26
   717
   718 2227 A5 02			lda BSHIPY
   719 2229 85 8C			sta :ecx
   720 222B A9 14			lda #$14
   721 222D 85 8D			sta :ecx+1
   722 222F A9 00			lda #$00
   723 2231 85 88			sta :edx
   724 2233 A9 10			lda #$10
   725 2235 85 89			sta :edx+1
   726 2237 A9 08			lda #$08
   727 2239 85 84			sta :eax
   728 223B A9 00			lda #$00
   729 223D 85 85			sta :eax+1
   730 223F 20 2B 20			jsr @move
   731
   732 				; optimize OK (SPRITES), line = 27
   733
   734 2242 A5 02			lda BSHIPY
   735 2244 85 8C			sta :ecx
   736 2246 A9 15			lda #$15
   737 2248 85 8D			sta :ecx+1
   738 224A A9 08			lda #$08
   739 224C 85 88			sta :edx
   740 224E A9 10			lda #$10
   741 2250 85 89			sta :edx+1
   742 2252 A9 08			lda #$08
   743 2254 85 84			sta :eax
   744 2256 A9 00			lda #$00
   745 2258 85 85			sta :eax+1
   746 225A 20 2B 20			jsr @move
   747 225D			@exit
   748 					.ifdef @new
   749 					lda <@VarData
   750 					sta :ztmp
   751 					lda >@VarData
   752 					ldy #@VarDataSize-1
   753 					jmp @FreeMem
   754 					els
   755 225D 60				rts						; ret
   756 					eif
   757 				.endl
   758
   759 225E			.local	INIT						; PROCEDURE
   760
   761 				; optimize OK (SPRITES), line = 32
   762
   763 225E				.LOCAL
   764 225E A0 00			ldy #$00
   765 2260 98				tya
   766 2261 99 00 13 99 80 13 + fill	:10 sta $1300+#*$80,y
   767 227F C8				iny
   768 2280 10 DF			bpl fill
   769 					.ENDL
   770
   771 				; optimize OK (SPRITES), line = 33
   772
   773 2282 A0 70			ldy #256-$90
   774 2284 A9 FF			lda #$FF
   775 2286 99 B0 12 C8 D0 FA		sta:rne $1320+$90-256,y+
   776
   777 				; optimize OK (SPRITES), line = 35
   778
   779 228C A9 10			lda #$10
   780 228E 8D 07 D4			sta GLOBALS.PMBASE
   781
   782 				; optimize OK (SPRITES), line = 36
   783
   784 2291 A9 0A			lda #$0A
   785 2293 8D 15 D0			sta GLOBALS.COLPM3
   786 2296 A9 0E			lda #$0E
   787 2298 8D 12 D0			sta GLOBALS.COLPM01
   788 229B 8D 13 D0			sta GLOBALS.COLPM01+1
   789
   790 				; optimize OK (SPRITES), line = 37
   791
   792 229E A9 50			lda #$50
   793 22A0 85 02			sta BSHIPY
   794 22A2 85 03			sta BSHIPYCLEAR
   795
   796 				; optimize OK (SPRITES), line = 38
   797
   798 22A4 A9 30			lda #$30
   799 22A6 85 00			sta BHPOSP0
   800 22A8 A9 38			lda #$38
   801 22AA 85 01			sta BHPOSP1
   802 22AC A5 00			lda WSHIPX
   803 22AE 8D 00 D0			sta GLOBALS.HPOSP01
   804 22B1 A5 01			lda WSHIPX+1
   805 22B3 8D 01 D0			sta GLOBALS.HPOSP01+1
   806
   807 				; optimize OK (SPRITES), line = 39
   808
   809 22B6 A9 00			lda #$00
   810 22B8 8D 08 D0			sta GLOBALS.SIZEP01
   811 22BB 8D 09 D0			sta GLOBALS.SIZEP01+1
   812 22BE 8D 0C D0			sta GLOBALS.SIZEM
   813 22C1 8D 1B D0			sta GLOBALS.PRIOR
   814 22C4 A9 03			lda #$03
   815 22C6 8D 1D D0			sta GLOBALS.GRACTL
   816
   817 				; optimize FAIL ('COPYSHIP', SPRITES), line = 41
   818
   819 22C9 20 07 22			jsr COPYSHIP
   820 22CC			@exit
   821 					.ifdef @new
   822 					lda <@VarData
   823 					sta :ztmp
   824 					lda >@VarData
   825 					ldy #@VarDataSize-1
   826 					jmp @FreeMem
   827 					els
   828 22CC 60				rts						; ret
   829 					eif
   830 				.endl
   831
   832 				; ------------------------------------------------------------
   833 				; ------------------------------------------------------------
   834 22CD			@UnitInit
   835
   836 22CD 60				rts
   837
   838 				; ------------------------------------------------------------
   839
   840 = 0000			BHPOSP0	= $00
   841 = 0001			BHPOSP1	= $01
   842 = 0002			BSHIPY	= $02
   843 = 0003			BSHIPYCLEAR	= $03
   844 = 0000			WSHIPX	= $00
   845
   846 				.endl							; UNIT SPRITES
   847
   848 				; ------------------------------------------------------------
   849
   850 22CE			.local	JOY						; UNIT
   851
   852 22CE			.local	MOVESHIP					; PROCEDURE
   853
   854 				; optimize OK (JOY), line = 20
   855
   856 22CE A9 0C			lda #$0C
   857 22D0 85 FF			sta GLOBALS.BTMP1
   858
   859 				; optimize OK (JOY), line = 21
   860
   861 22D2 A9 01			lda #$01
   862 22D4 85 FD			sta GLOBALS.B1I
   863
   864 22D6			l_0117
   865 				; --- ForToDoCondition
   866
   867 				; optimize OK (JOY), line = 22
   868
   869 22D6 A5 04			lda JOYDIRECTION
   870 22D8 25 FF			and GLOBALS.BTMP1
   871 22DA 8D 07 25			sta @CASETMP_0003
   872 22DD C9 04			cmp #$04
   873 22DF D0 20			jne l_0136
   874 22E1			@
   875
   876 				; optimize OK (JOY), line = 24
   877
   878 22E1 A5 01			lda SPRITES.BHPOSP1
   879 22E3 C9 B0			cmp #$B0
   880 22E5 B0 17			jcs l_0148
   881
   882 				; optimize OK (JOY), line = 25
   883
   884 22E7 A5 00			lda SPRITES.WSHIPX
   885 22E9 18 69 02			add #$02
   886 22EC 85 00			sta SPRITES.WSHIPX
   887 22EE A5 01			lda SPRITES.WSHIPX+1
   888 22F0 69 02			adc #$02
   889 22F2 85 01			sta SPRITES.WSHIPX+1
   890 22F4 A5 00			lda SPRITES.WSHIPX
   891 22F6 8D 00 D0			sta GLOBALS.HPOSP01
   892 22F9 A5 01			lda SPRITES.WSHIPX+1
   893 22FB 8D 01 D0			sta GLOBALS.HPOSP01+1
   894 22FE			l_0148
   895
   896 22FE 4C 55 23			jmp a_0003
   897 2301			l_0136
   898 2301 C9 08			cmp #$08
   899 2303 D0 20			jne l_015A
   900 2305			@
   901
   902 				; optimize OK (JOY), line = 29
   903
   904 2305 A5 00			lda SPRITES.BHPOSP0
   905 2307 C9 31			cmp #$31
   906 2309 90 17			jcc l_016C
   907
   908 				; optimize OK (JOY), line = 30
   909
   910 230B A5 00			lda SPRITES.WSHIPX
   911 230D 38 E9 02			sub #$02
   912 2310 85 00			sta SPRITES.WSHIPX
   913 2312 A5 01			lda SPRITES.WSHIPX+1
   914 2314 E9 02			sbc #$02
   915 2316 85 01			sta SPRITES.WSHIPX+1
   916 2318 A5 00			lda SPRITES.WSHIPX
   917 231A 8D 00 D0			sta GLOBALS.HPOSP01
   918 231D A5 01			lda SPRITES.WSHIPX+1
   919 231F 8D 01 D0			sta GLOBALS.HPOSP01+1
   920 2322			l_016C
   921
   922 2322 4C 55 23			jmp a_0003
   923 2325			l_015A
   924 2325 C9 02			cmp #$02
   925 2327 D0 18			jne l_017E
   926 2329			@
   927
   928 				; optimize OK (JOY), line = 34
   929
   930 2329 A5 02			lda SPRITES.BSHIPY
   931 232B C9 21			cmp #$21
   932 232D 90 0F			jcc l_0190
   933
   934 				; optimize OK (JOY), line = 35
   935
   936 232F 18 69 06			add #$06
   937 2332 85 03			sta SPRITES.BSHIPYCLEAR
   938 2334 A5 02			lda SPRITES.BSHIPY
   939 2336 38 E9 02			sub #$02
   940 2339 85 02			sta SPRITES.BSHIPY
   941
   942 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 36
   943
   944 233B 20 07 22			jsr SPRITES.COPYSHIP
   945 233E			l_0190
   946
   947 233E 4C 55 23			jmp a_0003
   948 2341			l_017E
   949 2341 C9 01			cmp #$01
   950 2343 D0 10			jne l_01A8
   951 2345			@
   952
   953 				; optimize OK (JOY), line = 40
   954
   955 2345 A5 02			lda SPRITES.BSHIPY
   956 2347 C9 A8			cmp #$A8
   957 2349 B0 0A			jcs l_01BA
   958
   959 				; optimize OK (JOY), line = 41
   960
   961 234B 85 03			sta SPRITES.BSHIPYCLEAR
   962 234D 18 69 02			add #$02
   963 2350 85 02			sta SPRITES.BSHIPY
   964
   965 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 42
   966
   967 2352 20 07 22			jsr SPRITES.COPYSHIP
   968 2355			l_01BA
   969
   970 2355			l_01A8
   971 2355			a_0003
   972
   973 				; optimize OK (JOY), line = 46
   974
   975 2355 A9 03			lda #$03
   976 2357 85 FF			sta GLOBALS.BTMP1
   977
   978 				; --- ForToDoEpilog
   979 2359 C6 FD			dec GLOBALS.B1I
   980 235B 30 03 4C D6 22		jpl l_0117
   981 2360			l_0125
   982
   983 				; ------------------------------------------------------------
   984
   985 = 0000			@FORTMP_0114	= $00
   986 = 2507			@CASETMP_0003	= DATAORIGIN+$000F
   987
   988 = 2507			@VarData	= @CASETMP_0003
   989 = 0001			@VarDataSize	= 1
   990
   991 2360			@exit
   992 					.ifdef @new
   993 					lda <@VarData
   994 					sta :ztmp
   995 					lda >@VarData
   996 					ldy #@VarDataSize-1
   997 					jmp @FreeMem
   998 					els
   999 2360 60				rts						; ret
  1000 					eif
  1001 				.endl
  1002
  1003 				; ------------------------------------------------------------
  1004 				; ------------------------------------------------------------
  1005 2361			@UnitInit
  1006
  1007 2361 60				rts
  1008
  1009 				; ------------------------------------------------------------
  1010
  1011 = 0004			JOYDIRECTION	= $04
  1012
  1013 				.endl							; UNIT JOY
  1014
  1015 2362			.local	VBI						; PROCEDURE | INTERRUPT
  1016
  1017 				; ---------------------  ASM Block 055  ---------------------
  1018
  1019 2362 48 8A 48 98 48	 phr 
  1020
  1021 				; ---------------------  ASM Block 056  ---------------------
  1022
  1023 2367 68 A8 68 AA 68	 plr 
  1024 236C 40				rti						; ret
  1025 				.endl
  1026
  1027 236D			.local	JOYHANDLER					; PROCEDURE | INTERRUPT
  1028
  1029 				; ---------------------  ASM Block 057  ---------------------
  1030
  1031 236D 48 8A 48 98 48	 phr 
  1032
  1033 				; ---------------------  ASM Block 058  ---------------------
  1034
  1035 2372 8D 0A D4		 sta WSYNC 
  1036
  1037 				; optimize OK (main.pas), line = 30
  1038
  1039 2375 A9 0F			lda #$0F
  1040 2377 8D 1A D0			sta GLOBALS.COLBK
  1041
  1042 				; optimize OK (main.pas), line = 32
  1043
  1044 237A AD 00 D3			lda GLOBALS.PORTA
  1045 237D 85 04			sta JOY.JOYDIRECTION
  1046
  1047 				; optimize OK (main.pas), line = 33
  1048
  1049 237F 29 0F			and #$0F
  1050 2381 C9 0F			cmp #$0F
  1051 2383 F0 03			jeq l_01FE
  1052 2385 20 CE 22			jsr JOY.MOVESHIP
  1053 2388			l_01FE
  1054
  1055 				; optimize OK (main.pas), line = 35
  1056
  1057 2388 A9 00			lda #$00
  1058 238A 8D 1A D0			sta GLOBALS.COLBK
  1059
  1060 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 37
  1061
  1062 238D E8				inx
  1063 238E AD 0A 25 95 98		mva PSTARS :STACKORIGIN,x
  1064 2393 AD 0B 25 95 A8		mva PSTARS+1 :STACKORIGIN+STACKWIDTH,x
  1065 2398 20 C7 21			jsr SYS.SETDLI
  1066
  1067 				; ---------------------  ASM Block 059  ---------------------
  1068
  1069 239B 68 A8 68 AA 68	 plr 
  1070 23A0 40				rti						; ret
  1071 				.endl
  1072
  1073 23A1			.local	STARS						; PROCEDURE | INTERRUPT
  1074
  1075 				; ---------------------  ASM Block 060  ---------------------
  1076
  1077 23A1 48 8A 48 98 48	 phr 
  1078
  1079 				; optimize OK (main.pas), line = 46
  1080
  1081 23A6 A9 7C			lda #$7C
  1082 23A8 85 FD			sta GLOBALS.B1I
  1083
  1084 23AA			l_0216
  1085 				; --- ForToDoCondition
  1086
  1087 				; ---------------------  ASM Block 061  ---------------------
  1088
  1089 23AA 8D 0A D4		 sta WSYNC 
  1090
  1091 				; optimize OK (main.pas), line = 48
  1092
  1093 23AD A4 FD			ldy GLOBALS.B1I
  1094 23AF B9 00 12			lda adr.ASTARS,y
  1095 23B2 8D 07 D0			sta GLOBALS.HPOSM3
  1096
  1097 				; optimize OK (main.pas), line = 49
  1098
  1099 23B5 B9 00 12			lda adr.ASTARS,y
  1100 23B8 38 F9 7D 12			sub adr.ASPEED,y
  1101 23BC 99 00 12			sta adr.ASTARS,y
  1102
  1103 				; optimize OK (main.pas), line = 50
  1104
  1105 23BF AD 0A D2			lda SYSTEM.RND
  1106 23C2 8D 15 D0			sta GLOBALS.COLPM3
  1107
  1108 				; --- ForToDoEpilog
  1109 23C5 C6 FD			dec GLOBALS.B1I
  1110 23C7 10 E1			jpl l_0216
  1111 23C9			l_0224
  1112
  1113 				; optimize OK (main.pas), line = 55
  1114
  1115 23C9 A5 14			lda GLOBALS.RTCLOK
  1116 23CB 29 01			and #$01
  1117 23CD D0 25			jne l_0257
  1118
  1119 				; optimize OK (main.pas), line = 56
  1120
  1121 23CF AD 04 11			lda GLOBALS.DL2LMS
  1122 23D2 18 69 03			add #$03
  1123 23D5 85 A1			sta :STACKORIGIN+9
  1124 23D7 AD 05 11			lda GLOBALS.DL2LMS+1
  1125 23DA 69 00			adc #$00
  1126 23DC 85 B1			sta :STACKORIGIN+STACKWIDTH+9
  1127 23DE AD 0A D2			lda SYSTEM.RND
  1128 23E1 29 0F			and #$0F
  1129 23E3 20 C8 20			jsr @mul40
  1130 23E6 18 65 A1			add :STACKORIGIN+9
  1131 23E9 A8				tay
  1132 23EA A5 B1			lda :STACKORIGIN+STACKWIDTH+9
  1133 23EC 65 85			adc :eax+1
  1134 23EE 85 91			sta :bp+1
  1135 23F0 A9 80			lda #$80
  1136 23F2 91 90			sta (:bp),y
  1137 23F4			l_0257
  1138
  1139 				; optimize OK (main.pas), line = 59
  1140
  1141 23F4 AD 05 11			lda GLOBALS.DL2LMS+1
  1142 23F7 C9 E0			cmp #$E0
  1143 23F9 90 17			jcc l_0281
  1144 23FB D0 07			bne @+
  1145 23FD AD 04 11			lda GLOBALS.DL2LMS
  1146 2400 C9 01			cmp #$01
  1147 2402 90 0E			jcc l_0281
  1148 2404			@
  1149 2404 AD 04 11 D0 03 CE + 	dew GLOBALS.DL2LMS
  1150 240F 4C 1C 24			jmp l_028F
  1151 2412			l_0281
  1152 2412 A9 3F			lda #$3F
  1153 2414 8D 04 11			sta GLOBALS.DL2LMS
  1154 2417 A9 EC			lda #$EC
  1155 2419 8D 05 11			sta GLOBALS.DL2LMS+1
  1156 241C			l_028F
  1157
  1158 				; optimize OK (main.pas), line = 61
  1159
  1160 241C AD 04 11			lda GLOBALS.DL2LMS
  1161 241F 85 FA			sta GLOBALS.WTMP1
  1162 2421 AD 05 11			lda GLOBALS.DL2LMS+1
  1163 2424 85 FB			sta GLOBALS.WTMP1+1
  1164
  1165 				; ---------------------  ASM Block 062  ---------------------
  1166
  1167
  1168 2426 A2 15		        ldx #GAME_SCREEN_ROWS
  1169 2428 A0 00		        ldy #0
  1170 242A 98			  clr:  tya
  1171 242B 91 FA		        sta (GLOBALS.WTMP1),y
  1172 242D A5 FA		        lda GLOBALS.WTMP1
  1173 242F 18 69 28		        add #40
  1174 2432 85 FA		        sta GLOBALS.WTMP1
  1175 2434 90 02		        bcc @+
  1176 2436 E6 FB		        inc GLOBALS.WTMP1+1
  1177 2438 CA			  @:    dex
  1178 2439 10 EF		        bpl clr
  1179 				  
  1180
  1181 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 79
  1182
  1183 243B E8				inx
  1184 243C AD 08 25 95 98		mva PJOY :STACKORIGIN,x
  1185 2441 AD 09 25 95 A8		mva PJOY+1 :STACKORIGIN+STACKWIDTH,x
  1186 2446 20 C7 21			jsr SYS.SETDLI
  1187
  1188 				; ---------------------  ASM Block 063  ---------------------
  1189
  1190 2449 68 A8 68 AA 68	 plr 
  1191
  1192 				; ------------------------------------------------------------
  1193
  1194 = 0000			@FORTMP_0213	= $00
  1195 244E 40				rti						; ret
  1196 				.endl
  1197
  1198 244F			.local	INIT						; PROCEDURE
  1199
  1200 				; optimize FAIL ('SYSTEM.PAUSE_0078', main.pas), line = 86
  1201
  1202 244F 20 96 21			jsr SYSTEM.PAUSE_0078
  1203 2452 A9 00			lda #$00
  1204 2454 8D 00 D4			sta GLOBALS.DMACTL
  1205 2457 20 DF 21			jsr SYS.SYSTEMOFF
  1206
  1207 				; optimize OK (main.pas), line = 88
  1208
  1209 245A A9 3F			lda #$3F
  1210 245C 85 88			sta :edx
  1211 245E A9 EC			lda #$EC
  1212 2460 85 89			sta :edx+1
  1213 2462 A9 C0			lda #$C0
  1214 2464 85 8C			sta :ecx
  1215 2466 A9 03			lda #$03
  1216 2468 85 8D			sta :ecx+1
  1217 246A A9 00			lda #$00
  1218 246C 85 84			sta :eax
  1219 246E 20 80 20			jsr @fill
  1220
  1221 				; optimize OK (main.pas), line = 90
  1222
  1223 2471 A9 7C			lda #$7C
  1224 2473 85 FD			sta GLOBALS.B1I
  1225
  1226 2475			l_02B2
  1227 				; --- ForToDoCondition
  1228
  1229 				; optimize OK (main.pas), line = 91
  1230
  1231 2475 A4 FD			ldy GLOBALS.B1I
  1232 2477 AD 0A D2			lda SYSTEM.RND
  1233 247A 99 00 12			sta adr.ASTARS,y
  1234
  1235 				; optimize OK (main.pas), line = 92
  1236
  1237 247D 29 03			and #$03
  1238 247F 18 69 01			add #$01
  1239 2482 99 7D 12			sta adr.ASPEED,y
  1240
  1241 				; --- ForToDoEpilog
  1242 2485 C6 FD			dec GLOBALS.B1I
  1243 2487 10 EC			jpl l_02B2
  1244 2489			l_02C0
  1245
  1246 				; optimize FAIL ('SPRITES.INIT', main.pas), line = 95
  1247
  1248 2489 20 5E 22			jsr SPRITES.INIT
  1249
  1250 				; optimize FAIL ('GR.MODE2', main.pas), line = 96
  1251
  1252 248C 20 FB 21			jsr GR.MODE2
  1253 248F A9 00			lda #$00
  1254 2491 8D 1A D0			sta GLOBALS.COLBK
  1255 2494 A9 02			lda #$02
  1256 2496 8D 18 D0			sta GLOBALS.COLPF2
  1257
  1258 				; optimize OK (main.pas), line = 97
  1259
  1260 2499 AD 02 D3			lda GLOBALS.PACTL
  1261 249C 09 04			ora #$04
  1262 249E 8D 02 D3			sta GLOBALS.PACTL
  1263
  1264 				; optimize OK (main.pas), line = 98
  1265
  1266 24A1 A9 6D			lda <JOYHANDLER
  1267 24A3 8D 08 25			sta PJOY
  1268 24A6 A9 23			lda >JOYHANDLER
  1269 24A8 8D 09 25			sta PJOY+1
  1270 24AB A9 A1			lda <STARS
  1271 24AD 8D 0A 25			sta PSTARS
  1272 24B0 A9 23			lda >STARS
  1273 24B2 8D 0B 25			sta PSTARS+1
  1274
  1275 				; optimize FAIL ('SYS.SETVBI', main.pas), line = 100
  1276
  1277 24B5 E8				inx
  1278 24B6 A9 62 95 98			mva <VBI :STACKORIGIN,x
  1279 24BA A9 23 95 A8			mva >VBI :STACKORIGIN+STACKWIDTH,x
  1280 24BE 20 AF 21			jsr SYS.SETVBI
  1281
  1282 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 101
  1283
  1284 24C1 E8				inx
  1285 24C2 A9 6D 95 98			mva <JOYHANDLER :STACKORIGIN,x
  1286 24C6 A9 23 95 A8			mva >JOYHANDLER :STACKORIGIN+STACKWIDTH,x
  1287 24CA 20 C7 21			jsr SYS.SETDLI
  1288
  1289 				; optimize FAIL ('SYSTEM.PAUSE_0078', main.pas), line = 103
  1290
  1291 24CD 20 96 21			jsr SYSTEM.PAUSE_0078
  1292 24D0 A9 3E			lda #$3E
  1293 24D2 8D 00 D4			sta GLOBALS.DMACTL
  1294
  1295 				; ------------------------------------------------------------
  1296
  1297 = 0000			@FORTMP_02AF	= $00
  1298 24D5			@exit
  1299 					.ifdef @new
  1300 					lda <@VarData
  1301 					sta :ztmp
  1302 					lda >@VarData
  1303 					ldy #@VarDataSize-1
  1304 					jmp @FreeMem
  1305 					els
  1306 24D5 60				rts						; ret
  1307 					eif
  1308 				.endl
  1309 24D6			l_0007
  1310
  1311 				; optimize FAIL ('INIT', main.pas), line = 107
  1312
  1313 24D6 20 4F 24			jsr INIT
  1314
  1315 				; --- RepeatUntilProlog
  1316 24D9			l_0303
  1317
  1318 				; optimize OK (main.pas), line = 108
  1319
  1320 24D9 4C D9 24			jmp l_0303
  1321
  1322 				; ------------------------------------------------------------
  1323
  1324 = 1000			PM_ADR	= $1000
  1325 = 1300			M0_ADR	= $1300
  1326 = 1400			P0_ADR	= $1400
  1327 = 1500			P1_ADR	= $1500
  1328 = 1000			GFX_SHIP_ADR	= $1000
  1329 = 0008			GFX_SHIP_SEG	= $08
  1330 = 1100			DL_2	= $1100
  1331 = EC3F			GAME_LMS	= $EC3F
  1332 = E000			GAME_LMS_EMD	= $E000
  1333 = 0015			GAME_SCREEN_ROWS	= $15
  1334 = 0E0E			SHIP_COL	= $0E0E
  1335 = 0030			SHIP_LEFT_LIMIT	= $30
  1336 = 00B0			SHIP_RIGHT_LIMIT	= $B0
  1337 = 0020			SHIP_TOP_LIMIT	= $20
  1338 = 00A8			SHIP_BOTTOM_LIMIT	= $A8
  1339 = 0202			SHIP_X_STEP	= $0202
  1340 = 0008			JOY_LEFT	= $08
  1341 = 0004			JOY_RIGHT	= $04
  1342 = 0002			JOY_UP	= $02
  1343 = 0001			JOY_DOWN	= $01
  1344 = 1200			adr.ASTARS	= $1200
  1345 24DC			.var ASTARS	= adr.ASTARS .word
  1346 = 127D			adr.ASPEED	= $127D
  1347 24DC			.var ASPEED	= adr.ASPEED .word
  1348 = 2508			PJOY	= DATAORIGIN+$0010
  1349 = 250A			PSTARS	= DATAORIGIN+$0012
  1350 24DC			@exit
  1351
  1352 24DC A2 00		@halt	ldx #$00
  1353 24DE 9A				txs
  1354 					.ifdef MAIN.@DEFINES.ROMOFF
  1355 					inc portb
  1356 					.endif
  1357
  1358 24DF A0 01			ldy #$01
  1359
  1360 24E1 60				rts
  1361
  1362 				; ------------------------------------------------------------
  1363
  1364 24E2 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1365
  1366 				; ------------------------------------------------------------
  1367
  1368 24F2			.local	@DEFINES
  1369 24F2			ATARI
  1370 				.endl
  1371
  1372 24F2			.local	@RESOURCE
  1373 				.endl
  1374
  1375 = 24F2 00 12		ASTARS
  1375 = 24F4 7D 12		ASPEED
  1375 				.endl							; MAIN
  1376
  1377 				; ------------------------------------------------------------
  1378 				; ------------------------------------------------------------
  1379
  1380 				.macro	UNITINITIALIZATION
  1381 				
  1382 					.ifdef MAIN.SYSTEM.@UnitInit
  1383 					jsr MAIN.SYSTEM.@UnitInit
  1384 					eif
  1385 				
  1386 					.ifdef MAIN.GLOBALS.@UnitInit
  1387 					jsr MAIN.GLOBALS.@UnitInit
  1388 					eif
  1389 				
  1390 					.ifdef MAIN.SYS.@UnitInit
  1391 					jsr MAIN.SYS.@UnitInit
  1392 					eif
  1393 				
  1394 					.ifdef MAIN.GR.@UnitInit
  1395 					jsr MAIN.GR.@UnitInit
  1396 					eif
  1397 				
  1398 					.ifdef MAIN.SPRITES.@UnitInit
  1399 					jsr MAIN.SPRITES.@UnitInit
  1400 					eif
  1401 				
  1402 					.ifdef MAIN.JOY.@UnitInit
  1403 					jsr MAIN.JOY.@UnitInit
  1404 					eif
  1405 				.endm
  1406
  1407 				; ------------------------------------------------------------
  1408
  1409 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1410 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1410 				SYSTEM: $2129..$21A0
  1411 					eif
  1412
  1413 					ift .SIZEOF(MAIN.GLOBALS) > 0
  1414 					.print 'GLOBALS: ',MAIN.GLOBALS,'..',MAIN.GLOBALS+.SIZEOF(MAIN.GLOBALS)-1
  1415 					eif
  1416
  1417 					ift .SIZEOF(MAIN.SYS) > 0
  1418 					.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
  1418 				SYS: $21A1..$21FA
  1419 					eif
  1420
  1421 					ift .SIZEOF(MAIN.GR) > 0
  1422 					.print 'GR: ',MAIN.GR,'..',MAIN.GR+.SIZEOF(MAIN.GR)-1
  1422 				GR: $21FB..$2206
  1423 					eif
  1424
  1425 					ift .SIZEOF(MAIN.SPRITES) > 0
  1426 					.print 'SPRITES: ',MAIN.SPRITES,'..',MAIN.SPRITES+.SIZEOF(MAIN.SPRITES)-1
  1426 				SPRITES: $2207..$22CD
  1427 					eif
  1428
  1429 					ift .SIZEOF(MAIN.JOY) > 0
  1430 					.print 'JOY: ',MAIN.JOY,'..',MAIN.JOY+.SIZEOF(MAIN.JOY)-1
  1430 				JOY: $22CE..$2361
  1431 					eif
  1432
  1433 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1433 				CODE: $2000..$24F1
  1434
  1435 				; ------------------------------------------------------------
  1436
  1437 24F6				.align $04
  1438
  1439 24F8			DATAORIGIN
  1440 24F8-24FD> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  1441
  1442 = 0006			VARINITSIZE	= *-DATAORIGIN
  1443 = 0014			VARDATASIZE	= 20
  1444
  1445 = 250C			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1446
  1447 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1447 				DATA: $24F8..$250C
  1448
  1449 02E0-02E1> ED 20			run START
  1450
  1451 				; ------------------------------------------------------------
  1452
  1453 				.macro	STATICDATA
  1454 				.endm
  1455
  1456 					end
