mads 2.1.1
  1133 					opt l+
    98 = 0000				?EXTDETECT = 0
    99 = 0000				?VBXDETECT = 0
   100
   101 2075				RCASM 'res/gr_dl.asm' GLOBALS.DL_2 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 001A			len = .sizeof(_GLOBALS.DL_2)
     6 				mcpy	ift main.GLOBALS.DL_2+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 11 +  MWA #MAIN.GLOBALS.DL_2 ECX
    13 2088 A9 1A 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: const.inc
     1 = 1000			PM_ADR              = $1000;                      // players & missiles memory (2K) start address
     2 = 1300			M0_ADR              = PM_ADR + $300;              // missile 0 start memory address
     3 = 1400			P0_ADR              = PM_ADR + $400;              // player 0 start memory address
     4 = 1500			P1_ADR              = PM_ADR + $500;              // player 1 start memory address
     5 = 1000			GFX_SHIP_ADR        = $1000;                      // ship gfx memory start address, ship size = 20 bytes, 16 bytes for gfx and 4 bytes fo top/bottom empty rows
     6 = 0008			GFX_SHIP_SEG        = 8;                          // ship gfx 10 byte segment, 10B for P0 & 10B for P1
     8 = 1800			GFX_FONTS_ADR       = $1800;
    10 = 1100			DL_2                = $1100;                      // display list memory start address for ANTIC mode 2
    11 = EC3F			GAME_LMS            = $efff - $3c0;               // Load Memory Scan address
    12 = E000			GAME_LMS_END        = $e000;
    13 = 0011			GAME_SCREEN_ROWS    = 17;
    15 = 0E0E			SHIP_COL            = $0e0e;
    16 = 0030			SHIP_LEFT_LIMIT     = 48;
    17 = 00B0			SHIP_RIGHT_LIMIT    = SHIP_LEFT_LIMIT + (16 * 8);
    18 = 0020			SHIP_TOP_LIMIT      = 32;
    19 = 00A8			SHIP_BOTTOM_LIMIT   = SHIP_TOP_LIMIT + GFX_SHIP_SEG * GAME_SCREEN_ROWS;
    20 = 0202			SHIP_X_STEP         = $0202;
    21 = 0004			SHIP_Y_STEP         = 4;
    23 = 0008			JOY_LEFT            = %1000;
    24 = 0004			JOY_RIGHT           = %0100;
    25 = 0002			JOY_UP              = %0010;
    26 = 0001			JOY_DOWN            = %0001;
     3 1100			dl2
     4 1100 F0 70 F0		    .byte $f0,$70,$f0
     5 1103 42 3F EC		    .byte $42,a(GAME_LMS)
     6 1106 02 02 02 02 02 02 + :17 .byte 2
     7 1117 41 00 11		    .byte $41,a(dl2)
    23 					.print '$R RCASM   ',main.GLOBALS.DL_2,'..',main.GLOBALS.DL_2+len-1," 'res/gr_dl.asm'"
    23 				$R RCASM   $1100..$1119 'res/gr_dl.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: main.a65
   102 20B0				RCDATA 'res/gfx_ship.bin' GLOBALS.GFX_SHIP_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0010			len = .filesize('res/gfx_ship.bin')
    28 20B0				org main.GLOBALS.GFX_SHIP_ADR
    30 1000-100F> 70 7B 1E 3F + 	ins 'res/gfx_ship.bin'
    32 					.print '$R RCDATA  ',main.GLOBALS.GFX_SHIP_ADR,'..',*-1," 'res/gfx_ship.bin'"
    32 				$R RCDATA  $1000..$100F 'res/gfx_ship.bin'
Source: main.a65
   103 1010				RCDATA 'res/charset.fnt' GLOBALS.GFX_FONTS_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0400			len = .filesize('res/charset.fnt')
    28 1010				org main.GLOBALS.GFX_FONTS_ADR
    30 1800-1BFF> 00 00 00 00 + 	ins 'res/charset.fnt'
    32 					.print '$R RCDATA  ',main.GLOBALS.GFX_FONTS_ADR,'..',*-1," 'res/charset.fnt'"
    32 				$R RCDATA  $1800..$1BFF 'res/charset.fnt'
Source: main.a65
   104 				.endl
   105
   106 				; ------------------------------------------------------------
   107
   108 1C00				org CODEORIGIN
   109
   110 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
Source: main.a65
   111
   112 				; ------------------------------------------------------------
   113
   114 2000			RTLIB
   115 2000				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
   148 					opt l+
   116
   117 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   117 				ZPAGE: $0080..$00D7
   118
   119 				.print 'RTLIB: ',RTLIB,'..',*-1
   119 				RTLIB: $2000..$205B
   120
   121 				; ------------------------------------------------------------
   122
   123 205C			START
   124 205C BA				tsx
   125 205D 8E 44 24			stx MAIN.@halt+1
   126
   127 					.ifdef fmulinit
   128 					fmulinit
   129 					eif
   130
   131 = 000E			VLEN	= VARDATASIZE-VARINITSIZE
   132 = 2466			VADR	= DATAORIGIN+VARINITSIZE
   133
   134 					ift VADR > $BFFF
   135 					ert 'Invalid memory address range ',VADR
   136 					eli (VLEN>0) && (VLEN<=256)
   137 2060 A2 F2			ldx #256-VLEN
   138 2062 A9 00			lda #$00
   139 2064 9D 74 23 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   140 					eli VLEN>0
   141 					@fill #VADR #VLEN #$00
   142 					eif
   143
   144 206A A9 74 85 82 A9 24 + 	mwa #PROGRAMSTACK psptr
   145
   146 					.ifdef MAIN.@DEFINES.ROMOFF
   147 					icl 'atari\romoff.asm'
   148 					.endif
   149
   150 2072 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   151 2074 BD 40 03 9D 49 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   152
   153 207D E8				inx						; X = 0
   154 207E 86 90			stx bp						; BP = 0
   155
   156 2080 8E 08 D2			stx audctl					; reset POKEY
   157 2083 A9 03			lda #3
   158 2085 8D 0F D2			sta skctl
   159
   160 2088 CA				dex						; X = 255
   161
   162 2089				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
    11 2089 20 2C 21			jsr MAIN.SYS.@UnitInit
    15 208C 20 38 21			jsr MAIN.GR.@UnitInit
    19 208F 20 EE 21			jsr MAIN.SPRITES.@UnitInit
    23 2092 20 A0 22			jsr MAIN.JOY.@UnitInit
   163
   164 2095			.local	MAIN						; PROCEDURE
   165
   166 2095 4C 3D 24			jmp l_0007
   167
   168 				; ------------------------------------------------------------
   169
   170 2098			.local	SYSTEM						; UNIT
   171
   172 2098			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   173
   174 				; ------------------------------------------------------------
   175
   176 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   177 				; as Pointer
   178 2098 B5 98			lda :STACKORIGIN,x
   179 209A 85 8C			sta VALUE
   180 209C CA				dex
   181
   182 				; ------------------------------------------------------------
   183
   184 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   185 				; as Pointer
   186 209D B5 98			lda :STACKORIGIN,x
   187 209F 85 88			sta A
   188 20A1 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   189 20A3 85 89			sta A+1
   190 20A5 CA				dex
   191
   192 				; ---------------------  ASM Block 021  ---------------------
   193
   194 20A6 A0 00			ldy #0
   195 20A8 A5 8C 91 88			mva value (edx),y
   196
   197
   198 				; ------------------------------------------------------------
   199
   200 = 0088			A	= edx
   201 = 008C			VALUE	= ecx
   202 20AC			@exit
   203 					.ifdef @new
   204 					lda <@VarData
   205 					sta :ztmp
   206 					lda >@VarData
   207 					ldy #@VarDataSize-1
   208 					jmp @FreeMem
   209 					els
   210 20AC 60				rts						; ret
   211 					eif
   212 				.endl
   213
   214 20AD			.local	FILLBYTE_0049					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   215
   216 				; ------------------------------------------------------------
   217
   218 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   219 				; as Pointer
   220 20AD B5 98			lda :STACKORIGIN,x
   221 20AF 85 84			sta VALUE
   222 20B1 CA				dex
   223
   224 				; ------------------------------------------------------------
   225
   226 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   227 				; as Pointer
   228 20B2 B5 98			lda :STACKORIGIN,x
   229 20B4 85 8C			sta COUNT
   230 20B6 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   231 20B8 85 8D			sta COUNT+1
   232 20BA CA				dex
   233
   234 				; ------------------------------------------------------------
   235
   236 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   237 				; as Pointer
   238 20BB B5 98			lda :STACKORIGIN,x
   239 20BD 85 88			sta A
   240 20BF B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   241 20C1 85 89			sta A+1
   242 20C3 CA				dex
   243
   244 				; ---------------------  ASM Block 029  ---------------------
   245
   246 20C4 20 00 20			jsr @fill
   247
   248
   249 				; ------------------------------------------------------------
   250
   251 = 0088			A	= edx
   252 = 008C			COUNT	= ecx
   253 = 0084			VALUE	= eax
   254 20C7			@exit
   255 					.ifdef @new
   256 					lda <@VarData
   257 					sta :ztmp
   258 					lda >@VarData
   259 					ldy #@VarDataSize-1
   260 					jmp @FreeMem
   261 					els
   262 20C7 60				rts						; ret
   263 					eif
   264 				.endl
   265
   266 20C8			.local	PAUSE_0067					; PROCEDURE | ASSEMBLER | OVERLOAD
   267
   268 				; ---------------------  ASM Block 039  ---------------------
   269
   270 20C8 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   271
   272 20CE			@exit
   273 					.ifdef @new
   274 					lda <@VarData
   275 					sta :ztmp
   276 					lda >@VarData
   277 					ldy #@VarDataSize-1
   278 					jmp @FreeMem
   279 					els
   280 20CE 60				rts						; ret
   281 					eif
   282 				.endl
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0101			__PORTB_BANKS	= $0101
   287 = 0648			M_PI_2	= $0648
   288 = 0192			D_PI_2	= $0192
   289 = 0004			D_PI_180	= $04
   290 = 0000			MGTIA	= $00
   291 = 0080			MVBXE	= $80
   292 = 0000			VBXE_XDLADR	= $00
   293 = 0100			VBXE_BCBADR	= $0100
   294 = 1000			VBXE_MAPADR	= $1000
   295 = 5000			VBXE_OVRADR	= $5000
   296 = B000			VBXE_WINDOW	= $B000
   297 = 0000			IDLI	= $00
   298 = 0001			IVBL	= $01
   299 = 00FE			CH_DELCHR	= $FE
   300 = 009B			CH_ENTER	= $9B
   301 = 001B			CH_ESC	= $1B
   302 = 001C			CH_CURS_UP	= $1C
   303 = 001D			CH_CURS_DOWN	= $1D
   304 = 001E			CH_CURS_LEFT	= $1E
   305 = 001F			CH_CURS_RIGHT	= $1F
   306 = 007F			CH_TAB	= $7F
   307 = 009B			CH_EOL	= $9B
   308 = 007D			CH_CLR	= $7D
   309 = 00FD			CH_BELL	= $FD
   310 = 007E			CH_DEL	= $7E
   311 = 009C			CH_DELLINE	= $9C
   312 = 009D			CH_INSLINE	= $9D
   313 = 0000			COLOR_BLACK	= $00
   314 = 000E			COLOR_WHITE	= $0E
   315 = 0032			COLOR_RED	= $32
   316 = 0096			COLOR_CYAN	= $96
   317 = 0068			COLOR_VIOLET	= $68
   318 = 00C4			COLOR_GREEN	= $C4
   319 = 0074			COLOR_BLUE	= $74
   320 = 00EE			COLOR_YELLOW	= $EE
   321 = 0028			COLOR_ORANGE	= $28
   322 = 00E4			COLOR_BROWN	= $E4
   323 = 003C			COLOR_LIGHTRED	= $3C
   324 = 0004			COLOR_GRAY1	= $04
   325 = 0006			COLOR_GRAY2	= $06
   326 = 000A			COLOR_GRAY3	= $0A
   327 = 00CC			COLOR_LIGHTGREEN	= $CC
   328 = 007C			COLOR_LIGHTBLUE	= $7C
   329 = 0004			FMOPENREAD	= $04
   330 = 0008			FMOPENWRITE	= $08
   331 = 0009			FMOPENAPPEND	= $09
   332 = 000C			FMOPENREADWRITE	= $0C
   333 = 2460			SCREENWIDTH	= DATAORIGIN+$0000
   334 = 2462			SCREENHEIGHT	= DATAORIGIN+$0002
   335 = 2464			DATESEPARATOR	= DATAORIGIN+$0004
   336 = D014			TVSYSTEM	= $D014
   337 = D20A			RND	= $D20A
   338 = 02C0			adr.PALETTE	= $02C0
   339 20CF			.var PALETTE	= adr.PALETTE .word
   340 = D012			adr.HPALETTE	= $D012
   341 20CF			.var HPALETTE	= adr.HPALETTE .word
   342 = 2465			FILEMODE	= DATAORIGIN+$0005
   343 = 2466			GRAPHMODE	= DATAORIGIN+$0006
   344 = 2467			IORESULT	= DATAORIGIN+$0007
   345 = 2468			EOLN	= DATAORIGIN+$0008
   346 = 2469			RNDSEED	= DATAORIGIN+$0009
   347
   348 = 20CF C0 02		PALETTE
   348 = 20D1 12 D0		HPALETTE
   348 				.endl							; UNIT SYSTEM
   349
   350 				; ------------------------------------------------------------
   351
   352 20D3			.local	GLOBALS						; UNIT
   353
   354 				; ------------------------------------------------------------
   355
   356 = 1000			PM_ADR	= $1000
   357 = 1300			M0_ADR	= $1300
   358 = 1400			P0_ADR	= $1400
   359 = 1500			P1_ADR	= $1500
   360 = 1000			GFX_SHIP_ADR	= $1000
   361 = 0008			GFX_SHIP_SEG	= $08
   362 = 1800			GFX_FONTS_ADR	= $1800
   363 = 1100			DL_2	= $1100
   364 = EC3F			GAME_LMS	= $EC3F
   365 = E000			GAME_LMS_END	= $E000
   366 = 0011			GAME_SCREEN_ROWS	= $11
   367 = 0E0E			SHIP_COL	= $0E0E
   368 = 0030			SHIP_LEFT_LIMIT	= $30
   369 = 00B0			SHIP_RIGHT_LIMIT	= $B0
   370 = 0020			SHIP_TOP_LIMIT	= $20
   371 = 00A8			SHIP_BOTTOM_LIMIT	= $A8
   372 = 0202			SHIP_X_STEP	= $0202
   373 = 0004			SHIP_Y_STEP	= $04
   374 = 0008			JOY_LEFT	= $08
   375 = 0004			JOY_RIGHT	= $04
   376 = 0002			JOY_UP	= $02
   377 = 0001			JOY_DOWN	= $01
   378 = 0014			RTCLOK	= $14
   379 = D000			HPOSP0	= $D000
   380 = D001			HPOSP1	= $D001
   381 = D004			HPOSM0	= $D004
   382 = D005			HPOSM1	= $D005
   383 = D006			HPOSM2	= $D006
   384 = D007			HPOSM3	= $D007
   385 = D008			SIZEP0	= $D008
   386 = D009			SIZEP1	= $D009
   387 = D00A			SIZEP2	= $D00A
   388 = D00B			SIZEP3	= $D00B
   389 = D00C			SIZEM	= $D00C
   390 = D010			GRAFP3	= $D010
   391 = D010			TRIG0	= $D010
   392 = D011			GRAFM	= $D011
   393 = D012			COLPM0	= $D012
   394 = D013			COLPM1	= $D013
   395 = D014			COLPM2	= $D014
   396 = D015			COLPM3	= $D015
   397 = D016			COLPF0	= $D016
   398 = D017			COLPF1	= $D017
   399 = D018			COLPF2	= $D018
   400 = D019			COLPF3	= $D019
   401 = D01A			COLBK	= $D01A
   402 = D01B			PRIOR	= $D01B
   403 = D01D			GRACTL	= $D01D
   404 = D20A			RND	= $D20A
   405 = D300			PORTA	= $D300
   406 = D301			PORTB	= $D301
   407 = D302			PACTL	= $D302
   408 = D400			DMACTL	= $D400
   409 = D402			DLIST	= $D402
   410 = D407			PMBASE	= $D407
   411 = D409			CHBAS	= $D409
   412 = D40A			WSYNC	= $D40A
   413 = D40B			VCOUNT	= $D40B
   414 = D40E			NMIEN	= $D40E
   415 = FFFA			NMIVEC	= $FFFA
   416 = D000			HPOSP01	= $D000
   417 = D008			SIZEP01	= $D008
   418 = D012			COLPM01	= $D012
   419 = 1104			WDL2LMS	= $1104
   420 = 00FF			BTMP1	= $FF
   421 = 00FE			BTMP2	= $FE
   422 = 00FD			B1I	= $FD
   423 = 00FC			B2I	= $FC
   424 = 00FA			WTMP1	= $FA
   425 = 00F8			WTMP2	= $F8
   426 = 00F6			WTMP3	= $F6
   427 = 00F4			WTMP4	= $F4
   428 = 00F3			ODDCOUNTER	= $F3
   429 = 00F2			ISFIRETIME	= $F2
   430
   431 				.endl							; UNIT GLOBALS
   432
   433 				; ------------------------------------------------------------
   434
   435 20D3			.local	SYS						; UNIT
   436
   437 20D3			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
   438
   439 				; ---------------------  ASM Block 049  ---------------------
   440
   441
   442 				      bit NMIST \ bpl vbi     ; check kind of interrupt
   442 20D3 2C 0F D4		      BIT NMIST 
   442 20D6 10 03		 BPL VBI     
   443 = 20D8			.def  :__dlijmp
   444 20D8 4C E0 20		      jmp __off               ; VDSLST
   445 20DB E6 14		vbi:  inc RTCLOK+2
   446 = 20DD			.def  :__vbijmp
   447 20DD 4C E0 20		      jmp __off               ; VBIVEC
   448 = 20E0			.def  :__off
   449
   450 20E0 40				rti						; ret
   451 				.endl
   452
   453 20E1			.local	SETVBI						; PROCEDURE | ASSEMBLER
   454
   455 				; ------------------------------------------------------------
   456
   457 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   458 				; as Pointer
   459 20E1 B5 98			lda :STACKORIGIN,x
   460 20E3 8D 6B 24			sta A
   461 20E6 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   462 20E8 8D 6C 24			sta A+1
   463 20EB CA				dex
   464
   465 				; ---------------------  ASM Block 050  ---------------------
   466
   467
   468 20EC AD 6B 24 8D DE 20 +   mwa a __vbijmp+1
   469
   470
   471 				; ------------------------------------------------------------
   472
   473 = 246B			A	= DATAORIGIN+$000B
   474
   475 = 246B			@VarData	= A
   476 = 0002			@VarDataSize	= 2
   477
   478 20F8			@exit
   479 					.ifdef @new
   480 					lda <@VarData
   481 					sta :ztmp
   482 					lda >@VarData
   483 					ldy #@VarDataSize-1
   484 					jmp @FreeMem
   485 					els
   486 20F8 60				rts						; ret
   487 					eif
   488 				.endl
   489
   490 20F9			.local	SETDLI						; PROCEDURE | ASSEMBLER
   491
   492 				; ------------------------------------------------------------
   493
   494 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   495 				; as Pointer
   496 20F9 B5 98			lda :STACKORIGIN,x
   497 20FB 8D 6D 24			sta A
   498 20FE B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   499 2100 8D 6E 24			sta A+1
   500 2103 CA				dex
   501
   502 				; ---------------------  ASM Block 051  ---------------------
   503
   504
   505 2104 AD 6D 24 8D D9 20 +   mwa a __dlijmp+1
   506
   507
   508 				; ------------------------------------------------------------
   509
   510 = 246D			A	= DATAORIGIN+$000D
   511
   512 = 246D			@VarData	= A
   513 = 0002			@VarDataSize	= 2
   514
   515 2110			@exit
   516 					.ifdef @new
   517 					lda <@VarData
   518 					sta :ztmp
   519 					lda >@VarData
   520 					ldy #@VarDataSize-1
   521 					jmp @FreeMem
   522 					els
   523 2110 60				rts						; ret
   524 					eif
   525 				.endl
   526
   527 2111			.local	SYSTEMOFF					; PROCEDURE
   528
   529 				; ---------------------  ASM Block 054  ---------------------
   530
   531 2111 78			 sei 
   532
   533 				; optimize OK (SYS), line = 63
   534
   535 2112 A9 00			lda #$00
   536 2114 8D 0E D4			sta GLOBALS.NMIEN
   537 2117 A9 FE			lda #$FE
   538 2119 8D 01 D3			sta GLOBALS.PORTB
   539 211C A9 D3			lda <NMI
   540 211E 8D FA FF			sta GLOBALS.NMIVEC
   541 2121 A9 20			lda >NMI
   542 2123 8D FB FF			sta GLOBALS.NMIVEC+1
   543 2126 A9 C0			lda #$C0
   544 2128 8D 0E D4			sta GLOBALS.NMIEN
   545 212B			@exit
   546 					.ifdef @new
   547 					lda <@VarData
   548 					sta :ztmp
   549 					lda >@VarData
   550 					ldy #@VarDataSize-1
   551 					jmp @FreeMem
   552 					els
   553 212B 60				rts						; ret
   554 					eif
   555 				.endl
   556
   557 				; ------------------------------------------------------------
   558 				; ------------------------------------------------------------
   559 212C			@UnitInit
   560
   561 212C 60				rts
   562
   563 				; ------------------------------------------------------------
   564
   565 				.endl							; UNIT SYS
   566
   567 				; ------------------------------------------------------------
   568
   569 212D			.local	GR						; UNIT
   570
   571 212D			.local	MODE2						; PROCEDURE
   572
   573 				; optimize OK (GR), line = 17
   574
   575 212D A9 00			lda #$00
   576 212F 8D 02 D4			sta GLOBALS.DLIST
   577 2132 A9 11			lda #$11
   578 2134 8D 03 D4			sta GLOBALS.DLIST+1
   579 2137			@exit
   580 					.ifdef @new
   581 					lda <@VarData
   582 					sta :ztmp
   583 					lda >@VarData
   584 					ldy #@VarDataSize-1
   585 					jmp @FreeMem
   586 					els
   587 2137 60				rts						; ret
   588 					eif
   589 				.endl
   590
   591 				; ------------------------------------------------------------
   592 				; ------------------------------------------------------------
   593 2138			@UnitInit
   594
   595 2138 60				rts
   596
   597 				; ------------------------------------------------------------
   598
   599 				.endl							; UNIT GR
   600
   601 				; ------------------------------------------------------------
   602
   603 2139			.local	SPRITES						; UNIT
   604
   605 2139			.local	COPYSHIP					; PROCEDURE | ASSEMBLER
   606
   607 				; ---------------------  ASM Block 055  ---------------------
   608
   609
   610 2139 48 8A 48 98 48	        phr
   611
   612 213E A2 14		        ldx #>P0_ADR
   613 2140 86 FB		        stx GLOBALS.WTMP1+1
   614 2142 E8			        inx
   615 2143 86 F9		        stx GLOBALS.WTMP2+1
   616
   617 2145 A6 02		        ldx BSHIPY
   618 2147 86 FA		        stx GLOBALS.WTMP1
   619 2149 86 F8		        stx GLOBALS.WTMP2
   620
   621 				        ;move
   622 214B A0 07		        ldy #GFX_SHIP_SEG-1
   623 214D B9 00 10 91 FA	@:      mva GFX_SHIP_ADR,y (GLOBALS.WTMP1),y
   624 2152 B9 08 10 91 F8	        mva GFX_SHIP_ADR+GFX_SHIP_SEG,y (GLOBALS.WTMP2),y
   625 2157 88			        dey
   626 2158 10 F3		        bpl @-
   627
   628 				        ;clear
   629 215A A5 06		        lda JOY.JOYDIRECTION
   630 215C 29 03		        and #%0011
   631 215E C9 01		        cmp #JOY_DOWN
   632 2160 F0 06		        beq @+
   633 2162 8A			        txa
   634 2163 18 69 08		        add #SHIP_Y_STEP*2
   635 2166 D0 04		        bne @+1
   636 2168 8A			@:      txa
   637 2169 38 E9 04		        sub #SHIP_Y_STEP
   638 216C 85 FA		@:      sta GLOBALS.WTMP1
   639 216E 85 F8		        sta GLOBALS.WTMP2
   640
   641 2170 A9 00		        lda #0
   642 2172 A0 03		        ldy #GFX_SHIP_SEG-SHIP_Y_STEP-1
   643 2174 91 FA		@:      sta (GLOBALS.WTMP1),y
   644 2176 91 F8		        sta (GLOBALS.WTMP2),y
   645 2178 88			        dey
   646 2179 10 F9		        bpl @-
   647
   648 217B 68 A8 68 AA 68	        plr
   649
   650 2180			@exit
   651 					.ifdef @new
   652 					lda <@VarData
   653 					sta :ztmp
   654 					lda >@VarData
   655 					ldy #@VarDataSize-1
   656 					jmp @FreeMem
   657 					els
   658 2180 60				rts						; ret
   659 					eif
   660 				.endl
   661
   662 2181			.local	INIT						; PROCEDURE
   663
   664 				; optimize OK (SPRITES), line = 72
   665
   666 2181				.LOCAL
   667 2181 A0 00			ldy #$00
   668 2183 98				tya
   669 2184 99 00 13 99 80 13 + fill	:10 sta $1300+#*$80,y
   670 21A2 C8				iny
   671 21A3 10 DF			bpl fill
   672 					.ENDL
   673
   674 				; optimize OK (SPRITES), line = 73
   675
   676 21A5 A0 70			ldy #256-$90
   677 21A7 A9 FF			lda #$FF
   678 21A9 99 B0 12 C8 D0 FA		sta:rne $1320+$90-256,y+
   679
   680 				; optimize OK (SPRITES), line = 75
   681
   682 21AF A9 10			lda #$10
   683 21B1 8D 07 D4			sta GLOBALS.PMBASE
   684
   685 				; optimize OK (SPRITES), line = 76
   686
   687 21B4 A9 0A			lda #$0A
   688 21B6 8D 15 D0			sta GLOBALS.COLPM3
   689 21B9 A9 0E			lda #$0E
   690 21BB 8D 12 D0			sta GLOBALS.COLPM01
   691 21BE 8D 13 D0			sta GLOBALS.COLPM01+1
   692
   693 				; optimize OK (SPRITES), line = 77
   694
   695 21C1 A9 30			lda #$30
   696 21C3 85 00			sta BHPOSP0
   697 21C5 A9 38			lda #$38
   698 21C7 85 01			sta BHPOSP1
   699 21C9 A5 00			lda WSHIPX
   700 21CB 8D 00 D0			sta GLOBALS.HPOSP01
   701 21CE A5 01			lda WSHIPX+1
   702 21D0 8D 01 D0			sta GLOBALS.HPOSP01+1
   703
   704 				; optimize OK (SPRITES), line = 78
   705
   706 21D3 A9 50			lda #$50
   707 21D5 85 02			sta BSHIPY
   708 21D7 A9 00			lda #$00
   709 21D9 8D 08 D0			sta GLOBALS.SIZEP01
   710 21DC 8D 09 D0			sta GLOBALS.SIZEP01+1
   711 21DF 8D 0C D0			sta GLOBALS.SIZEM
   712 21E2 8D 1B D0			sta GLOBALS.PRIOR
   713 21E5 A9 03			lda #$03
   714 21E7 8D 1D D0			sta GLOBALS.GRACTL
   715
   716 				; optimize FAIL ('COPYSHIP', SPRITES), line = 80
   717
   718 21EA 20 39 21			jsr COPYSHIP
   719 21ED			@exit
   720 					.ifdef @new
   721 					lda <@VarData
   722 					sta :ztmp
   723 					lda >@VarData
   724 					ldy #@VarDataSize-1
   725 					jmp @FreeMem
   726 					els
   727 21ED 60				rts						; ret
   728 					eif
   729 				.endl
   730
   731 				; ------------------------------------------------------------
   732 				; ------------------------------------------------------------
   733 21EE			@UnitInit
   734
   735 21EE 60				rts
   736
   737 				; ------------------------------------------------------------
   738
   739 = 0000			BHPOSP0	= $00
   740 = 0001			BHPOSP1	= $01
   741 = 0002			BSHIPY	= $02
   742 = 0003			BCANNONX	= $03
   743 = 0000			WSHIPX	= $00
   744 = 0004			WCANNONY	= $04
   745
   746 				.endl							; UNIT SPRITES
   747
   748 				; ------------------------------------------------------------
   749
   750 21EF			.local	JOY						; UNIT
   751
   752 21EF			.local	MOVESHIP					; PROCEDURE
   753
   754 				; ---------------------  ASM Block 056  ---------------------
   755
   756 21EF 8D 0A D4		 sta WSYNC 
   757
   758 				; optimize OK (JOY), line = 20
   759
   760 21F2 A9 0F			lda #$0F
   761 21F4 8D 1A D0			sta GLOBALS.COLBK
   762
   763 				; optimize OK (JOY), line = 21
   764
   765 21F7 A9 0C			lda #$0C
   766 21F9 85 FF			sta GLOBALS.BTMP1
   767
   768 				; optimize OK (JOY), line = 22
   769
   770 21FB A9 01			lda #$01
   771 21FD 85 FD			sta GLOBALS.B1I
   772
   773 21FF			l_00DB
   774 				; --- ForToDoCondition
   775
   776 				; optimize OK (JOY), line = 23
   777
   778 21FF A5 06			lda JOYDIRECTION
   779 2201 25 FF			and GLOBALS.BTMP1
   780 2203 8D 6F 24			sta @CASETMP_0003
   781 2206 C9 04			cmp #$04
   782 2208 D0 22			jne l_00FA
   783 220A			@
   784
   785 				; optimize OK (JOY), line = 25
   786
   787 220A A5 01			lda SPRITES.BHPOSP1
   788 220C C9 B0			cmp #$B0
   789 220E B0 19			jcs l_010C
   790
   791 				; optimize OK (JOY), line = 26
   792
   793 2210 A5 00			lda SPRITES.WSHIPX
   794 2212 18 69 02			add #$02
   795 2215 85 00			sta SPRITES.WSHIPX
   796 2217 A5 01			lda SPRITES.WSHIPX+1
   797 2219 69 02			adc #$02
   798 221B 85 01			sta SPRITES.WSHIPX+1
   799 221D E6 03			inc SPRITES.BCANNONX
   800
   801 				; optimize OK (JOY), line = 27
   802
   803 221F A5 00			lda SPRITES.WSHIPX
   804 2221 8D 00 D0			sta GLOBALS.HPOSP01
   805 2224 A5 01			lda SPRITES.WSHIPX+1
   806 2226 8D 01 D0			sta GLOBALS.HPOSP01+1
   807 2229			l_010C
   808
   809 2229 4C 8F 22			jmp a_0003
   810 222C			l_00FA
   811 222C C9 08			cmp #$08
   812 222E D0 22			jne l_0122
   813 2230			@
   814
   815 				; optimize OK (JOY), line = 31
   816
   817 2230 A5 00			lda SPRITES.BHPOSP0
   818 2232 C9 31			cmp #$31
   819 2234 90 19			jcc l_0134
   820
   821 				; optimize OK (JOY), line = 32
   822
   823 2236 A5 00			lda SPRITES.WSHIPX
   824 2238 38 E9 02			sub #$02
   825 223B 85 00			sta SPRITES.WSHIPX
   826 223D A5 01			lda SPRITES.WSHIPX+1
   827 223F E9 02			sbc #$02
   828 2241 85 01			sta SPRITES.WSHIPX+1
   829 2243 C6 03			dec SPRITES.BCANNONX
   830
   831 				; optimize OK (JOY), line = 33
   832
   833 2245 A5 00			lda SPRITES.WSHIPX
   834 2247 8D 00 D0			sta GLOBALS.HPOSP01
   835 224A A5 01			lda SPRITES.WSHIPX+1
   836 224C 8D 01 D0			sta GLOBALS.HPOSP01+1
   837 224F			l_0134
   838
   839 224F 4C 8F 22			jmp a_0003
   840 2252			l_0122
   841 2252 C9 02			cmp #$02
   842 2254 D0 1C			jne l_014A
   843 2256			@
   844
   845 				; optimize OK (JOY), line = 37
   846
   847 2256 A5 02			lda SPRITES.BSHIPY
   848 2258 C9 21			cmp #$21
   849 225A 90 13			jcc l_015C
   850
   851 				; optimize OK (JOY), line = 38
   852
   853 225C 38 E9 04			sub #$04
   854 225F 85 02			sta SPRITES.BSHIPY
   855 2261 A5 04			lda SPRITES.WCANNONY
   856 2263 38 E9 14			sub #$14
   857 2266 85 04			sta SPRITES.WCANNONY
   858 2268 B0 02			scs
   859 226A C6 05			dec SPRITES.WCANNONY+1
   860
   861 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 39
   862
   863 226C 20 39 21			jsr SPRITES.COPYSHIP
   864 226F			l_015C
   865
   866 226F 4C 8F 22			jmp a_0003
   867 2272			l_014A
   868 2272 C9 01			cmp #$01
   869 2274 D0 19			jne l_016B
   870 2276			@
   871
   872 				; optimize OK (JOY), line = 43
   873
   874 2276 A5 02			lda SPRITES.BSHIPY
   875 2278 C9 A8			cmp #$A8
   876 227A B0 13			jcs l_017D
   877
   878 				; optimize OK (JOY), line = 44
   879
   880 227C 18 69 04			add #$04
   881 227F 85 02			sta SPRITES.BSHIPY
   882 2281 A5 04			lda SPRITES.WCANNONY
   883 2283 18 69 14			add #$14
   884 2286 85 04			sta SPRITES.WCANNONY
   885 2288 90 02			scc
   886 228A E6 05			inc SPRITES.WCANNONY+1
   887
   888 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 45
   889
   890 228C 20 39 21			jsr SPRITES.COPYSHIP
   891 228F			l_017D
   892
   893 228F			l_016B
   894 228F			a_0003
   895
   896 				; optimize OK (JOY), line = 49
   897
   898 228F A9 03			lda #$03
   899 2291 85 FF			sta GLOBALS.BTMP1
   900
   901 				; --- ForToDoEpilog
   902 2293 C6 FD			dec GLOBALS.B1I
   903 2295 30 03 4C FF 21		jpl l_00DB
   904 229A			l_00E9
   905
   906 				; optimize OK (JOY), line = 51
   907
   908 229A A9 00			lda #$00
   909 229C 8D 1A D0			sta GLOBALS.COLBK
   910
   911 				; ------------------------------------------------------------
   912
   913 = 0000			@FORTMP_00D8	= $00
   914 = 246F			@CASETMP_0003	= DATAORIGIN+$000F
   915
   916 = 246F			@VarData	= @CASETMP_0003
   917 = 0001			@VarDataSize	= 1
   918
   919 229F			@exit
   920 					.ifdef @new
   921 					lda <@VarData
   922 					sta :ztmp
   923 					lda >@VarData
   924 					ldy #@VarDataSize-1
   925 					jmp @FreeMem
   926 					els
   927 229F 60				rts						; ret
   928 					eif
   929 				.endl
   930
   931 				; ------------------------------------------------------------
   932 				; ------------------------------------------------------------
   933 22A0			@UnitInit
   934
   935 22A0 60				rts
   936
   937 				; ------------------------------------------------------------
   938
   939 = 0006			JOYDIRECTION	= $06
   940
   941 				.endl							; UNIT JOY
   942
   943 22A1			.local	VBI						; PROCEDURE | INTERRUPT
   944
   945 				; ---------------------  ASM Block 057  ---------------------
   946
   947 22A1 48 8A 48 98 48	 phr 
   948
   949 				; optimize OK (main.pas), line = 22
   950
   951 22A6 A5 14			lda GLOBALS.RTCLOK
   952 22A8 29 01			and #$01
   953 22AA 85 F3			sta GLOBALS.ODDCOUNTER
   954
   955 				; optimize OK (main.pas), line = 23
   956
   957 22AC A5 14			lda GLOBALS.RTCLOK
   958 22AE A0 01			ldy #1
   959 22B0 29 03			and #$03
   960 22B2 F0 01			beq @+
   961 22B4 88				dey
   962 22B5			@
   963 22B5 98				tya
   964 22B6 85 F2			sta GLOBALS.ISFIRETIME
   965
   966 				; optimize OK (main.pas), line = 27
   967
   968 22B8 F0 25			jeq l_01BF
   969
   970 				; optimize OK (main.pas), line = 28
   971
   972 22BA AD 10 D0			lda GLOBALS.TRIG0
   973 22BD D0 20			jne l_01D2
   974 22BF A5 03			lda SPRITES.BCANNONX
   975 22C1 4A				lsr @
   976 22C2 18 6D 04 11			add GLOBALS.WDL2LMS
   977 22C6 85 A1			sta :STACKORIGIN+9
   978 22C8 AD 05 11			lda GLOBALS.WDL2LMS+1
   979 22CB 69 00			adc #$00
   980 22CD 85 B1			sta :STACKORIGIN+STACKWIDTH+9
   981 22CF A5 A1			lda :STACKORIGIN+9
   982 22D1 18 65 04			add SPRITES.WCANNONY
   983 22D4 A8				tay
   984 22D5 A5 B1			lda :STACKORIGIN+STACKWIDTH+9
   985 22D7 65 05			adc SPRITES.WCANNONY+1
   986 22D9 85 91			sta :bp+1
   987 22DB A9 02			lda #$02
   988 22DD 91 90			sta (:bp),y
   989 22DF			l_01D2
   990 22DF			l_01BF
   991
   992 				; optimize OK (main.pas), line = 31
   993
   994 22DF AD 05 11			lda GLOBALS.WDL2LMS+1
   995 22E2 C9 E0			cmp #$E0
   996 22E4 90 17			jcc l_01FB
   997 22E6 D0 07			bne @+
   998 22E8 AD 04 11			lda GLOBALS.WDL2LMS
   999 22EB C9 01			cmp #$01
  1000 22ED 90 0E			jcc l_01FB
  1001 22EF			@
  1002 22EF AD 04 11 D0 03 CE + 	dew GLOBALS.WDL2LMS
  1003 22FA 4C 07 23			jmp l_0209
  1004 22FD			l_01FB
  1005 22FD A9 3F			lda #$3F
  1006 22FF 8D 04 11			sta GLOBALS.WDL2LMS
  1007 2302 A9 EC			lda #$EC
  1008 2304 8D 05 11			sta GLOBALS.WDL2LMS+1
  1009 2307			l_0209
  1010
  1011 				; optimize OK (main.pas), line = 33
  1012
  1013 2307 AD 04 11			lda GLOBALS.WDL2LMS
  1014 230A 85 FA			sta GLOBALS.WTMP1
  1015 230C AD 05 11			lda GLOBALS.WDL2LMS+1
  1016 230F 85 FB			sta GLOBALS.WTMP1+1
  1017
  1018 				; ---------------------  ASM Block 058  ---------------------
  1019
  1020
  1021 2311 A2 11		        ldx #GAME_SCREEN_ROWS
  1022 2313 A0 00		        ldy #0
  1023 2315 98			  @:    tya
  1024 2316 91 FA		        sta (GLOBALS.WTMP1),y
  1025 2318 A5 FA		        lda GLOBALS.WTMP1
  1026 231A 18 69 28		        add #40
  1027 231D 85 FA		        sta GLOBALS.WTMP1
  1028 231F 90 02		        bcc @+
  1029 2321 E6 FB		        inc GLOBALS.WTMP1+1
  1030 2323 CA			  @:    dex
  1031 2324 10 EF		        bpl @-1
  1032 				  
  1033
  1034 				; ---------------------  ASM Block 059  ---------------------
  1035
  1036 2326 68 A8 68 AA 68	 plr 
  1037 232B 40				rti						; ret
  1038 				.endl
  1039
  1040 232C			.local	JOYHANDLER					; PROCEDURE | INTERRUPT
  1041
  1042 				; ---------------------  ASM Block 060  ---------------------
  1043
  1044 232C 48 8A 48 98 48	 phr 
  1045
  1046 				; optimize OK (main.pas), line = 57
  1047
  1048 2331 A5 F3			lda GLOBALS.ODDCOUNTER
  1049 2333 D0 05			jne l_0225
  1050 2335 AD 00 D3			lda GLOBALS.PORTA
  1051 2338 85 06			sta JOY.JOYDIRECTION
  1052 233A			l_0225
  1053 233A 20 EF 21			jsr JOY.MOVESHIP
  1054
  1055 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 59
  1056
  1057 233D E8				inx
  1058 233E AD 72 24 95 98		mva PSTARS :STACKORIGIN,x
  1059 2343 AD 73 24 95 A8		mva PSTARS+1 :STACKORIGIN+STACKWIDTH,x
  1060 2348 20 F9 20			jsr SYS.SETDLI
  1061
  1062 				; ---------------------  ASM Block 061  ---------------------
  1063
  1064 234B 68 A8 68 AA 68	 plr 
  1065 2350 40				rti						; ret
  1066 				.endl
  1067
  1068 2351			.local	STARS						; PROCEDURE | INTERRUPT
  1069
  1070 				; ---------------------  ASM Block 062  ---------------------
  1071
  1072 2351 48 8A 48 98 48	 phr 
  1073
  1074 				; optimize OK (main.pas), line = 68
  1075
  1076 2356 A9 7C			lda #$7C
  1077 2358 85 FD			sta GLOBALS.B1I
  1078
  1079 235A			l_023F
  1080 				; --- ForToDoCondition
  1081
  1082 				; ---------------------  ASM Block 063  ---------------------
  1083
  1084 235A 8D 0A D4		 sta WSYNC 
  1085
  1086 				; optimize OK (main.pas), line = 70
  1087
  1088 235D A4 FD			ldy GLOBALS.B1I
  1089 235F B9 00 12			lda adr.ASTARS,y
  1090 2362 8D 07 D0			sta GLOBALS.HPOSM3
  1091
  1092 				; optimize OK (main.pas), line = 71
  1093
  1094 2365 B9 00 12			lda adr.ASTARS,y
  1095 2368 38 F9 7D 12			sub adr.ASPEED,y
  1096 236C 99 00 12			sta adr.ASTARS,y
  1097
  1098 				; optimize OK (main.pas), line = 72
  1099
  1100 236F AD 0A D2			lda SYSTEM.RND
  1101 2372 8D 15 D0			sta GLOBALS.COLPM3
  1102
  1103 				; --- ForToDoEpilog
  1104 2375 C6 FD			dec GLOBALS.B1I
  1105 2377 10 E1			jpl l_023F
  1106 2379			l_024D
  1107
  1108 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 75
  1109
  1110 2379 E8				inx
  1111 237A AD 70 24 95 98		mva PJOY :STACKORIGIN,x
  1112 237F AD 71 24 95 A8		mva PJOY+1 :STACKORIGIN+STACKWIDTH,x
  1113 2384 20 F9 20			jsr SYS.SETDLI
  1114
  1115 				; ---------------------  ASM Block 064  ---------------------
  1116
  1117 2387 68 A8 68 AA 68	 plr 
  1118
  1119 				; ------------------------------------------------------------
  1120
  1121 = 0000			@FORTMP_023C	= $00
  1122 238C 40				rti						; ret
  1123 				.endl
  1124
  1125 238D			.local	INIT						; PROCEDURE
  1126
  1127 				; optimize FAIL ('SYSTEM.PAUSE_0067', main.pas), line = 82
  1128
  1129 238D 20 C8 20			jsr SYSTEM.PAUSE_0067
  1130 2390 A9 00			lda #$00
  1131 2392 8D 00 D4			sta GLOBALS.DMACTL
  1132 2395 20 11 21			jsr SYS.SYSTEMOFF
  1133
  1134 				; optimize OK (main.pas), line = 84
  1135
  1136 2398 A9 18			lda #$18
  1137 239A 8D 09 D4			sta GLOBALS.CHBAS
  1138
  1139 				; optimize OK (main.pas), line = 86
  1140
  1141 239D A9 3F			lda #$3F
  1142 239F 85 88			sta :edx
  1143 23A1 A9 EC			lda #$EC
  1144 23A3 85 89			sta :edx+1
  1145 23A5 A9 C0			lda #$C0
  1146 23A7 85 8C			sta :ecx
  1147 23A9 A9 03			lda #$03
  1148 23AB 85 8D			sta :ecx+1
  1149 23AD A9 00			lda #$00
  1150 23AF 85 84			sta :eax
  1151 23B1 20 00 20			jsr @fill
  1152
  1153 				; optimize OK (main.pas), line = 88
  1154
  1155 23B4 A9 7C			lda #$7C
  1156 23B6 85 FD			sta GLOBALS.B1I
  1157
  1158 23B8			l_0288
  1159 				; --- ForToDoCondition
  1160
  1161 				; optimize OK (main.pas), line = 89
  1162
  1163 23B8 A4 FD			ldy GLOBALS.B1I
  1164 23BA AD 0A D2			lda SYSTEM.RND
  1165 23BD 99 00 12			sta adr.ASTARS,y
  1166
  1167 				; optimize OK (main.pas), line = 90
  1168
  1169 23C0 29 03			and #$03
  1170 23C2 18 69 01			add #$01
  1171 23C5 99 7D 12			sta adr.ASPEED,y
  1172
  1173 				; --- ForToDoEpilog
  1174 23C8 C6 FD			dec GLOBALS.B1I
  1175 23CA 10 EC			jpl l_0288
  1176 23CC			l_0296
  1177
  1178 				; optimize OK (main.pas), line = 93
  1179
  1180 23CC AD 02 D3			lda GLOBALS.PACTL
  1181 23CF 09 04			ora #$04
  1182 23D1 8D 02 D3			sta GLOBALS.PACTL
  1183 23D4 20 81 21			jsr SPRITES.INIT
  1184 23D7 20 2D 21			jsr GR.MODE2
  1185
  1186 				; optimize OK (main.pas), line = 94
  1187
  1188 23DA A9 00			lda #$00
  1189 23DC 8D 1A D0			sta GLOBALS.COLBK
  1190 23DF 8D 16 D0			sta GLOBALS.COLPF0
  1191 23E2 A9 0F			lda #$0F
  1192 23E4 8D 17 D0			sta GLOBALS.COLPF1
  1193 23E7 A9 02			lda #$02
  1194 23E9 8D 18 D0			sta GLOBALS.COLPF2
  1195 23EC A9 00			lda #$00
  1196 23EE 8D 19 D0			sta GLOBALS.COLPF3
  1197
  1198 				; optimize OK (main.pas), line = 95
  1199
  1200 23F1 A9 2C			lda <JOYHANDLER
  1201 23F3 8D 70 24			sta PJOY
  1202 23F6 A9 23			lda >JOYHANDLER
  1203 23F8 8D 71 24			sta PJOY+1
  1204 23FB A9 51			lda <STARS
  1205 23FD 8D 72 24			sta PSTARS
  1206 2400 A9 23			lda >STARS
  1207 2402 8D 73 24			sta PSTARS+1
  1208
  1209 				; optimize OK (main.pas), line = 97
  1210
  1211 2405 A9 06			lda #$06
  1212 2407 85 03			sta SPRITES.BCANNONX
  1213 2409 A9 03			lda #$03
  1214 240B 85 8C			sta :ecx
  1215 240D A5 02			lda SPRITES.BSHIPY
  1216 240F 85 84			sta :eax
  1217 					.ifdef fmulinit
  1218 					fmulu_8
  1219 					els
  1220 2411 20 48 20			imulCL
  1221 					eif
  1222 2414 A5 84			lda :eax
  1223 2416 85 04			sta SPRITES.WCANNONY
  1224 2418 A5 85			lda :eax+1
  1225 241A 85 05			sta SPRITES.WCANNONY+1
  1226
  1227 				; optimize FAIL ('SYS.SETVBI', main.pas), line = 99
  1228
  1229 241C E8				inx
  1230 241D A9 A1 95 98			mva <VBI :STACKORIGIN,x
  1231 2421 A9 22 95 A8			mva >VBI :STACKORIGIN+STACKWIDTH,x
  1232 2425 20 E1 20			jsr SYS.SETVBI
  1233
  1234 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 100
  1235
  1236 2428 E8				inx
  1237 2429 A9 2C 95 98			mva <JOYHANDLER :STACKORIGIN,x
  1238 242D A9 23 95 A8			mva >JOYHANDLER :STACKORIGIN+STACKWIDTH,x
  1239 2431 20 F9 20			jsr SYS.SETDLI
  1240
  1241 				; optimize FAIL ('SYSTEM.PAUSE_0067', main.pas), line = 102
  1242
  1243 2434 20 C8 20			jsr SYSTEM.PAUSE_0067
  1244 2437 A9 3E			lda #$3E
  1245 2439 8D 00 D4			sta GLOBALS.DMACTL
  1246
  1247 				; ------------------------------------------------------------
  1248
  1249 = 0000			@FORTMP_0285	= $00
  1250 243C			@exit
  1251 					.ifdef @new
  1252 					lda <@VarData
  1253 					sta :ztmp
  1254 					lda >@VarData
  1255 					ldy #@VarDataSize-1
  1256 					jmp @FreeMem
  1257 					els
  1258 243C 60				rts						; ret
  1259 					eif
  1260 				.endl
  1261 243D			l_0007
  1262
  1263 				; optimize FAIL ('INIT', main.pas), line = 106
  1264
  1265 243D 20 8D 23			jsr INIT
  1266
  1267 				; --- RepeatUntilProlog
  1268 2440			l_02F3
  1269
  1270 				; optimize OK (main.pas), line = 107
  1271
  1272 2440 4C 40 24			jmp l_02F3
  1273
  1274 				; ------------------------------------------------------------
  1275
  1276 = 1000			PM_ADR	= $1000
  1277 = 1300			M0_ADR	= $1300
  1278 = 1400			P0_ADR	= $1400
  1279 = 1500			P1_ADR	= $1500
  1280 = 1000			GFX_SHIP_ADR	= $1000
  1281 = 0008			GFX_SHIP_SEG	= $08
  1282 = 1800			GFX_FONTS_ADR	= $1800
  1283 = 1100			DL_2	= $1100
  1284 = EC3F			GAME_LMS	= $EC3F
  1285 = E000			GAME_LMS_END	= $E000
  1286 = 0011			GAME_SCREEN_ROWS	= $11
  1287 = 0E0E			SHIP_COL	= $0E0E
  1288 = 0030			SHIP_LEFT_LIMIT	= $30
  1289 = 00B0			SHIP_RIGHT_LIMIT	= $B0
  1290 = 0020			SHIP_TOP_LIMIT	= $20
  1291 = 00A8			SHIP_BOTTOM_LIMIT	= $A8
  1292 = 0202			SHIP_X_STEP	= $0202
  1293 = 0004			SHIP_Y_STEP	= $04
  1294 = 0008			JOY_LEFT	= $08
  1295 = 0004			JOY_RIGHT	= $04
  1296 = 0002			JOY_UP	= $02
  1297 = 0001			JOY_DOWN	= $01
  1298 = 1200			adr.ASTARS	= $1200
  1299 2443			.var ASTARS	= adr.ASTARS .word
  1300 = 127D			adr.ASPEED	= $127D
  1301 2443			.var ASPEED	= adr.ASPEED .word
  1302 = 2470			PJOY	= DATAORIGIN+$0010
  1303 = 2472			PSTARS	= DATAORIGIN+$0012
  1304 2443			@exit
  1305
  1306 2443 A2 00		@halt	ldx #$00
  1307 2445 9A				txs
  1308 					.ifdef MAIN.@DEFINES.ROMOFF
  1309 					inc portb
  1310 					.endif
  1311
  1312 2446 A0 01			ldy #$01
  1313
  1314 2448 60				rts
  1315
  1316 				; ------------------------------------------------------------
  1317
  1318 2449 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1319
  1320 				; ------------------------------------------------------------
  1321
  1322 2459			.local	@DEFINES
  1323 2459			ATARI
  1324 				.endl
  1325
  1326 2459			.local	@RESOURCE
  1327 				.endl
  1328
  1329 = 2459 00 12		ASTARS
  1329 = 245B 7D 12		ASPEED
  1329 				.endl							; MAIN
  1330
  1331 				; ------------------------------------------------------------
  1332 				; ------------------------------------------------------------
  1333
  1334 				.macro	UNITINITIALIZATION
  1335 				
  1336 					.ifdef MAIN.SYSTEM.@UnitInit
  1337 					jsr MAIN.SYSTEM.@UnitInit
  1338 					eif
  1339 				
  1340 					.ifdef MAIN.GLOBALS.@UnitInit
  1341 					jsr MAIN.GLOBALS.@UnitInit
  1342 					eif
  1343 				
  1344 					.ifdef MAIN.SYS.@UnitInit
  1345 					jsr MAIN.SYS.@UnitInit
  1346 					eif
  1347 				
  1348 					.ifdef MAIN.GR.@UnitInit
  1349 					jsr MAIN.GR.@UnitInit
  1350 					eif
  1351 				
  1352 					.ifdef MAIN.SPRITES.@UnitInit
  1353 					jsr MAIN.SPRITES.@UnitInit
  1354 					eif
  1355 				
  1356 					.ifdef MAIN.JOY.@UnitInit
  1357 					jsr MAIN.JOY.@UnitInit
  1358 					eif
  1359 				.endm
  1360
  1361 				; ------------------------------------------------------------
  1362
  1363 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1364 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1364 				SYSTEM: $2098..$20D2
  1365 					eif
  1366
  1367 					ift .SIZEOF(MAIN.GLOBALS) > 0
  1368 					.print 'GLOBALS: ',MAIN.GLOBALS,'..',MAIN.GLOBALS+.SIZEOF(MAIN.GLOBALS)-1
  1369 					eif
  1370
  1371 					ift .SIZEOF(MAIN.SYS) > 0
  1372 					.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
  1372 				SYS: $20D3..$212C
  1373 					eif
  1374
  1375 					ift .SIZEOF(MAIN.GR) > 0
  1376 					.print 'GR: ',MAIN.GR,'..',MAIN.GR+.SIZEOF(MAIN.GR)-1
  1376 				GR: $212D..$2138
  1377 					eif
  1378
  1379 					ift .SIZEOF(MAIN.SPRITES) > 0
  1380 					.print 'SPRITES: ',MAIN.SPRITES,'..',MAIN.SPRITES+.SIZEOF(MAIN.SPRITES)-1
  1380 				SPRITES: $2139..$21EE
  1381 					eif
  1382
  1383 					ift .SIZEOF(MAIN.JOY) > 0
  1384 					.print 'JOY: ',MAIN.JOY,'..',MAIN.JOY+.SIZEOF(MAIN.JOY)-1
  1384 				JOY: $21EF..$22A0
  1385 					eif
  1386
  1387 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1387 				CODE: $2000..$2458
  1388
  1389 				; ------------------------------------------------------------
  1390
  1391 245D				.align $04
  1392
  1393 2460			DATAORIGIN
  1394 2460-2465> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  1395
  1396 = 0006			VARINITSIZE	= *-DATAORIGIN
  1397 = 0014			VARDATASIZE	= 20
  1398
  1399 = 2474			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1400
  1401 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1401 				DATA: $2460..$2474
  1402
  1403 02E0-02E1> 5C 20			run START
  1404
  1405 				; ------------------------------------------------------------
  1406
  1407 				.macro	STATICDATA
  1408 				.endm
  1409
  1410 					end
