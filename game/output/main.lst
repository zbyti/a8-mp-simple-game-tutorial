mads 2.1.1
  1133 					opt l+
    98 = 0000				?EXTDETECT = 0
    99 = 0000				?VBXDETECT = 0
   100
   101 2075				RCASM 'res/gr_dl.asm' GLOBALS.DL_2 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 001A			len = .sizeof(_GLOBALS.DL_2)
     6 				mcpy	ift main.GLOBALS.DL_2+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 11 +  MWA #MAIN.GLOBALS.DL_2 ECX
    13 2088 A9 1A 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: const.inc
     1 = 1000			PM_ADR              = $1000;                      // players & missiles memory (2K) start address
     2 = 1300			M0_ADR              = PM_ADR + $300;              // missile 0 start memory address
     3 = 1400			P0_ADR              = PM_ADR + $400;              // player 0 start memory address
     4 = 1500			P1_ADR              = PM_ADR + $500;              // player 1 start memory address
     5 = 1000			GFX_SHIP_ADR        = $1000;                      // ship gfx memory start address, ship size = 20 bytes, 16 bytes for gfx and 4 bytes fo top/bottom empty rows
     6 = 0008			GFX_SHIP_SEG        = 8;                          // ship gfx 10 byte segment, 10B for P0 & 10B for P1
     8 = 1800			GFX_FONTS_ADR       = $1800;
    10 = 1100			DL_2                = $1100;                      // display list memory start address for ANTIC mode 2
    11 = ED57			GAME_LMS            = $efff - (17 * 40);          // Load Memory Scan address
    12 = E000			GAME_LMS_END        = $e000;
    13 = 0011			GAME_SCREEN_ROWS    = 17;
    15 = 0E0E			SHIP_COL            = $0e0e;
    16 = 0030			SHIP_LEFT_LIMIT     = 48;
    17 = 00B0			SHIP_RIGHT_LIMIT    = SHIP_LEFT_LIMIT + (16 * 8);
    18 = 0020			SHIP_TOP_LIMIT      = 32;
    19 = 00A8			SHIP_BOTTOM_LIMIT   = SHIP_TOP_LIMIT + GFX_SHIP_SEG * GAME_SCREEN_ROWS;
    20 = 0202			SHIP_X_STEP         = $0202;
    21 = 0004			SHIP_Y_STEP         = 4;
    23 = 0008			JOY_LEFT            = %1000;
    24 = 0004			JOY_RIGHT           = %0100;
    25 = 0002			JOY_UP              = %0010;
    26 = 0001			JOY_DOWN            = %0001;
     3 1100			dl2
     4 1100 F0 70 F0		    .byte $f0,$70,$f0
     5 1103 42 57 ED		    .byte $42,a(GAME_LMS)
     6 1106 02 02 02 02 02 02 + :17 .byte 2
     7 1117 41 00 11		    .byte $41,a(dl2)
    23 					.print '$R RCASM   ',main.GLOBALS.DL_2,'..',main.GLOBALS.DL_2+len-1," 'res/gr_dl.asm'"
    23 				$R RCASM   $1100..$1119 'res/gr_dl.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: main.a65
   102 20B0				RCDATA 'res/gfx_ship.bin' GLOBALS.GFX_SHIP_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0010			len = .filesize('res/gfx_ship.bin')
    28 20B0				org main.GLOBALS.GFX_SHIP_ADR
    30 1000-100F> 70 7B 1E 3F + 	ins 'res/gfx_ship.bin'
    32 					.print '$R RCDATA  ',main.GLOBALS.GFX_SHIP_ADR,'..',*-1," 'res/gfx_ship.bin'"
    32 				$R RCDATA  $1000..$100F 'res/gfx_ship.bin'
Source: main.a65
   103 1010				RCDATA 'res/charset.fnt' GLOBALS.GFX_FONTS_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0400			len = .filesize('res/charset.fnt')
    28 1010				org main.GLOBALS.GFX_FONTS_ADR
    30 1800-1BFF> 00 00 00 00 + 	ins 'res/charset.fnt'
    32 					.print '$R RCDATA  ',main.GLOBALS.GFX_FONTS_ADR,'..',*-1," 'res/charset.fnt'"
    32 				$R RCDATA  $1800..$1BFF 'res/charset.fnt'
Source: main.a65
   104 				.endl
   105
   106 				; ------------------------------------------------------------
   107
   108 1C00				org CODEORIGIN
   109
   110 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
Source: main.a65
   111
   112 				; ------------------------------------------------------------
   113
   114 2000			RTLIB
   115 2000				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
   148 					opt l+
   116
   117 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   117 				ZPAGE: $0080..$00D7
   118
   119 				.print 'RTLIB: ',RTLIB,'..',*-1
   119 				RTLIB: $2000..$205B
   120
   121 				; ------------------------------------------------------------
   122
   123 205C			START
   124 205C BA				tsx
   125 205D 8E 4C 24			stx MAIN.@halt+1
   126
   127 					.ifdef fmulinit
   128 					fmulinit
   129 					eif
   130
   131 = 000E			VLEN	= VARDATASIZE-VARINITSIZE
   132 = 246E			VADR	= DATAORIGIN+VARINITSIZE
   133
   134 					ift VADR > $BFFF
   135 					ert 'Invalid memory address range ',VADR
   136 					eli (VLEN>0) && (VLEN<=256)
   137 2060 A2 F2			ldx #256-VLEN
   138 2062 A9 00			lda #$00
   139 2064 9D 7C 23 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   140 					eli VLEN>0
   141 					@fill #VADR #VLEN #$00
   142 					eif
   143
   144 206A A9 7C 85 82 A9 24 + 	mwa #PROGRAMSTACK psptr
   145
   146 					.ifdef MAIN.@DEFINES.ROMOFF
   147 					icl 'atari\romoff.asm'
   148 					.endif
   149
   150 2072 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   151 2074 BD 40 03 9D 51 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   152
   153 207D E8				inx						; X = 0
   154 207E 86 90			stx bp						; BP = 0
   155
   156 2080 8E 08 D2			stx audctl					; reset POKEY
   157 2083 A9 03			lda #3
   158 2085 8D 0F D2			sta skctl
   159
   160 2088 CA				dex						; X = 255
   161
   162 2089				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
    11 2089 20 2C 21			jsr MAIN.SYS.@UnitInit
    15 208C 20 38 21			jsr MAIN.GR.@UnitInit
    19 208F 20 03 22			jsr MAIN.SPRITES.@UnitInit
    23 2092 20 A8 22			jsr MAIN.JOY.@UnitInit
   163
   164 2095			.local	MAIN						; PROCEDURE
   165
   166 2095 4C 45 24			jmp l_0007
   167
   168 				; ------------------------------------------------------------
   169
   170 2098			.local	SYSTEM						; UNIT
   171
   172 2098			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   173
   174 				; ------------------------------------------------------------
   175
   176 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   177 				; as Pointer
   178 2098 B5 98			lda :STACKORIGIN,x
   179 209A 85 8C			sta VALUE
   180 209C CA				dex
   181
   182 				; ------------------------------------------------------------
   183
   184 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   185 				; as Pointer
   186 209D B5 98			lda :STACKORIGIN,x
   187 209F 85 88			sta A
   188 20A1 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   189 20A3 85 89			sta A+1
   190 20A5 CA				dex
   191
   192 				; ---------------------  ASM Block 021  ---------------------
   193
   194 20A6 A0 00			ldy #0
   195 20A8 A5 8C 91 88			mva value (edx),y
   196
   197
   198 				; ------------------------------------------------------------
   199
   200 = 0088			A	= edx
   201 = 008C			VALUE	= ecx
   202 20AC			@exit
   203 					.ifdef @new
   204 					lda <@VarData
   205 					sta :ztmp
   206 					lda >@VarData
   207 					ldy #@VarDataSize-1
   208 					jmp @FreeMem
   209 					els
   210 20AC 60				rts						; ret
   211 					eif
   212 				.endl
   213
   214 20AD			.local	FILLBYTE_0049					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   215
   216 				; ------------------------------------------------------------
   217
   218 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   219 				; as Pointer
   220 20AD B5 98			lda :STACKORIGIN,x
   221 20AF 85 84			sta VALUE
   222 20B1 CA				dex
   223
   224 				; ------------------------------------------------------------
   225
   226 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   227 				; as Pointer
   228 20B2 B5 98			lda :STACKORIGIN,x
   229 20B4 85 8C			sta COUNT
   230 20B6 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   231 20B8 85 8D			sta COUNT+1
   232 20BA CA				dex
   233
   234 				; ------------------------------------------------------------
   235
   236 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   237 				; as Pointer
   238 20BB B5 98			lda :STACKORIGIN,x
   239 20BD 85 88			sta A
   240 20BF B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   241 20C1 85 89			sta A+1
   242 20C3 CA				dex
   243
   244 				; ---------------------  ASM Block 029  ---------------------
   245
   246 20C4 20 00 20			jsr @fill
   247
   248
   249 				; ------------------------------------------------------------
   250
   251 = 0088			A	= edx
   252 = 008C			COUNT	= ecx
   253 = 0084			VALUE	= eax
   254 20C7			@exit
   255 					.ifdef @new
   256 					lda <@VarData
   257 					sta :ztmp
   258 					lda >@VarData
   259 					ldy #@VarDataSize-1
   260 					jmp @FreeMem
   261 					els
   262 20C7 60				rts						; ret
   263 					eif
   264 				.endl
   265
   266 20C8			.local	PAUSE_0067					; PROCEDURE | ASSEMBLER | OVERLOAD
   267
   268 				; ---------------------  ASM Block 039  ---------------------
   269
   270 20C8 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   271
   272 20CE			@exit
   273 					.ifdef @new
   274 					lda <@VarData
   275 					sta :ztmp
   276 					lda >@VarData
   277 					ldy #@VarDataSize-1
   278 					jmp @FreeMem
   279 					els
   280 20CE 60				rts						; ret
   281 					eif
   282 				.endl
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0101			__PORTB_BANKS	= $0101
   287 = 0648			M_PI_2	= $0648
   288 = 0192			D_PI_2	= $0192
   289 = 0004			D_PI_180	= $04
   290 = 0000			MGTIA	= $00
   291 = 0080			MVBXE	= $80
   292 = 0000			VBXE_XDLADR	= $00
   293 = 0100			VBXE_BCBADR	= $0100
   294 = 1000			VBXE_MAPADR	= $1000
   295 = 5000			VBXE_OVRADR	= $5000
   296 = B000			VBXE_WINDOW	= $B000
   297 = 0000			IDLI	= $00
   298 = 0001			IVBL	= $01
   299 = 00FE			CH_DELCHR	= $FE
   300 = 009B			CH_ENTER	= $9B
   301 = 001B			CH_ESC	= $1B
   302 = 001C			CH_CURS_UP	= $1C
   303 = 001D			CH_CURS_DOWN	= $1D
   304 = 001E			CH_CURS_LEFT	= $1E
   305 = 001F			CH_CURS_RIGHT	= $1F
   306 = 007F			CH_TAB	= $7F
   307 = 009B			CH_EOL	= $9B
   308 = 007D			CH_CLR	= $7D
   309 = 00FD			CH_BELL	= $FD
   310 = 007E			CH_DEL	= $7E
   311 = 009C			CH_DELLINE	= $9C
   312 = 009D			CH_INSLINE	= $9D
   313 = 0000			COLOR_BLACK	= $00
   314 = 000E			COLOR_WHITE	= $0E
   315 = 0032			COLOR_RED	= $32
   316 = 0096			COLOR_CYAN	= $96
   317 = 0068			COLOR_VIOLET	= $68
   318 = 00C4			COLOR_GREEN	= $C4
   319 = 0074			COLOR_BLUE	= $74
   320 = 00EE			COLOR_YELLOW	= $EE
   321 = 0028			COLOR_ORANGE	= $28
   322 = 00E4			COLOR_BROWN	= $E4
   323 = 003C			COLOR_LIGHTRED	= $3C
   324 = 0004			COLOR_GRAY1	= $04
   325 = 0006			COLOR_GRAY2	= $06
   326 = 000A			COLOR_GRAY3	= $0A
   327 = 00CC			COLOR_LIGHTGREEN	= $CC
   328 = 007C			COLOR_LIGHTBLUE	= $7C
   329 = 0004			FMOPENREAD	= $04
   330 = 0008			FMOPENWRITE	= $08
   331 = 0009			FMOPENAPPEND	= $09
   332 = 000C			FMOPENREADWRITE	= $0C
   333 = 2468			SCREENWIDTH	= DATAORIGIN+$0000
   334 = 246A			SCREENHEIGHT	= DATAORIGIN+$0002
   335 = 246C			DATESEPARATOR	= DATAORIGIN+$0004
   336 = D014			TVSYSTEM	= $D014
   337 = D20A			RND	= $D20A
   338 = 02C0			adr.PALETTE	= $02C0
   339 20CF			.var PALETTE	= adr.PALETTE .word
   340 = D012			adr.HPALETTE	= $D012
   341 20CF			.var HPALETTE	= adr.HPALETTE .word
   342 = 246D			FILEMODE	= DATAORIGIN+$0005
   343 = 246E			GRAPHMODE	= DATAORIGIN+$0006
   344 = 246F			IORESULT	= DATAORIGIN+$0007
   345 = 2470			EOLN	= DATAORIGIN+$0008
   346 = 2471			RNDSEED	= DATAORIGIN+$0009
   347
   348 = 20CF C0 02		PALETTE
   348 = 20D1 12 D0		HPALETTE
   348 				.endl							; UNIT SYSTEM
   349
   350 				; ------------------------------------------------------------
   351
   352 20D3			.local	GLOBALS						; UNIT
   353
   354 				; ------------------------------------------------------------
   355
   356 = 1000			PM_ADR	= $1000
   357 = 1300			M0_ADR	= $1300
   358 = 1400			P0_ADR	= $1400
   359 = 1500			P1_ADR	= $1500
   360 = 1000			GFX_SHIP_ADR	= $1000
   361 = 0008			GFX_SHIP_SEG	= $08
   362 = 1800			GFX_FONTS_ADR	= $1800
   363 = 1100			DL_2	= $1100
   364 = ED57			GAME_LMS	= $ED57
   365 = E000			GAME_LMS_END	= $E000
   366 = 0011			GAME_SCREEN_ROWS	= $11
   367 = 0E0E			SHIP_COL	= $0E0E
   368 = 0030			SHIP_LEFT_LIMIT	= $30
   369 = 00B0			SHIP_RIGHT_LIMIT	= $B0
   370 = 0020			SHIP_TOP_LIMIT	= $20
   371 = 00A8			SHIP_BOTTOM_LIMIT	= $A8
   372 = 0202			SHIP_X_STEP	= $0202
   373 = 0004			SHIP_Y_STEP	= $04
   374 = 0008			JOY_LEFT	= $08
   375 = 0004			JOY_RIGHT	= $04
   376 = 0002			JOY_UP	= $02
   377 = 0001			JOY_DOWN	= $01
   378 = 0014			RTCLOK	= $14
   379 = D000			HPOSP0	= $D000
   380 = D001			HPOSP1	= $D001
   381 = D004			HPOSM0	= $D004
   382 = D005			HPOSM1	= $D005
   383 = D006			HPOSM2	= $D006
   384 = D007			HPOSM3	= $D007
   385 = D008			SIZEP0	= $D008
   386 = D009			SIZEP1	= $D009
   387 = D00A			SIZEP2	= $D00A
   388 = D00B			SIZEP3	= $D00B
   389 = D00C			SIZEM	= $D00C
   390 = D010			GRAFP3	= $D010
   391 = D010			TRIG0	= $D010
   392 = D011			GRAFM	= $D011
   393 = D012			COLPM0	= $D012
   394 = D013			COLPM1	= $D013
   395 = D014			COLPM2	= $D014
   396 = D015			COLPM3	= $D015
   397 = D016			COLPF0	= $D016
   398 = D017			COLPF1	= $D017
   399 = D018			COLPF2	= $D018
   400 = D019			COLPF3	= $D019
   401 = D01A			COLBK	= $D01A
   402 = D01B			PRIOR	= $D01B
   403 = D01D			GRACTL	= $D01D
   404 = D20A			RND	= $D20A
   405 = D300			PORTA	= $D300
   406 = D301			PORTB	= $D301
   407 = D302			PACTL	= $D302
   408 = D400			DMACTL	= $D400
   409 = D402			DLIST	= $D402
   410 = D407			PMBASE	= $D407
   411 = D409			CHBAS	= $D409
   412 = D40A			WSYNC	= $D40A
   413 = D40B			VCOUNT	= $D40B
   414 = D40E			NMIEN	= $D40E
   415 = FFFA			NMIVEC	= $FFFA
   416 = D000			HPOSP01	= $D000
   417 = D008			SIZEP01	= $D008
   418 = D012			COLPM01	= $D012
   419 = 1104			WDL2LMS	= $1104
   420 = 00FF			BTMP1	= $FF
   421 = 00FE			BTMP2	= $FE
   422 = 00FD			B1I	= $FD
   423 = 00FC			B2I	= $FC
   424 = 00FA			WTMP1	= $FA
   425 = 00F8			WTMP2	= $F8
   426 = 00F6			WTMP3	= $F6
   427 = 00F4			WTMP4	= $F4
   428 = 00F3			ODDCOUNTER	= $F3
   429 = 00F2			ISFIRETIME	= $F2
   430
   431 				.endl							; UNIT GLOBALS
   432
   433 				; ------------------------------------------------------------
   434
   435 20D3			.local	SYS						; UNIT
   436
   437 20D3			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
   438
   439 				; ---------------------  ASM Block 049  ---------------------
   440
   441
   442 				      bit NMIST \ bpl vbi     ; check kind of interrupt
   442 20D3 2C 0F D4		      BIT NMIST 
   442 20D6 10 03		 BPL VBI     
   443 = 20D8			.def  :__dlijmp
   444 20D8 4C E0 20		      jmp __off               ; VDSLST
   445 20DB E6 14		vbi:  inc RTCLOK+2
   446 = 20DD			.def  :__vbijmp
   447 20DD 4C E0 20		      jmp __off               ; VBIVEC
   448 = 20E0			.def  :__off
   449
   450 20E0 40				rti						; ret
   451 				.endl
   452
   453 20E1			.local	SETVBI						; PROCEDURE | ASSEMBLER
   454
   455 				; ------------------------------------------------------------
   456
   457 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   458 				; as Pointer
   459 20E1 B5 98			lda :STACKORIGIN,x
   460 20E3 8D 73 24			sta A
   461 20E6 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   462 20E8 8D 74 24			sta A+1
   463 20EB CA				dex
   464
   465 				; ---------------------  ASM Block 050  ---------------------
   466
   467
   468 20EC AD 73 24 8D DE 20 +   mwa a __vbijmp+1
   469
   470
   471 				; ------------------------------------------------------------
   472
   473 = 2473			A	= DATAORIGIN+$000B
   474
   475 = 2473			@VarData	= A
   476 = 0002			@VarDataSize	= 2
   477
   478 20F8			@exit
   479 					.ifdef @new
   480 					lda <@VarData
   481 					sta :ztmp
   482 					lda >@VarData
   483 					ldy #@VarDataSize-1
   484 					jmp @FreeMem
   485 					els
   486 20F8 60				rts						; ret
   487 					eif
   488 				.endl
   489
   490 20F9			.local	SETDLI						; PROCEDURE | ASSEMBLER
   491
   492 				; ------------------------------------------------------------
   493
   494 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   495 				; as Pointer
   496 20F9 B5 98			lda :STACKORIGIN,x
   497 20FB 8D 75 24			sta A
   498 20FE B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   499 2100 8D 76 24			sta A+1
   500 2103 CA				dex
   501
   502 				; ---------------------  ASM Block 051  ---------------------
   503
   504
   505 2104 AD 75 24 8D D9 20 +   mwa a __dlijmp+1
   506
   507
   508 				; ------------------------------------------------------------
   509
   510 = 2475			A	= DATAORIGIN+$000D
   511
   512 = 2475			@VarData	= A
   513 = 0002			@VarDataSize	= 2
   514
   515 2110			@exit
   516 					.ifdef @new
   517 					lda <@VarData
   518 					sta :ztmp
   519 					lda >@VarData
   520 					ldy #@VarDataSize-1
   521 					jmp @FreeMem
   522 					els
   523 2110 60				rts						; ret
   524 					eif
   525 				.endl
   526
   527 2111			.local	SYSTEMOFF					; PROCEDURE
   528
   529 				; ---------------------  ASM Block 054  ---------------------
   530
   531 2111 78			 sei 
   532
   533 				; optimize OK (SYS), line = 63
   534
   535 2112 A9 00			lda #$00
   536 2114 8D 0E D4			sta GLOBALS.NMIEN
   537 2117 A9 FE			lda #$FE
   538 2119 8D 01 D3			sta GLOBALS.PORTB
   539 211C A9 D3			lda <NMI
   540 211E 8D FA FF			sta GLOBALS.NMIVEC
   541 2121 A9 20			lda >NMI
   542 2123 8D FB FF			sta GLOBALS.NMIVEC+1
   543 2126 A9 C0			lda #$C0
   544 2128 8D 0E D4			sta GLOBALS.NMIEN
   545 212B			@exit
   546 					.ifdef @new
   547 					lda <@VarData
   548 					sta :ztmp
   549 					lda >@VarData
   550 					ldy #@VarDataSize-1
   551 					jmp @FreeMem
   552 					els
   553 212B 60				rts						; ret
   554 					eif
   555 				.endl
   556
   557 				; ------------------------------------------------------------
   558 				; ------------------------------------------------------------
   559 212C			@UnitInit
   560
   561 212C 60				rts
   562
   563 				; ------------------------------------------------------------
   564
   565 				.endl							; UNIT SYS
   566
   567 				; ------------------------------------------------------------
   568
   569 212D			.local	GR						; UNIT
   570
   571 212D			.local	MODE2						; PROCEDURE
   572
   573 				; optimize OK (GR), line = 17
   574
   575 212D A9 00			lda #$00
   576 212F 8D 02 D4			sta GLOBALS.DLIST
   577 2132 A9 11			lda #$11
   578 2134 8D 03 D4			sta GLOBALS.DLIST+1
   579 2137			@exit
   580 					.ifdef @new
   581 					lda <@VarData
   582 					sta :ztmp
   583 					lda >@VarData
   584 					ldy #@VarDataSize-1
   585 					jmp @FreeMem
   586 					els
   587 2137 60				rts						; ret
   588 					eif
   589 				.endl
   590
   591 				; ------------------------------------------------------------
   592 				; ------------------------------------------------------------
   593 2138			@UnitInit
   594
   595 2138 60				rts
   596
   597 				; ------------------------------------------------------------
   598
   599 				.endl							; UNIT GR
   600
   601 				; ------------------------------------------------------------
   602
   603 2139			.local	SPRITES						; UNIT
   604
   605 2139			.local	COPYSHIP					; PROCEDURE | ASSEMBLER
   606
   607 				; ---------------------  ASM Block 055  ---------------------
   608
   609
   610 2139 8D 0A D4		        sta WSYNC
   611 213C A9 0F 8D 1A D0	        mva #$f COLBAK
   612
   613
   614 2141 A0 14		        ldy #>P0_ADR
   615 2143 8C 5F 21		        sty p0Ship+2
   616 2146 8C 89 21		        sty clrP0+2
   617 2149 C8			        iny
   618 214A 8C 65 21		        sty p1Ship+2
   619 214D 8C 8C 21		        sty clrP1+2
   620
   621 2150 A4 02		        ldy BSHIPY
   622 2152 8C 5E 21		        sty p0Ship+1
   623 2155 8C 64 21		        sty p1Ship+1
   624
   625 				        ;move
   626 2158 A0 07		        ldy #GFX_SHIP_SEG-1
   627 215A B9 00 10		@:      lda GFX_SHIP_ADR,y
   628 215D 99 00 14		p0Ship: sta P0_ADR,y
   629 2160 B9 08 10		        lda GFX_SHIP_ADR+GFX_SHIP_SEG,y
   630 2163 99 00 15		p1Ship: sta P1_ADR,y
   631 2166 88			        dey
   632 2167 10 F1		        bpl @-
   633
   634 				        ;clear
   635 2169 A4 02		        ldy BSHIPY
   636 216B A5 06		        lda JOY.JOYDIRECTION
   637 216D 29 03		        and #%0011
   638 216F C9 01		        cmp #JOY_DOWN
   639 2171 F0 06		        beq @+
   640 2173 98			        tya
   641 2174 18 69 08		        add #SHIP_Y_STEP*2
   642 2177 D0 04		        bne @+1
   643 2179 98			@:      tya
   644 217A 38 E9 04		        sub #SHIP_Y_STEP
   645 217D 8D 88 21		@:      sta clrP0+1
   646 2180 8D 8B 21		        sta clrP1+1
   647
   648 2183 A9 00		        lda #0
   649 2185 A0 03		        ldy #GFX_SHIP_SEG-SHIP_Y_STEP-1
   650 2187 99 00 14		clrP0:  sta P0_ADR,y
   651 218A 99 00 15		clrP1:  sta P1_ADR,y
   652 218D 88			        dey
   653 218E 10 F7		        bpl clrP0
   654
   655 2190 A9 00 8D 1A D0	        mva #0 COLBAK
   656
   657
   658 2195			@exit
   659 					.ifdef @new
   660 					lda <@VarData
   661 					sta :ztmp
   662 					lda >@VarData
   663 					ldy #@VarDataSize-1
   664 					jmp @FreeMem
   665 					els
   666 2195 60				rts						; ret
   667 					eif
   668 				.endl
   669
   670 2196			.local	INIT						; PROCEDURE
   671
   672 				; optimize OK (SPRITES), line = 80
   673
   674 2196				.LOCAL
   675 2196 A0 00			ldy #$00
   676 2198 98				tya
   677 2199 99 00 13 99 80 13 + fill	:10 sta $1300+#*$80,y
   678 21B7 C8				iny
   679 21B8 10 DF			bpl fill
   680 					.ENDL
   681
   682 				; optimize OK (SPRITES), line = 81
   683
   684 21BA A0 70			ldy #256-$90
   685 21BC A9 FF			lda #$FF
   686 21BE 99 B0 12 C8 D0 FA		sta:rne $1320+$90-256,y+
   687
   688 				; optimize OK (SPRITES), line = 83
   689
   690 21C4 A9 10			lda #$10
   691 21C6 8D 07 D4			sta GLOBALS.PMBASE
   692
   693 				; optimize OK (SPRITES), line = 84
   694
   695 21C9 A9 0A			lda #$0A
   696 21CB 8D 15 D0			sta GLOBALS.COLPM3
   697 21CE A9 0E			lda #$0E
   698 21D0 8D 12 D0			sta GLOBALS.COLPM01
   699 21D3 8D 13 D0			sta GLOBALS.COLPM01+1
   700
   701 				; optimize OK (SPRITES), line = 85
   702
   703 21D6 A9 30			lda #$30
   704 21D8 85 00			sta BHPOSP0
   705 21DA A9 38			lda #$38
   706 21DC 85 01			sta BHPOSP1
   707 21DE A5 00			lda WSHIPX
   708 21E0 8D 00 D0			sta GLOBALS.HPOSP01
   709 21E3 A5 01			lda WSHIPX+1
   710 21E5 8D 01 D0			sta GLOBALS.HPOSP01+1
   711
   712 				; optimize OK (SPRITES), line = 86
   713
   714 21E8 A9 50			lda #$50
   715 21EA 85 02			sta BSHIPY
   716 21EC A9 00			lda #$00
   717 21EE 8D 08 D0			sta GLOBALS.SIZEP01
   718 21F1 8D 09 D0			sta GLOBALS.SIZEP01+1
   719 21F4 8D 0C D0			sta GLOBALS.SIZEM
   720 21F7 8D 1B D0			sta GLOBALS.PRIOR
   721 21FA A9 03			lda #$03
   722 21FC 8D 1D D0			sta GLOBALS.GRACTL
   723
   724 				; optimize FAIL ('COPYSHIP', SPRITES), line = 88
   725
   726 21FF 20 39 21			jsr COPYSHIP
   727 2202			@exit
   728 					.ifdef @new
   729 					lda <@VarData
   730 					sta :ztmp
   731 					lda >@VarData
   732 					ldy #@VarDataSize-1
   733 					jmp @FreeMem
   734 					els
   735 2202 60				rts						; ret
   736 					eif
   737 				.endl
   738
   739 				; ------------------------------------------------------------
   740 				; ------------------------------------------------------------
   741 2203			@UnitInit
   742
   743 2203 60				rts
   744
   745 				; ------------------------------------------------------------
   746
   747 = 0000			BHPOSP0	= $00
   748 = 0001			BHPOSP1	= $01
   749 = 0002			BSHIPY	= $02
   750 = 0003			BCANNONX	= $03
   751 = 0000			WSHIPX	= $00
   752 = 0004			WCANNONY	= $04
   753
   754 				.endl							; UNIT SPRITES
   755
   756 				; ------------------------------------------------------------
   757
   758 2204			.local	JOY						; UNIT
   759
   760 2204			.local	MOVESHIP					; PROCEDURE
   761
   762 				; optimize OK (JOY), line = 20
   763
   764 2204 A9 0C			lda #$0C
   765 2206 85 FF			sta GLOBALS.BTMP1
   766
   767 				; optimize OK (JOY), line = 21
   768
   769 2208 A9 01			lda #$01
   770 220A 85 FD			sta GLOBALS.B1I
   771
   772 220C			l_00D7
   773 				; --- ForToDoCondition
   774
   775 				; optimize OK (JOY), line = 22
   776
   777 220C A5 06			lda JOYDIRECTION
   778 220E 25 FF			and GLOBALS.BTMP1
   779 2210 8D 77 24			sta @CASETMP_0003
   780 2213 C9 04			cmp #$04
   781 2215 D0 22			jne l_00F6
   782 2217			@
   783
   784 				; optimize OK (JOY), line = 24
   785
   786 2217 A5 01			lda SPRITES.BHPOSP1
   787 2219 C9 B0			cmp #$B0
   788 221B B0 19			jcs l_0108
   789
   790 				; optimize OK (JOY), line = 25
   791
   792 221D A5 00			lda SPRITES.WSHIPX
   793 221F 18 69 02			add #$02
   794 2222 85 00			sta SPRITES.WSHIPX
   795 2224 A5 01			lda SPRITES.WSHIPX+1
   796 2226 69 02			adc #$02
   797 2228 85 01			sta SPRITES.WSHIPX+1
   798 222A E6 03			inc SPRITES.BCANNONX
   799
   800 				; optimize OK (JOY), line = 26
   801
   802 222C A5 00			lda SPRITES.WSHIPX
   803 222E 8D 00 D0			sta GLOBALS.HPOSP01
   804 2231 A5 01			lda SPRITES.WSHIPX+1
   805 2233 8D 01 D0			sta GLOBALS.HPOSP01+1
   806 2236			l_0108
   807
   808 2236 4C 9C 22			jmp a_0003
   809 2239			l_00F6
   810 2239 C9 08			cmp #$08
   811 223B D0 22			jne l_011E
   812 223D			@
   813
   814 				; optimize OK (JOY), line = 30
   815
   816 223D A5 00			lda SPRITES.BHPOSP0
   817 223F C9 31			cmp #$31
   818 2241 90 19			jcc l_0130
   819
   820 				; optimize OK (JOY), line = 31
   821
   822 2243 A5 00			lda SPRITES.WSHIPX
   823 2245 38 E9 02			sub #$02
   824 2248 85 00			sta SPRITES.WSHIPX
   825 224A A5 01			lda SPRITES.WSHIPX+1
   826 224C E9 02			sbc #$02
   827 224E 85 01			sta SPRITES.WSHIPX+1
   828 2250 C6 03			dec SPRITES.BCANNONX
   829
   830 				; optimize OK (JOY), line = 32
   831
   832 2252 A5 00			lda SPRITES.WSHIPX
   833 2254 8D 00 D0			sta GLOBALS.HPOSP01
   834 2257 A5 01			lda SPRITES.WSHIPX+1
   835 2259 8D 01 D0			sta GLOBALS.HPOSP01+1
   836 225C			l_0130
   837
   838 225C 4C 9C 22			jmp a_0003
   839 225F			l_011E
   840 225F C9 02			cmp #$02
   841 2261 D0 1C			jne l_0146
   842 2263			@
   843
   844 				; optimize OK (JOY), line = 36
   845
   846 2263 A5 02			lda SPRITES.BSHIPY
   847 2265 C9 21			cmp #$21
   848 2267 90 13			jcc l_0158
   849
   850 				; optimize OK (JOY), line = 37
   851
   852 2269 38 E9 04			sub #$04
   853 226C 85 02			sta SPRITES.BSHIPY
   854 226E A5 04			lda SPRITES.WCANNONY
   855 2270 38 E9 14			sub #$14
   856 2273 85 04			sta SPRITES.WCANNONY
   857 2275 B0 02			scs
   858 2277 C6 05			dec SPRITES.WCANNONY+1
   859
   860 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 38
   861
   862 2279 20 39 21			jsr SPRITES.COPYSHIP
   863 227C			l_0158
   864
   865 227C 4C 9C 22			jmp a_0003
   866 227F			l_0146
   867 227F C9 01			cmp #$01
   868 2281 D0 19			jne l_0167
   869 2283			@
   870
   871 				; optimize OK (JOY), line = 42
   872
   873 2283 A5 02			lda SPRITES.BSHIPY
   874 2285 C9 A8			cmp #$A8
   875 2287 B0 13			jcs l_0179
   876
   877 				; optimize OK (JOY), line = 43
   878
   879 2289 18 69 04			add #$04
   880 228C 85 02			sta SPRITES.BSHIPY
   881 228E A5 04			lda SPRITES.WCANNONY
   882 2290 18 69 14			add #$14
   883 2293 85 04			sta SPRITES.WCANNONY
   884 2295 90 02			scc
   885 2297 E6 05			inc SPRITES.WCANNONY+1
   886
   887 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 44
   888
   889 2299 20 39 21			jsr SPRITES.COPYSHIP
   890 229C			l_0179
   891
   892 229C			l_0167
   893 229C			a_0003
   894
   895 				; optimize OK (JOY), line = 48
   896
   897 229C A9 03			lda #$03
   898 229E 85 FF			sta GLOBALS.BTMP1
   899
   900 				; --- ForToDoEpilog
   901 22A0 C6 FD			dec GLOBALS.B1I
   902 22A2 30 03 4C 0C 22		jpl l_00D7
   903 22A7			l_00E5
   904
   905 				; ------------------------------------------------------------
   906
   907 = 0000			@FORTMP_00D4	= $00
   908 = 2477			@CASETMP_0003	= DATAORIGIN+$000F
   909
   910 = 2477			@VarData	= @CASETMP_0003
   911 = 0001			@VarDataSize	= 1
   912
   913 22A7			@exit
   914 					.ifdef @new
   915 					lda <@VarData
   916 					sta :ztmp
   917 					lda >@VarData
   918 					ldy #@VarDataSize-1
   919 					jmp @FreeMem
   920 					els
   921 22A7 60				rts						; ret
   922 					eif
   923 				.endl
   924
   925 				; ------------------------------------------------------------
   926 				; ------------------------------------------------------------
   927 22A8			@UnitInit
   928
   929 22A8 60				rts
   930
   931 				; ------------------------------------------------------------
   932
   933 = 0006			JOYDIRECTION	= $06
   934
   935 				.endl							; UNIT JOY
   936
   937 22A9			.local	VBI						; PROCEDURE | INTERRUPT
   938
   939 				; ---------------------  ASM Block 056  ---------------------
   940
   941 22A9 48 8A 48 98 48	 phr 
   942
   943 				; optimize OK (main.pas), line = 22
   944
   945 22AE A5 14			lda GLOBALS.RTCLOK
   946 22B0 29 01			and #$01
   947 22B2 85 F3			sta GLOBALS.ODDCOUNTER
   948
   949 				; optimize OK (main.pas), line = 23
   950
   951 22B4 A5 14			lda GLOBALS.RTCLOK
   952 22B6 A0 01			ldy #1
   953 22B8 29 03			and #$03
   954 22BA F0 01			beq @+
   955 22BC 88				dey
   956 22BD			@
   957 22BD 98				tya
   958 22BE 85 F2			sta GLOBALS.ISFIRETIME
   959
   960 				; optimize OK (main.pas), line = 27
   961
   962 22C0 F0 25			jeq l_01B7
   963
   964 				; optimize OK (main.pas), line = 28
   965
   966 22C2 AD 10 D0			lda GLOBALS.TRIG0
   967 22C5 D0 20			jne l_01CA
   968 22C7 A5 03			lda SPRITES.BCANNONX
   969 22C9 4A				lsr @
   970 22CA 18 6D 04 11			add GLOBALS.WDL2LMS
   971 22CE 85 A1			sta :STACKORIGIN+9
   972 22D0 AD 05 11			lda GLOBALS.WDL2LMS+1
   973 22D3 69 00			adc #$00
   974 22D5 85 B1			sta :STACKORIGIN+STACKWIDTH+9
   975 22D7 A5 A1			lda :STACKORIGIN+9
   976 22D9 18 65 04			add SPRITES.WCANNONY
   977 22DC A8				tay
   978 22DD A5 B1			lda :STACKORIGIN+STACKWIDTH+9
   979 22DF 65 05			adc SPRITES.WCANNONY+1
   980 22E1 85 91			sta :bp+1
   981 22E3 A9 02			lda #$02
   982 22E5 91 90			sta (:bp),y
   983 22E7			l_01CA
   984 22E7			l_01B7
   985
   986 				; optimize OK (main.pas), line = 31
   987
   988 22E7 AD 05 11			lda GLOBALS.WDL2LMS+1
   989 22EA C9 E0			cmp #$E0
   990 22EC 90 17			jcc l_01F3
   991 22EE D0 07			bne @+
   992 22F0 AD 04 11			lda GLOBALS.WDL2LMS
   993 22F3 C9 01			cmp #$01
   994 22F5 90 0E			jcc l_01F3
   995 22F7			@
   996 22F7 AD 04 11 D0 03 CE + 	dew GLOBALS.WDL2LMS
   997 2302 4C 0F 23			jmp l_0201
   998 2305			l_01F3
   999 2305 A9 57			lda #$57
  1000 2307 8D 04 11			sta GLOBALS.WDL2LMS
  1001 230A A9 ED			lda #$ED
  1002 230C 8D 05 11			sta GLOBALS.WDL2LMS+1
  1003 230F			l_0201
  1004
  1005 				; optimize OK (main.pas), line = 33
  1006
  1007 230F AD 04 11			lda GLOBALS.WDL2LMS
  1008 2312 85 FA			sta GLOBALS.WTMP1
  1009 2314 AD 05 11			lda GLOBALS.WDL2LMS+1
  1010 2317 85 FB			sta GLOBALS.WTMP1+1
  1011
  1012 				; ---------------------  ASM Block 057  ---------------------
  1013
  1014
  1015 2319 A2 11		        ldx #GAME_SCREEN_ROWS
  1016 231B A0 00		        ldy #0
  1017 231D 98			  @:    tya
  1018 231E 91 FA		        sta (GLOBALS.WTMP1),y
  1019 2320 A5 FA		        lda GLOBALS.WTMP1
  1020 2322 18 69 28		        add #40
  1021 2325 85 FA		        sta GLOBALS.WTMP1
  1022 2327 90 02		        bcc @+
  1023 2329 E6 FB		        inc GLOBALS.WTMP1+1
  1024 232B CA			  @:    dex
  1025 232C 10 EF		        bpl @-1
  1026 				  
  1027
  1028 				; ---------------------  ASM Block 058  ---------------------
  1029
  1030 232E 68 A8 68 AA 68	 plr 
  1031 2333 40				rti						; ret
  1032 				.endl
  1033
  1034 2334			.local	JOYHANDLER					; PROCEDURE | INTERRUPT
  1035
  1036 				; ---------------------  ASM Block 059  ---------------------
  1037
  1038 2334 48 8A 48 98 48	 phr 
  1039
  1040 				; optimize OK (main.pas), line = 57
  1041
  1042 2339 A5 F3			lda GLOBALS.ODDCOUNTER
  1043 233B D0 05			jne l_021D
  1044 233D AD 00 D3			lda GLOBALS.PORTA
  1045 2340 85 06			sta JOY.JOYDIRECTION
  1046 2342			l_021D
  1047 2342 20 04 22			jsr JOY.MOVESHIP
  1048
  1049 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 59
  1050
  1051 2345 E8				inx
  1052 2346 AD 7A 24 95 98		mva PSTARS :STACKORIGIN,x
  1053 234B AD 7B 24 95 A8		mva PSTARS+1 :STACKORIGIN+STACKWIDTH,x
  1054 2350 20 F9 20			jsr SYS.SETDLI
  1055
  1056 				; ---------------------  ASM Block 060  ---------------------
  1057
  1058 2353 68 A8 68 AA 68	 plr 
  1059 2358 40				rti						; ret
  1060 				.endl
  1061
  1062 2359			.local	STARS						; PROCEDURE | INTERRUPT
  1063
  1064 				; ---------------------  ASM Block 061  ---------------------
  1065
  1066 2359 48 8A 48 98 48	 phr 
  1067
  1068 				; optimize OK (main.pas), line = 68
  1069
  1070 235E A9 7C			lda #$7C
  1071 2360 85 FD			sta GLOBALS.B1I
  1072
  1073 2362			l_0237
  1074 				; --- ForToDoCondition
  1075
  1076 				; ---------------------  ASM Block 062  ---------------------
  1077
  1078 2362 8D 0A D4		 sta WSYNC 
  1079
  1080 				; optimize OK (main.pas), line = 70
  1081
  1082 2365 A4 FD			ldy GLOBALS.B1I
  1083 2367 B9 00 12			lda adr.ASTARS,y
  1084 236A 8D 07 D0			sta GLOBALS.HPOSM3
  1085
  1086 				; optimize OK (main.pas), line = 71
  1087
  1088 236D B9 00 12			lda adr.ASTARS,y
  1089 2370 38 F9 7D 12			sub adr.ASPEED,y
  1090 2374 99 00 12			sta adr.ASTARS,y
  1091
  1092 				; optimize OK (main.pas), line = 72
  1093
  1094 2377 AD 0A D2			lda SYSTEM.RND
  1095 237A 8D 15 D0			sta GLOBALS.COLPM3
  1096
  1097 				; --- ForToDoEpilog
  1098 237D C6 FD			dec GLOBALS.B1I
  1099 237F 10 E1			jpl l_0237
  1100 2381			l_0245
  1101
  1102 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 75
  1103
  1104 2381 E8				inx
  1105 2382 AD 78 24 95 98		mva PJOY :STACKORIGIN,x
  1106 2387 AD 79 24 95 A8		mva PJOY+1 :STACKORIGIN+STACKWIDTH,x
  1107 238C 20 F9 20			jsr SYS.SETDLI
  1108
  1109 				; ---------------------  ASM Block 063  ---------------------
  1110
  1111 238F 68 A8 68 AA 68	 plr 
  1112
  1113 				; ------------------------------------------------------------
  1114
  1115 = 0000			@FORTMP_0234	= $00
  1116 2394 40				rti						; ret
  1117 				.endl
  1118
  1119 2395			.local	INIT						; PROCEDURE
  1120
  1121 				; optimize FAIL ('SYSTEM.PAUSE_0067', main.pas), line = 82
  1122
  1123 2395 20 C8 20			jsr SYSTEM.PAUSE_0067
  1124 2398 A9 00			lda #$00
  1125 239A 8D 00 D4			sta GLOBALS.DMACTL
  1126 239D 20 11 21			jsr SYS.SYSTEMOFF
  1127
  1128 				; optimize OK (main.pas), line = 84
  1129
  1130 23A0 A9 18			lda #$18
  1131 23A2 8D 09 D4			sta GLOBALS.CHBAS
  1132
  1133 				; optimize OK (main.pas), line = 86
  1134
  1135 23A5 A9 57			lda #$57
  1136 23A7 85 88			sta :edx
  1137 23A9 A9 ED			lda #$ED
  1138 23AB 85 89			sta :edx+1
  1139 23AD A9 C0			lda #$C0
  1140 23AF 85 8C			sta :ecx
  1141 23B1 A9 03			lda #$03
  1142 23B3 85 8D			sta :ecx+1
  1143 23B5 A9 00			lda #$00
  1144 23B7 85 84			sta :eax
  1145 23B9 20 00 20			jsr @fill
  1146
  1147 				; optimize OK (main.pas), line = 88
  1148
  1149 23BC A9 7C			lda #$7C
  1150 23BE 85 FD			sta GLOBALS.B1I
  1151
  1152 23C0			l_0280
  1153 				; --- ForToDoCondition
  1154
  1155 				; optimize OK (main.pas), line = 89
  1156
  1157 23C0 A4 FD			ldy GLOBALS.B1I
  1158 23C2 AD 0A D2			lda SYSTEM.RND
  1159 23C5 99 00 12			sta adr.ASTARS,y
  1160
  1161 				; optimize OK (main.pas), line = 90
  1162
  1163 23C8 29 03			and #$03
  1164 23CA 18 69 01			add #$01
  1165 23CD 99 7D 12			sta adr.ASPEED,y
  1166
  1167 				; --- ForToDoEpilog
  1168 23D0 C6 FD			dec GLOBALS.B1I
  1169 23D2 10 EC			jpl l_0280
  1170 23D4			l_028E
  1171
  1172 				; optimize OK (main.pas), line = 93
  1173
  1174 23D4 AD 02 D3			lda GLOBALS.PACTL
  1175 23D7 09 04			ora #$04
  1176 23D9 8D 02 D3			sta GLOBALS.PACTL
  1177 23DC 20 96 21			jsr SPRITES.INIT
  1178 23DF 20 2D 21			jsr GR.MODE2
  1179
  1180 				; optimize OK (main.pas), line = 94
  1181
  1182 23E2 A9 00			lda #$00
  1183 23E4 8D 1A D0			sta GLOBALS.COLBK
  1184 23E7 8D 16 D0			sta GLOBALS.COLPF0
  1185 23EA A9 0F			lda #$0F
  1186 23EC 8D 17 D0			sta GLOBALS.COLPF1
  1187 23EF A9 02			lda #$02
  1188 23F1 8D 18 D0			sta GLOBALS.COLPF2
  1189 23F4 A9 00			lda #$00
  1190 23F6 8D 19 D0			sta GLOBALS.COLPF3
  1191
  1192 				; optimize OK (main.pas), line = 95
  1193
  1194 23F9 A9 34			lda <JOYHANDLER
  1195 23FB 8D 78 24			sta PJOY
  1196 23FE A9 23			lda >JOYHANDLER
  1197 2400 8D 79 24			sta PJOY+1
  1198 2403 A9 59			lda <STARS
  1199 2405 8D 7A 24			sta PSTARS
  1200 2408 A9 23			lda >STARS
  1201 240A 8D 7B 24			sta PSTARS+1
  1202
  1203 				; optimize OK (main.pas), line = 97
  1204
  1205 240D A9 06			lda #$06
  1206 240F 85 03			sta SPRITES.BCANNONX
  1207 2411 A9 03			lda #$03
  1208 2413 85 8C			sta :ecx
  1209 2415 A5 02			lda SPRITES.BSHIPY
  1210 2417 85 84			sta :eax
  1211 					.ifdef fmulinit
  1212 					fmulu_8
  1213 					els
  1214 2419 20 48 20			imulCL
  1215 					eif
  1216 241C A5 84			lda :eax
  1217 241E 85 04			sta SPRITES.WCANNONY
  1218 2420 A5 85			lda :eax+1
  1219 2422 85 05			sta SPRITES.WCANNONY+1
  1220
  1221 				; optimize FAIL ('SYS.SETVBI', main.pas), line = 99
  1222
  1223 2424 E8				inx
  1224 2425 A9 A9 95 98			mva <VBI :STACKORIGIN,x
  1225 2429 A9 22 95 A8			mva >VBI :STACKORIGIN+STACKWIDTH,x
  1226 242D 20 E1 20			jsr SYS.SETVBI
  1227
  1228 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 100
  1229
  1230 2430 E8				inx
  1231 2431 A9 34 95 98			mva <JOYHANDLER :STACKORIGIN,x
  1232 2435 A9 23 95 A8			mva >JOYHANDLER :STACKORIGIN+STACKWIDTH,x
  1233 2439 20 F9 20			jsr SYS.SETDLI
  1234
  1235 				; optimize FAIL ('SYSTEM.PAUSE_0067', main.pas), line = 102
  1236
  1237 243C 20 C8 20			jsr SYSTEM.PAUSE_0067
  1238 243F A9 3E			lda #$3E
  1239 2441 8D 00 D4			sta GLOBALS.DMACTL
  1240
  1241 				; ------------------------------------------------------------
  1242
  1243 = 0000			@FORTMP_027D	= $00
  1244 2444			@exit
  1245 					.ifdef @new
  1246 					lda <@VarData
  1247 					sta :ztmp
  1248 					lda >@VarData
  1249 					ldy #@VarDataSize-1
  1250 					jmp @FreeMem
  1251 					els
  1252 2444 60				rts						; ret
  1253 					eif
  1254 				.endl
  1255 2445			l_0007
  1256
  1257 				; optimize FAIL ('INIT', main.pas), line = 106
  1258
  1259 2445 20 95 23			jsr INIT
  1260
  1261 				; --- RepeatUntilProlog
  1262 2448			l_02EB
  1263
  1264 				; optimize OK (main.pas), line = 107
  1265
  1266 2448 4C 48 24			jmp l_02EB
  1267
  1268 				; ------------------------------------------------------------
  1269
  1270 = 1000			PM_ADR	= $1000
  1271 = 1300			M0_ADR	= $1300
  1272 = 1400			P0_ADR	= $1400
  1273 = 1500			P1_ADR	= $1500
  1274 = 1000			GFX_SHIP_ADR	= $1000
  1275 = 0008			GFX_SHIP_SEG	= $08
  1276 = 1800			GFX_FONTS_ADR	= $1800
  1277 = 1100			DL_2	= $1100
  1278 = ED57			GAME_LMS	= $ED57
  1279 = E000			GAME_LMS_END	= $E000
  1280 = 0011			GAME_SCREEN_ROWS	= $11
  1281 = 0E0E			SHIP_COL	= $0E0E
  1282 = 0030			SHIP_LEFT_LIMIT	= $30
  1283 = 00B0			SHIP_RIGHT_LIMIT	= $B0
  1284 = 0020			SHIP_TOP_LIMIT	= $20
  1285 = 00A8			SHIP_BOTTOM_LIMIT	= $A8
  1286 = 0202			SHIP_X_STEP	= $0202
  1287 = 0004			SHIP_Y_STEP	= $04
  1288 = 0008			JOY_LEFT	= $08
  1289 = 0004			JOY_RIGHT	= $04
  1290 = 0002			JOY_UP	= $02
  1291 = 0001			JOY_DOWN	= $01
  1292 = 1200			adr.ASTARS	= $1200
  1293 244B			.var ASTARS	= adr.ASTARS .word
  1294 = 127D			adr.ASPEED	= $127D
  1295 244B			.var ASPEED	= adr.ASPEED .word
  1296 = 2478			PJOY	= DATAORIGIN+$0010
  1297 = 247A			PSTARS	= DATAORIGIN+$0012
  1298 244B			@exit
  1299
  1300 244B A2 00		@halt	ldx #$00
  1301 244D 9A				txs
  1302 					.ifdef MAIN.@DEFINES.ROMOFF
  1303 					inc portb
  1304 					.endif
  1305
  1306 244E A0 01			ldy #$01
  1307
  1308 2450 60				rts
  1309
  1310 				; ------------------------------------------------------------
  1311
  1312 2451 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1313
  1314 				; ------------------------------------------------------------
  1315
  1316 2461			.local	@DEFINES
  1317 2461			ATARI
  1318 				.endl
  1319
  1320 2461			.local	@RESOURCE
  1321 				.endl
  1322
  1323 = 2461 00 12		ASTARS
  1323 = 2463 7D 12		ASPEED
  1323 				.endl							; MAIN
  1324
  1325 				; ------------------------------------------------------------
  1326 				; ------------------------------------------------------------
  1327
  1328 				.macro	UNITINITIALIZATION
  1329 				
  1330 					.ifdef MAIN.SYSTEM.@UnitInit
  1331 					jsr MAIN.SYSTEM.@UnitInit
  1332 					eif
  1333 				
  1334 					.ifdef MAIN.GLOBALS.@UnitInit
  1335 					jsr MAIN.GLOBALS.@UnitInit
  1336 					eif
  1337 				
  1338 					.ifdef MAIN.SYS.@UnitInit
  1339 					jsr MAIN.SYS.@UnitInit
  1340 					eif
  1341 				
  1342 					.ifdef MAIN.GR.@UnitInit
  1343 					jsr MAIN.GR.@UnitInit
  1344 					eif
  1345 				
  1346 					.ifdef MAIN.SPRITES.@UnitInit
  1347 					jsr MAIN.SPRITES.@UnitInit
  1348 					eif
  1349 				
  1350 					.ifdef MAIN.JOY.@UnitInit
  1351 					jsr MAIN.JOY.@UnitInit
  1352 					eif
  1353 				.endm
  1354
  1355 				; ------------------------------------------------------------
  1356
  1357 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1358 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1358 				SYSTEM: $2098..$20D2
  1359 					eif
  1360
  1361 					ift .SIZEOF(MAIN.GLOBALS) > 0
  1362 					.print 'GLOBALS: ',MAIN.GLOBALS,'..',MAIN.GLOBALS+.SIZEOF(MAIN.GLOBALS)-1
  1363 					eif
  1364
  1365 					ift .SIZEOF(MAIN.SYS) > 0
  1366 					.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
  1366 				SYS: $20D3..$212C
  1367 					eif
  1368
  1369 					ift .SIZEOF(MAIN.GR) > 0
  1370 					.print 'GR: ',MAIN.GR,'..',MAIN.GR+.SIZEOF(MAIN.GR)-1
  1370 				GR: $212D..$2138
  1371 					eif
  1372
  1373 					ift .SIZEOF(MAIN.SPRITES) > 0
  1374 					.print 'SPRITES: ',MAIN.SPRITES,'..',MAIN.SPRITES+.SIZEOF(MAIN.SPRITES)-1
  1374 				SPRITES: $2139..$2203
  1375 					eif
  1376
  1377 					ift .SIZEOF(MAIN.JOY) > 0
  1378 					.print 'JOY: ',MAIN.JOY,'..',MAIN.JOY+.SIZEOF(MAIN.JOY)-1
  1378 				JOY: $2204..$22A8
  1379 					eif
  1380
  1381 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1381 				CODE: $2000..$2460
  1382
  1383 				; ------------------------------------------------------------
  1384
  1385 2465				.align $04
  1386
  1387 2468			DATAORIGIN
  1388 2468-246D> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  1389
  1390 = 0006			VARINITSIZE	= *-DATAORIGIN
  1391 = 0014			VARDATASIZE	= 20
  1392
  1393 = 247C			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1394
  1395 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1395 				DATA: $2468..$247C
  1396
  1397 02E0-02E1> 5C 20			run START
  1398
  1399 				; ------------------------------------------------------------
  1400
  1401 				.macro	STATICDATA
  1402 				.endm
  1403
  1404 					end
