mads 2.1.1
  1133 					opt l+
    98 = 0000				?EXTDETECT = 0
    99 = 0000				?VBXDETECT = 0
   100
   101 2075				RCASM 'res/gr_dl.asm' GLOBALS.DL_2 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 001A			len = .sizeof(_GLOBALS.DL_2)
     6 				mcpy	ift main.GLOBALS.DL_2+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 11 +  MWA #MAIN.GLOBALS.DL_2 ECX
    13 2088 A9 1A 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: const.inc
     1 = 1000			PM_ADR              = $1000;                      // players & missiles memory (2K) start address
     2 = 1300			M0_ADR              = PM_ADR + $300;              // missile 0 start memory address
     3 = 1400			P0_ADR              = PM_ADR + $400;              // player 0 start memory address
     4 = 1500			P1_ADR              = PM_ADR + $500;              // player 1 start memory address
     5 = 1000			GFX_SHIP_ADR        = $1000;                      // ship gfx memory start address, ship size = 20 bytes, 16 bytes for gfx and 4 bytes fo top/bottom empty rows
     6 = 0008			GFX_SHIP_SEG        = 8;                          // ship gfx 10 byte segment, 10B for P0 & 10B for P1
     8 = 0E0E			SHIP_COL            = $0e0e;
     9 = 0030			SHIP_LEFT_LIMIT     = 48;
    10 = 00B0			SHIP_RIGHT_LIMIT    = SHIP_LEFT_LIMIT + (16 * 8);
    11 = 0020			SHIP_TOP_LIMIT      = 32;
    12 = 00A8			SHIP_BOTTOM_LIMIT   = 8 * 21;
    13 = 0202			SHIP_X_STEP         = $0202;
    15 = 0008			JOY_LEFT            = %1000;
    16 = 0004			JOY_RIGHT           = %0100;
    17 = 0002			JOY_UP              = %0010;
    18 = 0001			JOY_DOWN            = %0001;
    20 = 1100			DL_2                = $1100;                      // display list memory start address for ANTIC mode 2
    21 = EFFF			GAME_LMS            = $efff;                      // Load Memory Scan address
     3 1100			dl2
     4 1100 F0 70 F0		    .byte $f0,$70,$f0
     5 1103 42 FF EF		    .byte $42,a(GAME_LMS)
     6 1106 02 02 02 02 02 02 + :17 .byte 2
     7 1117 41 00 11		    .byte $41,a(dl2)
    23 					.print '$R RCASM   ',main.GLOBALS.DL_2,'..',main.GLOBALS.DL_2+len-1," 'res/gr_dl.asm'"
    23 				$R RCASM   $1100..$1119 'res/gr_dl.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: main.a65
   102 20B0				RCDATA 'res/gfx_ship.bin' GLOBALS.GFX_SHIP_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0010			len = .filesize('res/gfx_ship.bin')
    28 20B0				org main.GLOBALS.GFX_SHIP_ADR
    30 1000-100F> 70 7B 1E 3F + 	ins 'res/gfx_ship.bin'
    32 					.print '$R RCDATA  ',main.GLOBALS.GFX_SHIP_ADR,'..',*-1," 'res/gfx_ship.bin'"
    32 				$R RCDATA  $1000..$100F 'res/gfx_ship.bin'
Source: main.a65
   103 				.endl
   104
   105 				; ------------------------------------------------------------
   106
   107 1010				org CODEORIGIN
   108
   109 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
Source: main.a65
   110
   111 				; ------------------------------------------------------------
   112
   113 2000			RTLIB
   114 2000				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
   166 					opt l+
   115
   116 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   116 				ZPAGE: $0080..$00D7
   117
   118 				.print 'RTLIB: ',RTLIB,'..',*-1
   118 				RTLIB: $2000..$20EC
   119
   120 				; ------------------------------------------------------------
   121
   122 20ED			START
   123 20ED BA				tsx
   124 20EE 8E AB 24			stx MAIN.@halt+1
   125
   126 					.ifdef fmulinit
   127 					fmulinit
   128 					eif
   129
   130 = 000E			VLEN	= VARDATASIZE-VARINITSIZE
   131 = 24CA			VADR	= DATAORIGIN+VARINITSIZE
   132
   133 					ift VADR > $BFFF
   134 					ert 'Invalid memory address range ',VADR
   135 					eli (VLEN>0) && (VLEN<=256)
   136 20F1 A2 F2			ldx #256-VLEN
   137 20F3 A9 00			lda #$00
   138 20F5 9D D8 23 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   139 					eli VLEN>0
   140 					@fill #VADR #VLEN #$00
   141 					eif
   142
   143 20FB A9 D8 85 82 A9 24 + 	mwa #PROGRAMSTACK psptr
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 					icl 'atari\romoff.asm'
   147 					.endif
   148
   149 2103 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   150 2105 BD 40 03 9D B0 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   151
   152 210E E8				inx						; X = 0
   153 210F 86 90			stx bp						; BP = 0
   154
   155 2111 8E 08 D2			stx audctl					; reset POKEY
   156 2114 A9 03			lda #3
   157 2116 8D 0F D2			sta skctl
   158
   159 2119 CA				dex						; X = 255
   160
   161 211A				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
    11 211A 20 FA 21			jsr MAIN.SYS.@UnitInit
    15 211D 20 06 22			jsr MAIN.GR.@UnitInit
    19 2120 20 CD 22			jsr MAIN.SPRITES.@UnitInit
    23 2123 20 61 23			jsr MAIN.JOY.@UnitInit
   162
   163 2126			.local	MAIN						; PROCEDURE
   164
   165 2126 4C A4 24			jmp l_0007
   166
   167 				; ------------------------------------------------------------
   168
   169 2129			.local	SYSTEM						; UNIT
   170
   171 2129			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   172
   173 				; ------------------------------------------------------------
   174
   175 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   176 				; as Pointer
   177 2129 B5 98			lda :STACKORIGIN,x
   178 212B 85 8C			sta VALUE
   179 212D CA				dex
   180
   181 				; ------------------------------------------------------------
   182
   183 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   184 				; as Pointer
   185 212E B5 98			lda :STACKORIGIN,x
   186 2130 85 88			sta A
   187 2132 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   188 2134 85 89			sta A+1
   189 2136 CA				dex
   190
   191 				; ---------------------  ASM Block 021  ---------------------
   192
   193 2137 A0 00			ldy #0
   194 2139 A5 8C 91 88			mva value (edx),y
   195
   196
   197 				; ------------------------------------------------------------
   198
   199 = 0088			A	= edx
   200 = 008C			VALUE	= ecx
   201 213D			@exit
   202 					.ifdef @new
   203 					lda <@VarData
   204 					sta :ztmp
   205 					lda >@VarData
   206 					ldy #@VarDataSize-1
   207 					jmp @FreeMem
   208 					els
   209 213D 60				rts						; ret
   210 					eif
   211 				.endl
   212
   213 213E			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   214
   215 				; ------------------------------------------------------------
   216
   217 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   218 				; as Pointer
   219 213E B5 98			lda :STACKORIGIN,x
   220 2140 85 8C			sta VALUE
   221 2142 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   222 2144 85 8D			sta VALUE+1
   223 2146 CA				dex
   224
   225 				; ------------------------------------------------------------
   226
   227 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   228 				; as Pointer
   229 2147 B5 98			lda :STACKORIGIN,x
   230 2149 85 88			sta A
   231 214B B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   232 214D 85 89			sta A+1
   233 214F CA				dex
   234
   235 				; ---------------------  ASM Block 022  ---------------------
   236
   237 2150 A0 00			ldy #0
   238 2152 A5 8C 91 88			mva value (edx),y
   239 2156 C8				iny
   240 2157 A5 8D 91 88			mva value+1 (edx),y
   241
   242
   243 				; ------------------------------------------------------------
   244
   245 = 0088			A	= edx
   246 = 008C			VALUE	= ecx
   247 215B			@exit
   248 					.ifdef @new
   249 					lda <@VarData
   250 					sta :ztmp
   251 					lda >@VarData
   252 					ldy #@VarDataSize-1
   253 					jmp @FreeMem
   254 					els
   255 215B 60				rts						; ret
   256 					eif
   257 				.endl
   258
   259 215C			.local	FILLBYTE_0050					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   260
   261 				; ------------------------------------------------------------
   262
   263 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   264 				; as Pointer
   265 215C B5 98			lda :STACKORIGIN,x
   266 215E 85 84			sta VALUE
   267 2160 CA				dex
   268
   269 				; ------------------------------------------------------------
   270
   271 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   272 				; as Pointer
   273 2161 B5 98			lda :STACKORIGIN,x
   274 2163 85 8C			sta COUNT
   275 2165 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   276 2167 85 8D			sta COUNT+1
   277 2169 CA				dex
   278
   279 				; ------------------------------------------------------------
   280
   281 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   282 				; as Pointer
   283 216A B5 98			lda :STACKORIGIN,x
   284 216C 85 88			sta A
   285 216E B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   286 2170 85 89			sta A+1
   287 2172 CA				dex
   288
   289 				; ---------------------  ASM Block 029  ---------------------
   290
   291 2173 20 80 20			jsr @fill
   292
   293
   294 				; ------------------------------------------------------------
   295
   296 = 0088			A	= edx
   297 = 008C			COUNT	= ecx
   298 = 0084			VALUE	= eax
   299 2176			@exit
   300 					.ifdef @new
   301 					lda <@VarData
   302 					sta :ztmp
   303 					lda >@VarData
   304 					ldy #@VarDataSize-1
   305 					jmp @FreeMem
   306 					els
   307 2176 60				rts						; ret
   308 					eif
   309 				.endl
   310
   311 2177			.local	MOVE_005A					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   312
   313 				; ------------------------------------------------------------
   314
   315 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   316 				; as Pointer
   317 2177 B5 98			lda :STACKORIGIN,x
   318 2179 85 84			sta COUNT
   319 217B B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   320 217D 85 85			sta COUNT+1
   321 217F CA				dex
   322
   323 				; ------------------------------------------------------------
   324
   325 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   326 				; as Pointer
   327 2180 B5 98			lda :STACKORIGIN,x
   328 2182 85 8C			sta DEST
   329 2184 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   330 2186 85 8D			sta DEST+1
   331 2188 CA				dex
   332
   333 				; ------------------------------------------------------------
   334
   335 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   336 				; as Pointer
   337 2189 B5 98			lda :STACKORIGIN,x
   338 218B 85 88			sta SOURCE
   339 218D B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   340 218F 85 89			sta SOURCE+1
   341 2191 CA				dex
   342
   343 				; ---------------------  ASM Block 031  ---------------------
   344
   345 2192 20 2B 20			jsr @move
   346
   347
   348 				; ------------------------------------------------------------
   349
   350 = 0088			SOURCE	= edx
   351 = 008C			DEST	= ecx
   352 = 0084			COUNT	= eax
   353 2195			@exit
   354 					.ifdef @new
   355 					lda <@VarData
   356 					sta :ztmp
   357 					lda >@VarData
   358 					ldy #@VarDataSize-1
   359 					jmp @FreeMem
   360 					els
   361 2195 60				rts						; ret
   362 					eif
   363 				.endl
   364
   365 2196			.local	PAUSE_0078					; PROCEDURE | ASSEMBLER | OVERLOAD
   366
   367 				; ---------------------  ASM Block 039  ---------------------
   368
   369 2196 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   370
   371 219C			@exit
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					els
   379 219C 60				rts						; ret
   380 					eif
   381 				.endl
   382
   383 				; ------------------------------------------------------------
   384
   385 = 0101			__PORTB_BANKS	= $0101
   386 = 0648			M_PI_2	= $0648
   387 = 0192			D_PI_2	= $0192
   388 = 0004			D_PI_180	= $04
   389 = 0000			MGTIA	= $00
   390 = 0080			MVBXE	= $80
   391 = 0000			VBXE_XDLADR	= $00
   392 = 0100			VBXE_BCBADR	= $0100
   393 = 1000			VBXE_MAPADR	= $1000
   394 = 5000			VBXE_OVRADR	= $5000
   395 = B000			VBXE_WINDOW	= $B000
   396 = 0000			IDLI	= $00
   397 = 0001			IVBL	= $01
   398 = 00FE			CH_DELCHR	= $FE
   399 = 009B			CH_ENTER	= $9B
   400 = 001B			CH_ESC	= $1B
   401 = 001C			CH_CURS_UP	= $1C
   402 = 001D			CH_CURS_DOWN	= $1D
   403 = 001E			CH_CURS_LEFT	= $1E
   404 = 001F			CH_CURS_RIGHT	= $1F
   405 = 007F			CH_TAB	= $7F
   406 = 009B			CH_EOL	= $9B
   407 = 007D			CH_CLR	= $7D
   408 = 00FD			CH_BELL	= $FD
   409 = 007E			CH_DEL	= $7E
   410 = 009C			CH_DELLINE	= $9C
   411 = 009D			CH_INSLINE	= $9D
   412 = 0000			COLOR_BLACK	= $00
   413 = 000E			COLOR_WHITE	= $0E
   414 = 0032			COLOR_RED	= $32
   415 = 0096			COLOR_CYAN	= $96
   416 = 0068			COLOR_VIOLET	= $68
   417 = 00C4			COLOR_GREEN	= $C4
   418 = 0074			COLOR_BLUE	= $74
   419 = 00EE			COLOR_YELLOW	= $EE
   420 = 0028			COLOR_ORANGE	= $28
   421 = 00E4			COLOR_BROWN	= $E4
   422 = 003C			COLOR_LIGHTRED	= $3C
   423 = 0004			COLOR_GRAY1	= $04
   424 = 0006			COLOR_GRAY2	= $06
   425 = 000A			COLOR_GRAY3	= $0A
   426 = 00CC			COLOR_LIGHTGREEN	= $CC
   427 = 007C			COLOR_LIGHTBLUE	= $7C
   428 = 0004			FMOPENREAD	= $04
   429 = 0008			FMOPENWRITE	= $08
   430 = 0009			FMOPENAPPEND	= $09
   431 = 000C			FMOPENREADWRITE	= $0C
   432 = 24C4			SCREENWIDTH	= DATAORIGIN+$0000
   433 = 24C6			SCREENHEIGHT	= DATAORIGIN+$0002
   434 = 24C8			DATESEPARATOR	= DATAORIGIN+$0004
   435 = D014			TVSYSTEM	= $D014
   436 = D20A			RND	= $D20A
   437 = 02C0			adr.PALETTE	= $02C0
   438 219D			.var PALETTE	= adr.PALETTE .word
   439 = D012			adr.HPALETTE	= $D012
   440 219D			.var HPALETTE	= adr.HPALETTE .word
   441 = 24C9			FILEMODE	= DATAORIGIN+$0005
   442 = 24CA			GRAPHMODE	= DATAORIGIN+$0006
   443 = 24CB			IORESULT	= DATAORIGIN+$0007
   444 = 24CC			EOLN	= DATAORIGIN+$0008
   445 = 24CD			RNDSEED	= DATAORIGIN+$0009
   446
   447 = 219D C0 02		PALETTE
   447 = 219F 12 D0		HPALETTE
   447 				.endl							; UNIT SYSTEM
   448
   449 				; ------------------------------------------------------------
   450
   451 21A1			.local	GLOBALS						; UNIT
   452
   453 				; ------------------------------------------------------------
   454
   455 = 1000			PM_ADR	= $1000
   456 = 1300			M0_ADR	= $1300
   457 = 1400			P0_ADR	= $1400
   458 = 1500			P1_ADR	= $1500
   459 = 1000			GFX_SHIP_ADR	= $1000
   460 = 0008			GFX_SHIP_SEG	= $08
   461 = 0E0E			SHIP_COL	= $0E0E
   462 = 0030			SHIP_LEFT_LIMIT	= $30
   463 = 00B0			SHIP_RIGHT_LIMIT	= $B0
   464 = 0020			SHIP_TOP_LIMIT	= $20
   465 = 00A8			SHIP_BOTTOM_LIMIT	= $A8
   466 = 0202			SHIP_X_STEP	= $0202
   467 = 0008			JOY_LEFT	= $08
   468 = 0004			JOY_RIGHT	= $04
   469 = 0002			JOY_UP	= $02
   470 = 0001			JOY_DOWN	= $01
   471 = 1100			DL_2	= $1100
   472 = EFFF			GAME_LMS	= $EFFF
   473 = 0014			RTCLOK	= $14
   474 = D000			HPOSP0	= $D000
   475 = D001			HPOSP1	= $D001
   476 = D004			HPOSM0	= $D004
   477 = D005			HPOSM1	= $D005
   478 = D006			HPOSM2	= $D006
   479 = D007			HPOSM3	= $D007
   480 = D008			SIZEP0	= $D008
   481 = D009			SIZEP1	= $D009
   482 = D00A			SIZEP2	= $D00A
   483 = D00B			SIZEP3	= $D00B
   484 = D00C			SIZEM	= $D00C
   485 = D011			GRAFM	= $D011
   486 = D012			COLPM0	= $D012
   487 = D013			COLPM1	= $D013
   488 = D014			COLPM2	= $D014
   489 = D015			COLPM3	= $D015
   490 = D017			COLPF1	= $D017
   491 = D018			COLPF2	= $D018
   492 = D01A			COLBK	= $D01A
   493 = D01B			PRIOR	= $D01B
   494 = D01D			GRACTL	= $D01D
   495 = D20A			RND	= $D20A
   496 = D300			PORTA	= $D300
   497 = D301			PORTB	= $D301
   498 = D302			PACTL	= $D302
   499 = D400			DMACTL	= $D400
   500 = D402			DLIST	= $D402
   501 = D407			PMBASE	= $D407
   502 = D40A			WSYNC	= $D40A
   503 = D40B			VCOUNT	= $D40B
   504 = D40E			NMIEN	= $D40E
   505 = FFFA			NMIVEC	= $FFFA
   506 = D000			HPOSP01	= $D000
   507 = D008			SIZEP01	= $D008
   508 = D012			COLPM01	= $D012
   509 = 1104			DL2LMS	= $1104
   510 = 00FF			BMASK1	= $FF
   511 = 00FE			BMASK2	= $FE
   512 = 00FD			B1I	= $FD
   513 = 00FC			B2I	= $FC
   514
   515 				.endl							; UNIT GLOBALS
   516
   517 				; ------------------------------------------------------------
   518
   519 21A1			.local	SYS						; UNIT
   520
   521 21A1			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
   522
   523 				; ---------------------  ASM Block 049  ---------------------
   524
   525
   526 				      bit NMIST \ bpl vbi     ; check kind of interrupt
   526 21A1 2C 0F D4		      BIT NMIST 
   526 21A4 10 03		 BPL VBI     
   527 = 21A6			.def  :__dlijmp
   528 21A6 4C AE 21		      jmp __off               ; VDSLST
   529 21A9 E6 14		vbi:  inc RTCLOK+2
   530 = 21AB			.def  :__vbijmp
   531 21AB 4C AE 21		      jmp __off               ; VBIVEC
   532 = 21AE			.def  :__off
   533
   534 21AE 40				rti						; ret
   535 				.endl
   536
   537 21AF			.local	SETVBI						; PROCEDURE | ASSEMBLER
   538
   539 				; ------------------------------------------------------------
   540
   541 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   542 				; as Pointer
   543 21AF B5 98			lda :STACKORIGIN,x
   544 21B1 8D CF 24			sta A
   545 21B4 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   546 21B6 8D D0 24			sta A+1
   547 21B9 CA				dex
   548
   549 				; ---------------------  ASM Block 050  ---------------------
   550
   551
   552 21BA AD CF 24 8D AC 21 +   mwa a __vbijmp+1
   553
   554
   555 				; ------------------------------------------------------------
   556
   557 = 24CF			A	= DATAORIGIN+$000B
   558
   559 = 24CF			@VarData	= A
   560 = 0002			@VarDataSize	= 2
   561
   562 21C6			@exit
   563 					.ifdef @new
   564 					lda <@VarData
   565 					sta :ztmp
   566 					lda >@VarData
   567 					ldy #@VarDataSize-1
   568 					jmp @FreeMem
   569 					els
   570 21C6 60				rts						; ret
   571 					eif
   572 				.endl
   573
   574 21C7			.local	SETDLI						; PROCEDURE | ASSEMBLER
   575
   576 				; ------------------------------------------------------------
   577
   578 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   579 				; as Pointer
   580 21C7 B5 98			lda :STACKORIGIN,x
   581 21C9 8D D1 24			sta A
   582 21CC B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   583 21CE 8D D2 24			sta A+1
   584 21D1 CA				dex
   585
   586 				; ---------------------  ASM Block 051  ---------------------
   587
   588
   589 21D2 AD D1 24 8D A7 21 +   mwa a __dlijmp+1
   590
   591
   592 				; ------------------------------------------------------------
   593
   594 = 24D1			A	= DATAORIGIN+$000D
   595
   596 = 24D1			@VarData	= A
   597 = 0002			@VarDataSize	= 2
   598
   599 21DE			@exit
   600 					.ifdef @new
   601 					lda <@VarData
   602 					sta :ztmp
   603 					lda >@VarData
   604 					ldy #@VarDataSize-1
   605 					jmp @FreeMem
   606 					els
   607 21DE 60				rts						; ret
   608 					eif
   609 				.endl
   610
   611 21DF			.local	SYSTEMOFF					; PROCEDURE
   612
   613 				; ---------------------  ASM Block 054  ---------------------
   614
   615 21DF 78			 sei 
   616
   617 				; optimize OK (SYS), line = 63
   618
   619 21E0 A9 00			lda #$00
   620 21E2 8D 0E D4			sta GLOBALS.NMIEN
   621 21E5 A9 FE			lda #$FE
   622 21E7 8D 01 D3			sta GLOBALS.PORTB
   623 21EA A9 A1			lda <NMI
   624 21EC 8D FA FF			sta GLOBALS.NMIVEC
   625 21EF A9 21			lda >NMI
   626 21F1 8D FB FF			sta GLOBALS.NMIVEC+1
   627 21F4 A9 C0			lda #$C0
   628 21F6 8D 0E D4			sta GLOBALS.NMIEN
   629 21F9			@exit
   630 					.ifdef @new
   631 					lda <@VarData
   632 					sta :ztmp
   633 					lda >@VarData
   634 					ldy #@VarDataSize-1
   635 					jmp @FreeMem
   636 					els
   637 21F9 60				rts						; ret
   638 					eif
   639 				.endl
   640
   641 				; ------------------------------------------------------------
   642 				; ------------------------------------------------------------
   643 21FA			@UnitInit
   644
   645 21FA 60				rts
   646
   647 				; ------------------------------------------------------------
   648
   649 				.endl							; UNIT SYS
   650
   651 				; ------------------------------------------------------------
   652
   653 21FB			.local	GR						; UNIT
   654
   655 21FB			.local	MODE2						; PROCEDURE
   656
   657 				; optimize OK (GR), line = 17
   658
   659 21FB A9 00			lda #$00
   660 21FD 8D 02 D4			sta GLOBALS.DLIST
   661 2200 A9 11			lda #$11
   662 2202 8D 03 D4			sta GLOBALS.DLIST+1
   663 2205			@exit
   664 					.ifdef @new
   665 					lda <@VarData
   666 					sta :ztmp
   667 					lda >@VarData
   668 					ldy #@VarDataSize-1
   669 					jmp @FreeMem
   670 					els
   671 2205 60				rts						; ret
   672 					eif
   673 				.endl
   674
   675 				; ------------------------------------------------------------
   676 				; ------------------------------------------------------------
   677 2206			@UnitInit
   678
   679 2206 60				rts
   680
   681 				; ------------------------------------------------------------
   682
   683 				.endl							; UNIT GR
   684
   685 				; ------------------------------------------------------------
   686
   687 2207			.local	SPRITES						; UNIT
   688
   689 2207			.local	COPYSHIP					; PROCEDURE
   690
   691 				; optimize OK (SPRITES), line = 25
   692
   693 2207 A5 03			lda BSHIPYCLEAR
   694 2209 85 92			sta :bp2
   695 220B A9 14			lda #$14
   696 220D 85 93			sta :bp2+1
   697 220F A0 00			ldy #$00
   698 2211 98				tya
   699 2212 91 92			sta (:bp2),y
   700 2214 C8				iny
   701 2215 91 92			sta (:bp2),y
   702 2217 A5 03			lda BSHIPYCLEAR
   703 2219 85 92			sta :bp2
   704 221B A9 15			lda #$15
   705 221D 85 93			sta :bp2+1
   706 221F A0 00			ldy #$00
   707 2221 98				tya
   708 2222 91 92			sta (:bp2),y
   709 2224 C8				iny
   710 2225 91 92			sta (:bp2),y
   711
   712 				; optimize OK (SPRITES), line = 26
   713
   714 2227 A5 02			lda BSHIPY
   715 2229 85 8C			sta :ecx
   716 222B A9 14			lda #$14
   717 222D 85 8D			sta :ecx+1
   718 222F A9 00			lda #$00
   719 2231 85 88			sta :edx
   720 2233 A9 10			lda #$10
   721 2235 85 89			sta :edx+1
   722 2237 A9 08			lda #$08
   723 2239 85 84			sta :eax
   724 223B A9 00			lda #$00
   725 223D 85 85			sta :eax+1
   726 223F 20 2B 20			jsr @move
   727
   728 				; optimize OK (SPRITES), line = 27
   729
   730 2242 A5 02			lda BSHIPY
   731 2244 85 8C			sta :ecx
   732 2246 A9 15			lda #$15
   733 2248 85 8D			sta :ecx+1
   734 224A A9 08			lda #$08
   735 224C 85 88			sta :edx
   736 224E A9 10			lda #$10
   737 2250 85 89			sta :edx+1
   738 2252 A9 08			lda #$08
   739 2254 85 84			sta :eax
   740 2256 A9 00			lda #$00
   741 2258 85 85			sta :eax+1
   742 225A 20 2B 20			jsr @move
   743 225D			@exit
   744 					.ifdef @new
   745 					lda <@VarData
   746 					sta :ztmp
   747 					lda >@VarData
   748 					ldy #@VarDataSize-1
   749 					jmp @FreeMem
   750 					els
   751 225D 60				rts						; ret
   752 					eif
   753 				.endl
   754
   755 225E			.local	INIT						; PROCEDURE
   756
   757 				; optimize OK (SPRITES), line = 32
   758
   759 225E				.LOCAL
   760 225E A0 00			ldy #$00
   761 2260 98				tya
   762 2261 99 00 13 99 80 13 + fill	:10 sta $1300+#*$80,y
   763 227F C8				iny
   764 2280 10 DF			bpl fill
   765 					.ENDL
   766
   767 				; optimize OK (SPRITES), line = 33
   768
   769 2282 A0 70			ldy #256-$90
   770 2284 A9 FF			lda #$FF
   771 2286 99 B0 12 C8 D0 FA		sta:rne $1320+$90-256,y+
   772
   773 				; optimize OK (SPRITES), line = 35
   774
   775 228C A9 10			lda #$10
   776 228E 8D 07 D4			sta GLOBALS.PMBASE
   777
   778 				; optimize OK (SPRITES), line = 36
   779
   780 2291 A9 0A			lda #$0A
   781 2293 8D 15 D0			sta GLOBALS.COLPM3
   782 2296 A9 0E			lda #$0E
   783 2298 8D 12 D0			sta GLOBALS.COLPM01
   784 229B 8D 13 D0			sta GLOBALS.COLPM01+1
   785
   786 				; optimize OK (SPRITES), line = 37
   787
   788 229E A9 50			lda #$50
   789 22A0 85 02			sta BSHIPY
   790 22A2 85 03			sta BSHIPYCLEAR
   791
   792 				; optimize OK (SPRITES), line = 38
   793
   794 22A4 A9 30			lda #$30
   795 22A6 85 00			sta BHPOSP0
   796 22A8 A9 38			lda #$38
   797 22AA 85 01			sta BHPOSP1
   798 22AC A5 00			lda WSHIPX
   799 22AE 8D 00 D0			sta GLOBALS.HPOSP01
   800 22B1 A5 01			lda WSHIPX+1
   801 22B3 8D 01 D0			sta GLOBALS.HPOSP01+1
   802
   803 				; optimize OK (SPRITES), line = 39
   804
   805 22B6 A9 00			lda #$00
   806 22B8 8D 08 D0			sta GLOBALS.SIZEP01
   807 22BB 8D 09 D0			sta GLOBALS.SIZEP01+1
   808 22BE 8D 0C D0			sta GLOBALS.SIZEM
   809 22C1 8D 1B D0			sta GLOBALS.PRIOR
   810 22C4 A9 03			lda #$03
   811 22C6 8D 1D D0			sta GLOBALS.GRACTL
   812
   813 				; optimize FAIL ('COPYSHIP', SPRITES), line = 41
   814
   815 22C9 20 07 22			jsr COPYSHIP
   816 22CC			@exit
   817 					.ifdef @new
   818 					lda <@VarData
   819 					sta :ztmp
   820 					lda >@VarData
   821 					ldy #@VarDataSize-1
   822 					jmp @FreeMem
   823 					els
   824 22CC 60				rts						; ret
   825 					eif
   826 				.endl
   827
   828 				; ------------------------------------------------------------
   829 				; ------------------------------------------------------------
   830 22CD			@UnitInit
   831
   832 22CD 60				rts
   833
   834 				; ------------------------------------------------------------
   835
   836 = 0000			BHPOSP0	= $00
   837 = 0001			BHPOSP1	= $01
   838 = 0002			BSHIPY	= $02
   839 = 0003			BSHIPYCLEAR	= $03
   840 = 0000			WSHIPX	= $00
   841
   842 				.endl							; UNIT SPRITES
   843
   844 				; ------------------------------------------------------------
   845
   846 22CE			.local	JOY						; UNIT
   847
   848 22CE			.local	MOVESHIP					; PROCEDURE
   849
   850 				; optimize OK (JOY), line = 20
   851
   852 22CE A9 0C			lda #$0C
   853 22D0 85 FF			sta GLOBALS.BMASK1
   854
   855 				; optimize OK (JOY), line = 21
   856
   857 22D2 A9 01			lda #$01
   858 22D4 85 FD			sta GLOBALS.B1I
   859
   860 22D6			l_0117
   861 				; --- ForToDoCondition
   862
   863 				; optimize OK (JOY), line = 22
   864
   865 22D6 A5 04			lda JOYDIRECTION
   866 22D8 25 FF			and GLOBALS.BMASK1
   867 22DA 8D D3 24			sta @CASETMP_0003
   868 22DD C9 04			cmp #$04
   869 22DF D0 20			jne l_0136
   870 22E1			@
   871
   872 				; optimize OK (JOY), line = 24
   873
   874 22E1 A5 01			lda SPRITES.BHPOSP1
   875 22E3 C9 B0			cmp #$B0
   876 22E5 B0 17			jcs l_0148
   877
   878 				; optimize OK (JOY), line = 25
   879
   880 22E7 A5 00			lda SPRITES.WSHIPX
   881 22E9 18 69 02			add #$02
   882 22EC 85 00			sta SPRITES.WSHIPX
   883 22EE A5 01			lda SPRITES.WSHIPX+1
   884 22F0 69 02			adc #$02
   885 22F2 85 01			sta SPRITES.WSHIPX+1
   886 22F4 A5 00			lda SPRITES.WSHIPX
   887 22F6 8D 00 D0			sta GLOBALS.HPOSP01
   888 22F9 A5 01			lda SPRITES.WSHIPX+1
   889 22FB 8D 01 D0			sta GLOBALS.HPOSP01+1
   890 22FE			l_0148
   891
   892 22FE 4C 55 23			jmp a_0003
   893 2301			l_0136
   894 2301 C9 08			cmp #$08
   895 2303 D0 20			jne l_015A
   896 2305			@
   897
   898 				; optimize OK (JOY), line = 29
   899
   900 2305 A5 00			lda SPRITES.BHPOSP0
   901 2307 C9 31			cmp #$31
   902 2309 90 17			jcc l_016C
   903
   904 				; optimize OK (JOY), line = 30
   905
   906 230B A5 00			lda SPRITES.WSHIPX
   907 230D 38 E9 02			sub #$02
   908 2310 85 00			sta SPRITES.WSHIPX
   909 2312 A5 01			lda SPRITES.WSHIPX+1
   910 2314 E9 02			sbc #$02
   911 2316 85 01			sta SPRITES.WSHIPX+1
   912 2318 A5 00			lda SPRITES.WSHIPX
   913 231A 8D 00 D0			sta GLOBALS.HPOSP01
   914 231D A5 01			lda SPRITES.WSHIPX+1
   915 231F 8D 01 D0			sta GLOBALS.HPOSP01+1
   916 2322			l_016C
   917
   918 2322 4C 55 23			jmp a_0003
   919 2325			l_015A
   920 2325 C9 02			cmp #$02
   921 2327 D0 18			jne l_017E
   922 2329			@
   923
   924 				; optimize OK (JOY), line = 34
   925
   926 2329 A5 02			lda SPRITES.BSHIPY
   927 232B C9 21			cmp #$21
   928 232D 90 0F			jcc l_0190
   929
   930 				; optimize OK (JOY), line = 35
   931
   932 232F 18 69 06			add #$06
   933 2332 85 03			sta SPRITES.BSHIPYCLEAR
   934 2334 A5 02			lda SPRITES.BSHIPY
   935 2336 38 E9 02			sub #$02
   936 2339 85 02			sta SPRITES.BSHIPY
   937
   938 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 36
   939
   940 233B 20 07 22			jsr SPRITES.COPYSHIP
   941 233E			l_0190
   942
   943 233E 4C 55 23			jmp a_0003
   944 2341			l_017E
   945 2341 C9 01			cmp #$01
   946 2343 D0 10			jne l_01A8
   947 2345			@
   948
   949 				; optimize OK (JOY), line = 40
   950
   951 2345 A5 02			lda SPRITES.BSHIPY
   952 2347 C9 A8			cmp #$A8
   953 2349 B0 0A			jcs l_01BA
   954
   955 				; optimize OK (JOY), line = 41
   956
   957 234B 85 03			sta SPRITES.BSHIPYCLEAR
   958 234D 18 69 02			add #$02
   959 2350 85 02			sta SPRITES.BSHIPY
   960
   961 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 42
   962
   963 2352 20 07 22			jsr SPRITES.COPYSHIP
   964 2355			l_01BA
   965
   966 2355			l_01A8
   967 2355			a_0003
   968
   969 				; optimize OK (JOY), line = 46
   970
   971 2355 A9 03			lda #$03
   972 2357 85 FF			sta GLOBALS.BMASK1
   973
   974 				; --- ForToDoEpilog
   975 2359 C6 FD			dec GLOBALS.B1I
   976 235B 30 03 4C D6 22		jpl l_0117
   977 2360			l_0125
   978
   979 				; ------------------------------------------------------------
   980
   981 = 0000			@FORTMP_0114	= $00
   982 = 24D3			@CASETMP_0003	= DATAORIGIN+$000F
   983
   984 = 24D3			@VarData	= @CASETMP_0003
   985 = 0001			@VarDataSize	= 1
   986
   987 2360			@exit
   988 					.ifdef @new
   989 					lda <@VarData
   990 					sta :ztmp
   991 					lda >@VarData
   992 					ldy #@VarDataSize-1
   993 					jmp @FreeMem
   994 					els
   995 2360 60				rts						; ret
   996 					eif
   997 				.endl
   998
   999 				; ------------------------------------------------------------
  1000 				; ------------------------------------------------------------
  1001 2361			@UnitInit
  1002
  1003 2361 60				rts
  1004
  1005 				; ------------------------------------------------------------
  1006
  1007 = 0004			JOYDIRECTION	= $04
  1008
  1009 				.endl							; UNIT JOY
  1010
  1011 2362			.local	VBI						; PROCEDURE | INTERRUPT
  1012
  1013 				; ---------------------  ASM Block 055  ---------------------
  1014
  1015 2362 48 8A 48 98 48	 phr 
  1016
  1017 				; optimize OK (main.pas), line = 19
  1018
  1019 2367 AD 0A D2			lda SYSTEM.RND
  1020 236A 29 0F			and #$0F
  1021 236C 20 C8 20			jsr @mul40
  1022 236F 18 6D 04 11			add GLOBALS.DL2LMS
  1023 2373 A8				tay
  1024 2374 AD 05 11			lda GLOBALS.DL2LMS+1
  1025 2377 65 85			adc :eax+1
  1026 2379 85 91			sta :bp+1
  1027 237B A9 80			lda #$80
  1028 237D 91 90			sta (:bp),y
  1029 237F AD 04 11 D0 03 CE + 	dew GLOBALS.DL2LMS
  1030
  1031 				; optimize OK (main.pas), line = 20
  1032
  1033 238A A9 15			lda #$15
  1034 238C 85 FD			sta GLOBALS.B1I
  1035
  1036 238E			l_01F9
  1037 				; --- ForToDoCondition
  1038 238E A5 FD			lda GLOBALS.B1I
  1039 2390 20 C8 20			jsr @mul40
  1040 2393 18 6D 04 11			add GLOBALS.DL2LMS
  1041 2397 A8				tay
  1042 2398 AD 05 11			lda GLOBALS.DL2LMS+1
  1043 239B 65 85			adc :eax+1
  1044 239D 85 91			sta :bp+1
  1045 239F A9 00			lda #$00
  1046 23A1 91 90			sta (:bp),y
  1047
  1048 				; --- ForToDoEpilog
  1049 23A3 C6 FD			dec GLOBALS.B1I
  1050 23A5 10 E7			jpl l_01F9
  1051 23A7			l_0207
  1052
  1053 				; ---------------------  ASM Block 056  ---------------------
  1054
  1055 23A7 68 A8 68 AA 68	 plr 
  1056
  1057 				; ------------------------------------------------------------
  1058
  1059 = 0000			@FORTMP_01F6	= $00
  1060 23AC 40				rti						; ret
  1061 				.endl
  1062
  1063 23AD			.local	JOYHANDLER					; PROCEDURE | INTERRUPT
  1064
  1065 				; ---------------------  ASM Block 057  ---------------------
  1066
  1067 23AD 48 8A 48 98 48	 phr 
  1068
  1069 				; ---------------------  ASM Block 058  ---------------------
  1070
  1071 23B2 8D 0A D4		 sta WSYNC 
  1072
  1073 				; optimize OK (main.pas), line = 30
  1074
  1075 23B5 A9 0F			lda #$0F
  1076 23B7 8D 1A D0			sta GLOBALS.COLBK
  1077
  1078 				; optimize OK (main.pas), line = 32
  1079
  1080 23BA AD 00 D3			lda GLOBALS.PORTA
  1081 23BD 85 04			sta JOY.JOYDIRECTION
  1082
  1083 				; optimize OK (main.pas), line = 33
  1084
  1085 23BF 29 0F			and #$0F
  1086 23C1 C9 0F			cmp #$0F
  1087 23C3 F0 03			jeq l_023E
  1088 23C5 20 CE 22			jsr JOY.MOVESHIP
  1089 23C8			l_023E
  1090
  1091 				; optimize OK (main.pas), line = 35
  1092
  1093 23C8 A9 00			lda #$00
  1094 23CA 8D 1A D0			sta GLOBALS.COLBK
  1095
  1096 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 37
  1097
  1098 23CD E8				inx
  1099 23CE AD D6 24 95 98		mva PSTARS :STACKORIGIN,x
  1100 23D3 AD D7 24 95 A8		mva PSTARS+1 :STACKORIGIN+STACKWIDTH,x
  1101 23D8 20 C7 21			jsr SYS.SETDLI
  1102
  1103 				; ---------------------  ASM Block 059  ---------------------
  1104
  1105 23DB 68 A8 68 AA 68	 plr 
  1106 23E0 40				rti						; ret
  1107 				.endl
  1108
  1109 23E1			.local	STARS						; PROCEDURE | INTERRUPT
  1110
  1111 				; ---------------------  ASM Block 060  ---------------------
  1112
  1113 23E1 48 8A 48 98 48	 phr 
  1114
  1115 				; optimize OK (main.pas), line = 46
  1116
  1117 23E6 A9 7C			lda #$7C
  1118 23E8 85 FD			sta GLOBALS.B1I
  1119
  1120 23EA			l_0256
  1121 				; --- ForToDoCondition
  1122
  1123 				; ---------------------  ASM Block 061  ---------------------
  1124
  1125 23EA 8D 0A D4		 sta WSYNC 
  1126
  1127 				; optimize OK (main.pas), line = 48
  1128
  1129 23ED A4 FD			ldy GLOBALS.B1I
  1130 23EF B9 00 12			lda adr.ASTARS,y
  1131 23F2 8D 07 D0			sta GLOBALS.HPOSM3
  1132
  1133 				; optimize OK (main.pas), line = 49
  1134
  1135 23F5 B9 00 12			lda adr.ASTARS,y
  1136 23F8 38 F9 7D 12			sub adr.ASPEED,y
  1137 23FC 99 00 12			sta adr.ASTARS,y
  1138
  1139 				; optimize OK (main.pas), line = 50
  1140
  1141 23FF AD 0A D2			lda SYSTEM.RND
  1142 2402 8D 15 D0			sta GLOBALS.COLPM3
  1143
  1144 				; --- ForToDoEpilog
  1145 2405 C6 FD			dec GLOBALS.B1I
  1146 2407 10 E1			jpl l_0256
  1147 2409			l_0264
  1148
  1149 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 53
  1150
  1151 2409 E8				inx
  1152 240A AD D4 24 95 98		mva PJOY :STACKORIGIN,x
  1153 240F AD D5 24 95 A8		mva PJOY+1 :STACKORIGIN+STACKWIDTH,x
  1154 2414 20 C7 21			jsr SYS.SETDLI
  1155
  1156 				; ---------------------  ASM Block 062  ---------------------
  1157
  1158 2417 68 A8 68 AA 68	 plr 
  1159
  1160 				; ------------------------------------------------------------
  1161
  1162 = 0000			@FORTMP_0253	= $00
  1163 241C 40				rti						; ret
  1164 				.endl
  1165
  1166 241D			.local	INIT						; PROCEDURE
  1167
  1168 				; optimize FAIL ('SYSTEM.PAUSE_0078', main.pas), line = 60
  1169
  1170 241D 20 96 21			jsr SYSTEM.PAUSE_0078
  1171 2420 A9 00			lda #$00
  1172 2422 8D 00 D4			sta GLOBALS.DMACTL
  1173 2425 20 DF 21			jsr SYS.SYSTEMOFF
  1174
  1175 				; optimize OK (main.pas), line = 62
  1176
  1177 2428 A9 FF			lda #$FF
  1178 242A 85 88			sta :edx
  1179 242C A9 EF			lda #$EF
  1180 242E 85 89			sta :edx+1
  1181 2430 A9 C0			lda #$C0
  1182 2432 85 8C			sta :ecx
  1183 2434 A9 03			lda #$03
  1184 2436 85 8D			sta :ecx+1
  1185 2438 A9 00			lda #$00
  1186 243A 85 84			sta :eax
  1187 243C 20 80 20			jsr @fill
  1188
  1189 				; optimize OK (main.pas), line = 64
  1190
  1191 243F A9 7C			lda #$7C
  1192 2441 85 FD			sta GLOBALS.B1I
  1193
  1194 2443			l_029B
  1195 				; --- ForToDoCondition
  1196
  1197 				; optimize OK (main.pas), line = 65
  1198
  1199 2443 A4 FD			ldy GLOBALS.B1I
  1200 2445 AD 0A D2			lda SYSTEM.RND
  1201 2448 99 00 12			sta adr.ASTARS,y
  1202
  1203 				; optimize OK (main.pas), line = 66
  1204
  1205 244B 29 03			and #$03
  1206 244D 18 69 01			add #$01
  1207 2450 99 7D 12			sta adr.ASPEED,y
  1208
  1209 				; --- ForToDoEpilog
  1210 2453 C6 FD			dec GLOBALS.B1I
  1211 2455 10 EC			jpl l_029B
  1212 2457			l_02A9
  1213
  1214 				; optimize FAIL ('SPRITES.INIT', main.pas), line = 69
  1215
  1216 2457 20 5E 22			jsr SPRITES.INIT
  1217
  1218 				; optimize FAIL ('GR.MODE2', main.pas), line = 70
  1219
  1220 245A 20 FB 21			jsr GR.MODE2
  1221 245D A9 00			lda #$00
  1222 245F 8D 1A D0			sta GLOBALS.COLBK
  1223 2462 A9 02			lda #$02
  1224 2464 8D 18 D0			sta GLOBALS.COLPF2
  1225
  1226 				; optimize OK (main.pas), line = 71
  1227
  1228 2467 AD 02 D3			lda GLOBALS.PACTL
  1229 246A 09 04			ora #$04
  1230 246C 8D 02 D3			sta GLOBALS.PACTL
  1231
  1232 				; optimize OK (main.pas), line = 72
  1233
  1234 246F A9 AD			lda <JOYHANDLER
  1235 2471 8D D4 24			sta PJOY
  1236 2474 A9 23			lda >JOYHANDLER
  1237 2476 8D D5 24			sta PJOY+1
  1238 2479 A9 E1			lda <STARS
  1239 247B 8D D6 24			sta PSTARS
  1240 247E A9 23			lda >STARS
  1241 2480 8D D7 24			sta PSTARS+1
  1242
  1243 				; optimize FAIL ('SYS.SETVBI', main.pas), line = 74
  1244
  1245 2483 E8				inx
  1246 2484 A9 62 95 98			mva <VBI :STACKORIGIN,x
  1247 2488 A9 23 95 A8			mva >VBI :STACKORIGIN+STACKWIDTH,x
  1248 248C 20 AF 21			jsr SYS.SETVBI
  1249
  1250 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 75
  1251
  1252 248F E8				inx
  1253 2490 A9 AD 95 98			mva <JOYHANDLER :STACKORIGIN,x
  1254 2494 A9 23 95 A8			mva >JOYHANDLER :STACKORIGIN+STACKWIDTH,x
  1255 2498 20 C7 21			jsr SYS.SETDLI
  1256
  1257 				; optimize FAIL ('SYSTEM.PAUSE_0078', main.pas), line = 77
  1258
  1259 249B 20 96 21			jsr SYSTEM.PAUSE_0078
  1260 249E A9 3E			lda #$3E
  1261 24A0 8D 00 D4			sta GLOBALS.DMACTL
  1262
  1263 				; ------------------------------------------------------------
  1264
  1265 = 0000			@FORTMP_0298	= $00
  1266 24A3			@exit
  1267 					.ifdef @new
  1268 					lda <@VarData
  1269 					sta :ztmp
  1270 					lda >@VarData
  1271 					ldy #@VarDataSize-1
  1272 					jmp @FreeMem
  1273 					els
  1274 24A3 60				rts						; ret
  1275 					eif
  1276 				.endl
  1277 24A4			l_0007
  1278
  1279 				; optimize FAIL ('INIT', main.pas), line = 81
  1280
  1281 24A4 20 1D 24			jsr INIT
  1282
  1283 				; --- RepeatUntilProlog
  1284 24A7			l_02EC
  1285
  1286 				; optimize OK (main.pas), line = 82
  1287
  1288 24A7 4C A7 24			jmp l_02EC
  1289
  1290 				; ------------------------------------------------------------
  1291
  1292 = 1200			adr.ASTARS	= $1200
  1293 24AA			.var ASTARS	= adr.ASTARS .word
  1294 = 127D			adr.ASPEED	= $127D
  1295 24AA			.var ASPEED	= adr.ASPEED .word
  1296 = 24D4			PJOY	= DATAORIGIN+$0010
  1297 = 24D6			PSTARS	= DATAORIGIN+$0012
  1298 24AA			@exit
  1299
  1300 24AA A2 00		@halt	ldx #$00
  1301 24AC 9A				txs
  1302 					.ifdef MAIN.@DEFINES.ROMOFF
  1303 					inc portb
  1304 					.endif
  1305
  1306 24AD A0 01			ldy #$01
  1307
  1308 24AF 60				rts
  1309
  1310 				; ------------------------------------------------------------
  1311
  1312 24B0 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1313
  1314 				; ------------------------------------------------------------
  1315
  1316 24C0			.local	@DEFINES
  1317 24C0			ATARI
  1318 				.endl
  1319
  1320 24C0			.local	@RESOURCE
  1321 				.endl
  1322
  1323 = 24C0 00 12		ASTARS
  1323 = 24C2 7D 12		ASPEED
  1323 				.endl							; MAIN
  1324
  1325 				; ------------------------------------------------------------
  1326 				; ------------------------------------------------------------
  1327
  1328 				.macro	UNITINITIALIZATION
  1329 				
  1330 					.ifdef MAIN.SYSTEM.@UnitInit
  1331 					jsr MAIN.SYSTEM.@UnitInit
  1332 					eif
  1333 				
  1334 					.ifdef MAIN.GLOBALS.@UnitInit
  1335 					jsr MAIN.GLOBALS.@UnitInit
  1336 					eif
  1337 				
  1338 					.ifdef MAIN.SYS.@UnitInit
  1339 					jsr MAIN.SYS.@UnitInit
  1340 					eif
  1341 				
  1342 					.ifdef MAIN.GR.@UnitInit
  1343 					jsr MAIN.GR.@UnitInit
  1344 					eif
  1345 				
  1346 					.ifdef MAIN.SPRITES.@UnitInit
  1347 					jsr MAIN.SPRITES.@UnitInit
  1348 					eif
  1349 				
  1350 					.ifdef MAIN.JOY.@UnitInit
  1351 					jsr MAIN.JOY.@UnitInit
  1352 					eif
  1353 				.endm
  1354
  1355 				; ------------------------------------------------------------
  1356
  1357 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1358 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1358 				SYSTEM: $2129..$21A0
  1359 					eif
  1360
  1361 					ift .SIZEOF(MAIN.GLOBALS) > 0
  1362 					.print 'GLOBALS: ',MAIN.GLOBALS,'..',MAIN.GLOBALS+.SIZEOF(MAIN.GLOBALS)-1
  1363 					eif
  1364
  1365 					ift .SIZEOF(MAIN.SYS) > 0
  1366 					.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
  1366 				SYS: $21A1..$21FA
  1367 					eif
  1368
  1369 					ift .SIZEOF(MAIN.GR) > 0
  1370 					.print 'GR: ',MAIN.GR,'..',MAIN.GR+.SIZEOF(MAIN.GR)-1
  1370 				GR: $21FB..$2206
  1371 					eif
  1372
  1373 					ift .SIZEOF(MAIN.SPRITES) > 0
  1374 					.print 'SPRITES: ',MAIN.SPRITES,'..',MAIN.SPRITES+.SIZEOF(MAIN.SPRITES)-1
  1374 				SPRITES: $2207..$22CD
  1375 					eif
  1376
  1377 					ift .SIZEOF(MAIN.JOY) > 0
  1378 					.print 'JOY: ',MAIN.JOY,'..',MAIN.JOY+.SIZEOF(MAIN.JOY)-1
  1378 				JOY: $22CE..$2361
  1379 					eif
  1380
  1381 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1381 				CODE: $2000..$24BF
  1382
  1383 				; ------------------------------------------------------------
  1384
  1385 24C4				.align $04
  1386
  1387 24C4			DATAORIGIN
  1388 24C4 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1389
  1390 = 0006			VARINITSIZE	= *-DATAORIGIN
  1391 = 0014			VARDATASIZE	= 20
  1392
  1393 = 24D8			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1394
  1395 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1395 				DATA: $24C4..$24D8
  1396
  1397 02E0-02E1> ED 20			run START
  1398
  1399 				; ------------------------------------------------------------
  1400
  1401 				.macro	STATICDATA
  1402 				.endm
  1403
  1404 					end
