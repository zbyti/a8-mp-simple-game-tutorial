mads 2.1.1
  1133 					opt l+
    98 = 0000				?EXTDETECT = 0
    99 = 0000				?VBXDETECT = 0
   100
   101 2075				RCASM 'res/gr_dl.asm' GLOBALS.DL_2 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 001A			len = .sizeof(_GLOBALS.DL_2)
     6 				mcpy	ift main.GLOBALS.DL_2+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 11 +  MWA #MAIN.GLOBALS.DL_2 ECX
    13 2088 A9 1A 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: const.inc
     1 = 1000			PM_ADR              = $1000;                      // players & missiles memory (2K) start address
     2 = 1300			M0_ADR              = PM_ADR + $300;              // missile 0 start memory address
     3 = 1400			P0_ADR              = PM_ADR + $400;              // player 0 start memory address
     4 = 1500			P1_ADR              = PM_ADR + $500;              // player 1 start memory address
     5 = 1000			GFX_SHIP_ADR        = $1000;                      // ship gfx memory start address, ship size = 20 bytes, 16 bytes for gfx and 4 bytes fo top/bottom empty rows
     6 = 0008			GFX_SHIP_SEG        = 8;                          // ship gfx 10 byte segment, 10B for P0 & 10B for P1
     8 = 0E0E			SHIP_COL            = $0e0e;
     9 = 0030			SHIP_LEFT_LIMIT     = 48;
    10 = 00B0			SHIP_RIGHT_LIMIT    = SHIP_LEFT_LIMIT + (16 * 8);
    11 = 0020			SHIP_TOP_LIMIT      = 32;
    12 = 00A8			SHIP_BOTTOM_LIMIT   = 8 * 21;
    13 = 0202			SHIP_X_STEP         = $0202;
    15 = 0008			JOY_LEFT            = %1000;
    16 = 0004			JOY_RIGHT           = %0100;
    17 = 0002			JOY_UP              = %0010;
    18 = 0001			JOY_DOWN            = %0001;
    20 = 1100			DL_2                = $1100;                      // display list memory start address for ANTIC mode 2
    21 = EC3F			GAME_LMS            = $efff - $3c0;               // Load Memory Scan address
    22 = E000			GAME_LMS_EMD        = $e000;
     3 1100			dl2
     4 1100 F0 70 F0		    .byte $f0,$70,$f0
     5 1103 42 3F EC		    .byte $42,a(GAME_LMS)
     6 1106 02 02 02 02 02 02 + :17 .byte 2
     7 1117 41 00 11		    .byte $41,a(dl2)
    23 					.print '$R RCASM   ',main.GLOBALS.DL_2,'..',main.GLOBALS.DL_2+len-1," 'res/gr_dl.asm'"
    23 				$R RCASM   $1100..$1119 'res/gr_dl.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: main.a65
   102 20B0				RCDATA 'res/gfx_ship.bin' GLOBALS.GFX_SHIP_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0010			len = .filesize('res/gfx_ship.bin')
    28 20B0				org main.GLOBALS.GFX_SHIP_ADR
    30 1000-100F> 70 7B 1E 3F + 	ins 'res/gfx_ship.bin'
    32 					.print '$R RCDATA  ',main.GLOBALS.GFX_SHIP_ADR,'..',*-1," 'res/gfx_ship.bin'"
    32 				$R RCDATA  $1000..$100F 'res/gfx_ship.bin'
Source: main.a65
   103 				.endl
   104
   105 				; ------------------------------------------------------------
   106
   107 1010				org CODEORIGIN
   108
   109 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
     1 2000-2530> 00 00 28 00 + .by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
     2 2018 E0 01 08 02 30 02 + .by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03
Source: main.a65
   110
   111 				; ------------------------------------------------------------
   112
   113 202C			RTLIB
   114 202C				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
   166 					opt l+
   115
   116 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   116 				ZPAGE: $0080..$00D7
   117
   118 				.print 'RTLIB: ',RTLIB,'..',*-1
   118 				RTLIB: $202C..$2118
   119
   120 				; ------------------------------------------------------------
   121
   122 2119			START
   123 2119 BA				tsx
   124 211A 8E 16 25			stx MAIN.@halt+1
   125
   126 					.ifdef fmulinit
   127 					fmulinit
   128 					eif
   129
   130 = 000E			VLEN	= VARDATASIZE-VARINITSIZE
   131 = 253A			VADR	= DATAORIGIN+VARINITSIZE
   132
   133 					ift VADR > $BFFF
   134 					ert 'Invalid memory address range ',VADR
   135 					eli (VLEN>0) && (VLEN<=256)
   136 211D A2 F2			ldx #256-VLEN
   137 211F A9 00			lda #$00
   138 2121 9D 48 24 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   139 					eli VLEN>0
   140 					@fill #VADR #VLEN #$00
   141 					eif
   142
   143 2127 A9 48 85 82 A9 25 + 	mwa #PROGRAMSTACK psptr
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 					icl 'atari\romoff.asm'
   147 					.endif
   148
   149 212F A2 0F			ldx #$0F					; DOS II+/D ParamStr
   150 2131 BD 40 03 9D 1B 25 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   151
   152 213A E8				inx						; X = 0
   153 213B 86 90			stx bp						; BP = 0
   154
   155 213D 8E 08 D2			stx audctl					; reset POKEY
   156 2140 A9 03			lda #3
   157 2142 8D 0F D2			sta skctl
   158
   159 2145 CA				dex						; X = 255
   160
   161 2146				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
    11 2146 20 26 22			jsr MAIN.SYS.@UnitInit
    15 2149 20 32 22			jsr MAIN.GR.@UnitInit
    19 214C 20 F9 22			jsr MAIN.SPRITES.@UnitInit
    23 214F 20 8D 23			jsr MAIN.JOY.@UnitInit
   162
   163 2152			.local	MAIN						; PROCEDURE
   164
   165 2152 4C 0F 25			jmp l_0007
   166
   167 				; ------------------------------------------------------------
   168
   169 2155			.local	SYSTEM						; UNIT
   170
   171 2155			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   172
   173 				; ------------------------------------------------------------
   174
   175 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   176 				; as Pointer
   177 2155 B5 98			lda :STACKORIGIN,x
   178 2157 85 8C			sta VALUE
   179 2159 CA				dex
   180
   181 				; ------------------------------------------------------------
   182
   183 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   184 				; as Pointer
   185 215A B5 98			lda :STACKORIGIN,x
   186 215C 85 88			sta A
   187 215E B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   188 2160 85 89			sta A+1
   189 2162 CA				dex
   190
   191 				; ---------------------  ASM Block 021  ---------------------
   192
   193 2163 A0 00			ldy #0
   194 2165 A5 8C 91 88			mva value (edx),y
   195
   196
   197 				; ------------------------------------------------------------
   198
   199 = 0088			A	= edx
   200 = 008C			VALUE	= ecx
   201 2169			@exit
   202 					.ifdef @new
   203 					lda <@VarData
   204 					sta :ztmp
   205 					lda >@VarData
   206 					ldy #@VarDataSize-1
   207 					jmp @FreeMem
   208 					els
   209 2169 60				rts						; ret
   210 					eif
   211 				.endl
   212
   213 216A			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   214
   215 				; ------------------------------------------------------------
   216
   217 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   218 				; as Pointer
   219 216A B5 98			lda :STACKORIGIN,x
   220 216C 85 8C			sta VALUE
   221 216E B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   222 2170 85 8D			sta VALUE+1
   223 2172 CA				dex
   224
   225 				; ------------------------------------------------------------
   226
   227 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   228 				; as Pointer
   229 2173 B5 98			lda :STACKORIGIN,x
   230 2175 85 88			sta A
   231 2177 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   232 2179 85 89			sta A+1
   233 217B CA				dex
   234
   235 				; ---------------------  ASM Block 022  ---------------------
   236
   237 217C A0 00			ldy #0
   238 217E A5 8C 91 88			mva value (edx),y
   239 2182 C8				iny
   240 2183 A5 8D 91 88			mva value+1 (edx),y
   241
   242
   243 				; ------------------------------------------------------------
   244
   245 = 0088			A	= edx
   246 = 008C			VALUE	= ecx
   247 2187			@exit
   248 					.ifdef @new
   249 					lda <@VarData
   250 					sta :ztmp
   251 					lda >@VarData
   252 					ldy #@VarDataSize-1
   253 					jmp @FreeMem
   254 					els
   255 2187 60				rts						; ret
   256 					eif
   257 				.endl
   258
   259 2188			.local	FILLBYTE_0050					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   260
   261 				; ------------------------------------------------------------
   262
   263 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   264 				; as Pointer
   265 2188 B5 98			lda :STACKORIGIN,x
   266 218A 85 84			sta VALUE
   267 218C CA				dex
   268
   269 				; ------------------------------------------------------------
   270
   271 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   272 				; as Pointer
   273 218D B5 98			lda :STACKORIGIN,x
   274 218F 85 8C			sta COUNT
   275 2191 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   276 2193 85 8D			sta COUNT+1
   277 2195 CA				dex
   278
   279 				; ------------------------------------------------------------
   280
   281 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   282 				; as Pointer
   283 2196 B5 98			lda :STACKORIGIN,x
   284 2198 85 88			sta A
   285 219A B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   286 219C 85 89			sta A+1
   287 219E CA				dex
   288
   289 				; ---------------------  ASM Block 029  ---------------------
   290
   291 219F 20 AC 20			jsr @fill
   292
   293
   294 				; ------------------------------------------------------------
   295
   296 = 0088			A	= edx
   297 = 008C			COUNT	= ecx
   298 = 0084			VALUE	= eax
   299 21A2			@exit
   300 					.ifdef @new
   301 					lda <@VarData
   302 					sta :ztmp
   303 					lda >@VarData
   304 					ldy #@VarDataSize-1
   305 					jmp @FreeMem
   306 					els
   307 21A2 60				rts						; ret
   308 					eif
   309 				.endl
   310
   311 21A3			.local	MOVE_005A					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   312
   313 				; ------------------------------------------------------------
   314
   315 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   316 				; as Pointer
   317 21A3 B5 98			lda :STACKORIGIN,x
   318 21A5 85 84			sta COUNT
   319 21A7 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   320 21A9 85 85			sta COUNT+1
   321 21AB CA				dex
   322
   323 				; ------------------------------------------------------------
   324
   325 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   326 				; as Pointer
   327 21AC B5 98			lda :STACKORIGIN,x
   328 21AE 85 8C			sta DEST
   329 21B0 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   330 21B2 85 8D			sta DEST+1
   331 21B4 CA				dex
   332
   333 				; ------------------------------------------------------------
   334
   335 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   336 				; as Pointer
   337 21B5 B5 98			lda :STACKORIGIN,x
   338 21B7 85 88			sta SOURCE
   339 21B9 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   340 21BB 85 89			sta SOURCE+1
   341 21BD CA				dex
   342
   343 				; ---------------------  ASM Block 031  ---------------------
   344
   345 21BE 20 57 20			jsr @move
   346
   347
   348 				; ------------------------------------------------------------
   349
   350 = 0088			SOURCE	= edx
   351 = 008C			DEST	= ecx
   352 = 0084			COUNT	= eax
   353 21C1			@exit
   354 					.ifdef @new
   355 					lda <@VarData
   356 					sta :ztmp
   357 					lda >@VarData
   358 					ldy #@VarDataSize-1
   359 					jmp @FreeMem
   360 					els
   361 21C1 60				rts						; ret
   362 					eif
   363 				.endl
   364
   365 21C2			.local	PAUSE_0078					; PROCEDURE | ASSEMBLER | OVERLOAD
   366
   367 				; ---------------------  ASM Block 039  ---------------------
   368
   369 21C2 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   370
   371 21C8			@exit
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					els
   379 21C8 60				rts						; ret
   380 					eif
   381 				.endl
   382
   383 				; ------------------------------------------------------------
   384
   385 = 0101			__PORTB_BANKS	= $0101
   386 = 0648			M_PI_2	= $0648
   387 = 0192			D_PI_2	= $0192
   388 = 0004			D_PI_180	= $04
   389 = 0000			MGTIA	= $00
   390 = 0080			MVBXE	= $80
   391 = 0000			VBXE_XDLADR	= $00
   392 = 0100			VBXE_BCBADR	= $0100
   393 = 1000			VBXE_MAPADR	= $1000
   394 = 5000			VBXE_OVRADR	= $5000
   395 = B000			VBXE_WINDOW	= $B000
   396 = 0000			IDLI	= $00
   397 = 0001			IVBL	= $01
   398 = 00FE			CH_DELCHR	= $FE
   399 = 009B			CH_ENTER	= $9B
   400 = 001B			CH_ESC	= $1B
   401 = 001C			CH_CURS_UP	= $1C
   402 = 001D			CH_CURS_DOWN	= $1D
   403 = 001E			CH_CURS_LEFT	= $1E
   404 = 001F			CH_CURS_RIGHT	= $1F
   405 = 007F			CH_TAB	= $7F
   406 = 009B			CH_EOL	= $9B
   407 = 007D			CH_CLR	= $7D
   408 = 00FD			CH_BELL	= $FD
   409 = 007E			CH_DEL	= $7E
   410 = 009C			CH_DELLINE	= $9C
   411 = 009D			CH_INSLINE	= $9D
   412 = 0000			COLOR_BLACK	= $00
   413 = 000E			COLOR_WHITE	= $0E
   414 = 0032			COLOR_RED	= $32
   415 = 0096			COLOR_CYAN	= $96
   416 = 0068			COLOR_VIOLET	= $68
   417 = 00C4			COLOR_GREEN	= $C4
   418 = 0074			COLOR_BLUE	= $74
   419 = 00EE			COLOR_YELLOW	= $EE
   420 = 0028			COLOR_ORANGE	= $28
   421 = 00E4			COLOR_BROWN	= $E4
   422 = 003C			COLOR_LIGHTRED	= $3C
   423 = 0004			COLOR_GRAY1	= $04
   424 = 0006			COLOR_GRAY2	= $06
   425 = 000A			COLOR_GRAY3	= $0A
   426 = 00CC			COLOR_LIGHTGREEN	= $CC
   427 = 007C			COLOR_LIGHTBLUE	= $7C
   428 = 0004			FMOPENREAD	= $04
   429 = 0008			FMOPENWRITE	= $08
   430 = 0009			FMOPENAPPEND	= $09
   431 = 000C			FMOPENREADWRITE	= $0C
   432 = 2534			SCREENWIDTH	= DATAORIGIN+$0000
   433 = 2536			SCREENHEIGHT	= DATAORIGIN+$0002
   434 = 2538			DATESEPARATOR	= DATAORIGIN+$0004
   435 = D014			TVSYSTEM	= $D014
   436 = D20A			RND	= $D20A
   437 = 02C0			adr.PALETTE	= $02C0
   438 21C9			.var PALETTE	= adr.PALETTE .word
   439 = D012			adr.HPALETTE	= $D012
   440 21C9			.var HPALETTE	= adr.HPALETTE .word
   441 = 2539			FILEMODE	= DATAORIGIN+$0005
   442 = 253A			GRAPHMODE	= DATAORIGIN+$0006
   443 = 253B			IORESULT	= DATAORIGIN+$0007
   444 = 253C			EOLN	= DATAORIGIN+$0008
   445 = 253D			RNDSEED	= DATAORIGIN+$0009
   446
   447 = 21C9 C0 02		PALETTE
   447 = 21CB 12 D0		HPALETTE
   447 				.endl							; UNIT SYSTEM
   448
   449 				; ------------------------------------------------------------
   450
   451 21CD			.local	GLOBALS						; UNIT
   452
   453 				; ------------------------------------------------------------
   454
   455 = 1000			PM_ADR	= $1000
   456 = 1300			M0_ADR	= $1300
   457 = 1400			P0_ADR	= $1400
   458 = 1500			P1_ADR	= $1500
   459 = 1000			GFX_SHIP_ADR	= $1000
   460 = 0008			GFX_SHIP_SEG	= $08
   461 = 0E0E			SHIP_COL	= $0E0E
   462 = 0030			SHIP_LEFT_LIMIT	= $30
   463 = 00B0			SHIP_RIGHT_LIMIT	= $B0
   464 = 0020			SHIP_TOP_LIMIT	= $20
   465 = 00A8			SHIP_BOTTOM_LIMIT	= $A8
   466 = 0202			SHIP_X_STEP	= $0202
   467 = 0008			JOY_LEFT	= $08
   468 = 0004			JOY_RIGHT	= $04
   469 = 0002			JOY_UP	= $02
   470 = 0001			JOY_DOWN	= $01
   471 = 1100			DL_2	= $1100
   472 = EC3F			GAME_LMS	= $EC3F
   473 = E000			GAME_LMS_EMD	= $E000
   474 = 0014			RTCLOK	= $14
   475 = D000			HPOSP0	= $D000
   476 = D001			HPOSP1	= $D001
   477 = D004			HPOSM0	= $D004
   478 = D005			HPOSM1	= $D005
   479 = D006			HPOSM2	= $D006
   480 = D007			HPOSM3	= $D007
   481 = D008			SIZEP0	= $D008
   482 = D009			SIZEP1	= $D009
   483 = D00A			SIZEP2	= $D00A
   484 = D00B			SIZEP3	= $D00B
   485 = D00C			SIZEM	= $D00C
   486 = D011			GRAFM	= $D011
   487 = D012			COLPM0	= $D012
   488 = D013			COLPM1	= $D013
   489 = D014			COLPM2	= $D014
   490 = D015			COLPM3	= $D015
   491 = D017			COLPF1	= $D017
   492 = D018			COLPF2	= $D018
   493 = D01A			COLBK	= $D01A
   494 = D01B			PRIOR	= $D01B
   495 = D01D			GRACTL	= $D01D
   496 = D20A			RND	= $D20A
   497 = D300			PORTA	= $D300
   498 = D301			PORTB	= $D301
   499 = D302			PACTL	= $D302
   500 = D400			DMACTL	= $D400
   501 = D402			DLIST	= $D402
   502 = D407			PMBASE	= $D407
   503 = D40A			WSYNC	= $D40A
   504 = D40B			VCOUNT	= $D40B
   505 = D40E			NMIEN	= $D40E
   506 = FFFA			NMIVEC	= $FFFA
   507 = D000			HPOSP01	= $D000
   508 = D008			SIZEP01	= $D008
   509 = D012			COLPM01	= $D012
   510 = 1104			DL2LMS	= $1104
   511 = 00FF			BTMP1	= $FF
   512 = 00FE			BTMP2	= $FE
   513 = 00FD			B1I	= $FD
   514 = 00FC			B2I	= $FC
   515 = 00FA			WTMP1	= $FA
   516 = 00F8			WTMP2	= $F8
   517
   518 				.endl							; UNIT GLOBALS
   519
   520 				; ------------------------------------------------------------
   521
   522 21CD			.local	SYS						; UNIT
   523
   524 21CD			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
   525
   526 				; ---------------------  ASM Block 049  ---------------------
   527
   528
   529 				      bit NMIST \ bpl vbi     ; check kind of interrupt
   529 21CD 2C 0F D4		      BIT NMIST 
   529 21D0 10 03		 BPL VBI     
   530 = 21D2			.def  :__dlijmp
   531 21D2 4C DA 21		      jmp __off               ; VDSLST
   532 21D5 E6 14		vbi:  inc RTCLOK+2
   533 = 21D7			.def  :__vbijmp
   534 21D7 4C DA 21		      jmp __off               ; VBIVEC
   535 = 21DA			.def  :__off
   536
   537 21DA 40				rti						; ret
   538 				.endl
   539
   540 21DB			.local	SETVBI						; PROCEDURE | ASSEMBLER
   541
   542 				; ------------------------------------------------------------
   543
   544 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   545 				; as Pointer
   546 21DB B5 98			lda :STACKORIGIN,x
   547 21DD 8D 3F 25			sta A
   548 21E0 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   549 21E2 8D 40 25			sta A+1
   550 21E5 CA				dex
   551
   552 				; ---------------------  ASM Block 050  ---------------------
   553
   554
   555 21E6 AD 3F 25 8D D8 21 +   mwa a __vbijmp+1
   556
   557
   558 				; ------------------------------------------------------------
   559
   560 = 253F			A	= DATAORIGIN+$000B
   561
   562 = 253F			@VarData	= A
   563 = 0002			@VarDataSize	= 2
   564
   565 21F2			@exit
   566 					.ifdef @new
   567 					lda <@VarData
   568 					sta :ztmp
   569 					lda >@VarData
   570 					ldy #@VarDataSize-1
   571 					jmp @FreeMem
   572 					els
   573 21F2 60				rts						; ret
   574 					eif
   575 				.endl
   576
   577 21F3			.local	SETDLI						; PROCEDURE | ASSEMBLER
   578
   579 				; ------------------------------------------------------------
   580
   581 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   582 				; as Pointer
   583 21F3 B5 98			lda :STACKORIGIN,x
   584 21F5 8D 41 25			sta A
   585 21F8 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   586 21FA 8D 42 25			sta A+1
   587 21FD CA				dex
   588
   589 				; ---------------------  ASM Block 051  ---------------------
   590
   591
   592 21FE AD 41 25 8D D3 21 +   mwa a __dlijmp+1
   593
   594
   595 				; ------------------------------------------------------------
   596
   597 = 2541			A	= DATAORIGIN+$000D
   598
   599 = 2541			@VarData	= A
   600 = 0002			@VarDataSize	= 2
   601
   602 220A			@exit
   603 					.ifdef @new
   604 					lda <@VarData
   605 					sta :ztmp
   606 					lda >@VarData
   607 					ldy #@VarDataSize-1
   608 					jmp @FreeMem
   609 					els
   610 220A 60				rts						; ret
   611 					eif
   612 				.endl
   613
   614 220B			.local	SYSTEMOFF					; PROCEDURE
   615
   616 				; ---------------------  ASM Block 054  ---------------------
   617
   618 220B 78			 sei 
   619
   620 				; optimize OK (SYS), line = 63
   621
   622 220C A9 00			lda #$00
   623 220E 8D 0E D4			sta GLOBALS.NMIEN
   624 2211 A9 FE			lda #$FE
   625 2213 8D 01 D3			sta GLOBALS.PORTB
   626 2216 A9 CD			lda <NMI
   627 2218 8D FA FF			sta GLOBALS.NMIVEC
   628 221B A9 21			lda >NMI
   629 221D 8D FB FF			sta GLOBALS.NMIVEC+1
   630 2220 A9 C0			lda #$C0
   631 2222 8D 0E D4			sta GLOBALS.NMIEN
   632 2225			@exit
   633 					.ifdef @new
   634 					lda <@VarData
   635 					sta :ztmp
   636 					lda >@VarData
   637 					ldy #@VarDataSize-1
   638 					jmp @FreeMem
   639 					els
   640 2225 60				rts						; ret
   641 					eif
   642 				.endl
   643
   644 				; ------------------------------------------------------------
   645 				; ------------------------------------------------------------
   646 2226			@UnitInit
   647
   648 2226 60				rts
   649
   650 				; ------------------------------------------------------------
   651
   652 				.endl							; UNIT SYS
   653
   654 				; ------------------------------------------------------------
   655
   656 2227			.local	GR						; UNIT
   657
   658 2227			.local	MODE2						; PROCEDURE
   659
   660 				; optimize OK (GR), line = 17
   661
   662 2227 A9 00			lda #$00
   663 2229 8D 02 D4			sta GLOBALS.DLIST
   664 222C A9 11			lda #$11
   665 222E 8D 03 D4			sta GLOBALS.DLIST+1
   666 2231			@exit
   667 					.ifdef @new
   668 					lda <@VarData
   669 					sta :ztmp
   670 					lda >@VarData
   671 					ldy #@VarDataSize-1
   672 					jmp @FreeMem
   673 					els
   674 2231 60				rts						; ret
   675 					eif
   676 				.endl
   677
   678 				; ------------------------------------------------------------
   679 				; ------------------------------------------------------------
   680 2232			@UnitInit
   681
   682 2232 60				rts
   683
   684 				; ------------------------------------------------------------
   685
   686 				.endl							; UNIT GR
   687
   688 				; ------------------------------------------------------------
   689
   690 2233			.local	SPRITES						; UNIT
   691
   692 2233			.local	COPYSHIP					; PROCEDURE
   693
   694 				; optimize OK (SPRITES), line = 25
   695
   696 2233 A5 03			lda BSHIPYCLEAR
   697 2235 85 92			sta :bp2
   698 2237 A9 14			lda #$14
   699 2239 85 93			sta :bp2+1
   700 223B A0 00			ldy #$00
   701 223D 98				tya
   702 223E 91 92			sta (:bp2),y
   703 2240 C8				iny
   704 2241 91 92			sta (:bp2),y
   705 2243 A5 03			lda BSHIPYCLEAR
   706 2245 85 92			sta :bp2
   707 2247 A9 15			lda #$15
   708 2249 85 93			sta :bp2+1
   709 224B A0 00			ldy #$00
   710 224D 98				tya
   711 224E 91 92			sta (:bp2),y
   712 2250 C8				iny
   713 2251 91 92			sta (:bp2),y
   714
   715 				; optimize OK (SPRITES), line = 26
   716
   717 2253 A5 02			lda BSHIPY
   718 2255 85 8C			sta :ecx
   719 2257 A9 14			lda #$14
   720 2259 85 8D			sta :ecx+1
   721 225B A9 00			lda #$00
   722 225D 85 88			sta :edx
   723 225F A9 10			lda #$10
   724 2261 85 89			sta :edx+1
   725 2263 A9 08			lda #$08
   726 2265 85 84			sta :eax
   727 2267 A9 00			lda #$00
   728 2269 85 85			sta :eax+1
   729 226B 20 57 20			jsr @move
   730
   731 				; optimize OK (SPRITES), line = 27
   732
   733 226E A5 02			lda BSHIPY
   734 2270 85 8C			sta :ecx
   735 2272 A9 15			lda #$15
   736 2274 85 8D			sta :ecx+1
   737 2276 A9 08			lda #$08
   738 2278 85 88			sta :edx
   739 227A A9 10			lda #$10
   740 227C 85 89			sta :edx+1
   741 227E A9 08			lda #$08
   742 2280 85 84			sta :eax
   743 2282 A9 00			lda #$00
   744 2284 85 85			sta :eax+1
   745 2286 20 57 20			jsr @move
   746 2289			@exit
   747 					.ifdef @new
   748 					lda <@VarData
   749 					sta :ztmp
   750 					lda >@VarData
   751 					ldy #@VarDataSize-1
   752 					jmp @FreeMem
   753 					els
   754 2289 60				rts						; ret
   755 					eif
   756 				.endl
   757
   758 228A			.local	INIT						; PROCEDURE
   759
   760 				; optimize OK (SPRITES), line = 32
   761
   762 228A				.LOCAL
   763 228A A0 00			ldy #$00
   764 228C 98				tya
   765 228D 99 00 13 99 80 13 + fill	:10 sta $1300+#*$80,y
   766 22AB C8				iny
   767 22AC 10 DF			bpl fill
   768 					.ENDL
   769
   770 				; optimize OK (SPRITES), line = 33
   771
   772 22AE A0 70			ldy #256-$90
   773 22B0 A9 FF			lda #$FF
   774 22B2 99 B0 12 C8 D0 FA		sta:rne $1320+$90-256,y+
   775
   776 				; optimize OK (SPRITES), line = 35
   777
   778 22B8 A9 10			lda #$10
   779 22BA 8D 07 D4			sta GLOBALS.PMBASE
   780
   781 				; optimize OK (SPRITES), line = 36
   782
   783 22BD A9 0A			lda #$0A
   784 22BF 8D 15 D0			sta GLOBALS.COLPM3
   785 22C2 A9 0E			lda #$0E
   786 22C4 8D 12 D0			sta GLOBALS.COLPM01
   787 22C7 8D 13 D0			sta GLOBALS.COLPM01+1
   788
   789 				; optimize OK (SPRITES), line = 37
   790
   791 22CA A9 50			lda #$50
   792 22CC 85 02			sta BSHIPY
   793 22CE 85 03			sta BSHIPYCLEAR
   794
   795 				; optimize OK (SPRITES), line = 38
   796
   797 22D0 A9 30			lda #$30
   798 22D2 85 00			sta BHPOSP0
   799 22D4 A9 38			lda #$38
   800 22D6 85 01			sta BHPOSP1
   801 22D8 A5 00			lda WSHIPX
   802 22DA 8D 00 D0			sta GLOBALS.HPOSP01
   803 22DD A5 01			lda WSHIPX+1
   804 22DF 8D 01 D0			sta GLOBALS.HPOSP01+1
   805
   806 				; optimize OK (SPRITES), line = 39
   807
   808 22E2 A9 00			lda #$00
   809 22E4 8D 08 D0			sta GLOBALS.SIZEP01
   810 22E7 8D 09 D0			sta GLOBALS.SIZEP01+1
   811 22EA 8D 0C D0			sta GLOBALS.SIZEM
   812 22ED 8D 1B D0			sta GLOBALS.PRIOR
   813 22F0 A9 03			lda #$03
   814 22F2 8D 1D D0			sta GLOBALS.GRACTL
   815
   816 				; optimize FAIL ('COPYSHIP', SPRITES), line = 41
   817
   818 22F5 20 33 22			jsr COPYSHIP
   819 22F8			@exit
   820 					.ifdef @new
   821 					lda <@VarData
   822 					sta :ztmp
   823 					lda >@VarData
   824 					ldy #@VarDataSize-1
   825 					jmp @FreeMem
   826 					els
   827 22F8 60				rts						; ret
   828 					eif
   829 				.endl
   830
   831 				; ------------------------------------------------------------
   832 				; ------------------------------------------------------------
   833 22F9			@UnitInit
   834
   835 22F9 60				rts
   836
   837 				; ------------------------------------------------------------
   838
   839 = 0000			BHPOSP0	= $00
   840 = 0001			BHPOSP1	= $01
   841 = 0002			BSHIPY	= $02
   842 = 0003			BSHIPYCLEAR	= $03
   843 = 0000			WSHIPX	= $00
   844
   845 				.endl							; UNIT SPRITES
   846
   847 				; ------------------------------------------------------------
   848
   849 22FA			.local	JOY						; UNIT
   850
   851 22FA			.local	MOVESHIP					; PROCEDURE
   852
   853 				; optimize OK (JOY), line = 20
   854
   855 22FA A9 0C			lda #$0C
   856 22FC 85 FF			sta GLOBALS.BTMP1
   857
   858 				; optimize OK (JOY), line = 21
   859
   860 22FE A9 01			lda #$01
   861 2300 85 FD			sta GLOBALS.B1I
   862
   863 2302			l_0117
   864 				; --- ForToDoCondition
   865
   866 				; optimize OK (JOY), line = 22
   867
   868 2302 A5 04			lda JOYDIRECTION
   869 2304 25 FF			and GLOBALS.BTMP1
   870 2306 8D 43 25			sta @CASETMP_0003
   871 2309 C9 04			cmp #$04
   872 230B D0 20			jne l_0136
   873 230D			@
   874
   875 				; optimize OK (JOY), line = 24
   876
   877 230D A5 01			lda SPRITES.BHPOSP1
   878 230F C9 B0			cmp #$B0
   879 2311 B0 17			jcs l_0148
   880
   881 				; optimize OK (JOY), line = 25
   882
   883 2313 A5 00			lda SPRITES.WSHIPX
   884 2315 18 69 02			add #$02
   885 2318 85 00			sta SPRITES.WSHIPX
   886 231A A5 01			lda SPRITES.WSHIPX+1
   887 231C 69 02			adc #$02
   888 231E 85 01			sta SPRITES.WSHIPX+1
   889 2320 A5 00			lda SPRITES.WSHIPX
   890 2322 8D 00 D0			sta GLOBALS.HPOSP01
   891 2325 A5 01			lda SPRITES.WSHIPX+1
   892 2327 8D 01 D0			sta GLOBALS.HPOSP01+1
   893 232A			l_0148
   894
   895 232A 4C 81 23			jmp a_0003
   896 232D			l_0136
   897 232D C9 08			cmp #$08
   898 232F D0 20			jne l_015A
   899 2331			@
   900
   901 				; optimize OK (JOY), line = 29
   902
   903 2331 A5 00			lda SPRITES.BHPOSP0
   904 2333 C9 31			cmp #$31
   905 2335 90 17			jcc l_016C
   906
   907 				; optimize OK (JOY), line = 30
   908
   909 2337 A5 00			lda SPRITES.WSHIPX
   910 2339 38 E9 02			sub #$02
   911 233C 85 00			sta SPRITES.WSHIPX
   912 233E A5 01			lda SPRITES.WSHIPX+1
   913 2340 E9 02			sbc #$02
   914 2342 85 01			sta SPRITES.WSHIPX+1
   915 2344 A5 00			lda SPRITES.WSHIPX
   916 2346 8D 00 D0			sta GLOBALS.HPOSP01
   917 2349 A5 01			lda SPRITES.WSHIPX+1
   918 234B 8D 01 D0			sta GLOBALS.HPOSP01+1
   919 234E			l_016C
   920
   921 234E 4C 81 23			jmp a_0003
   922 2351			l_015A
   923 2351 C9 02			cmp #$02
   924 2353 D0 18			jne l_017E
   925 2355			@
   926
   927 				; optimize OK (JOY), line = 34
   928
   929 2355 A5 02			lda SPRITES.BSHIPY
   930 2357 C9 21			cmp #$21
   931 2359 90 0F			jcc l_0190
   932
   933 				; optimize OK (JOY), line = 35
   934
   935 235B 18 69 06			add #$06
   936 235E 85 03			sta SPRITES.BSHIPYCLEAR
   937 2360 A5 02			lda SPRITES.BSHIPY
   938 2362 38 E9 02			sub #$02
   939 2365 85 02			sta SPRITES.BSHIPY
   940
   941 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 36
   942
   943 2367 20 33 22			jsr SPRITES.COPYSHIP
   944 236A			l_0190
   945
   946 236A 4C 81 23			jmp a_0003
   947 236D			l_017E
   948 236D C9 01			cmp #$01
   949 236F D0 10			jne l_01A8
   950 2371			@
   951
   952 				; optimize OK (JOY), line = 40
   953
   954 2371 A5 02			lda SPRITES.BSHIPY
   955 2373 C9 A8			cmp #$A8
   956 2375 B0 0A			jcs l_01BA
   957
   958 				; optimize OK (JOY), line = 41
   959
   960 2377 85 03			sta SPRITES.BSHIPYCLEAR
   961 2379 18 69 02			add #$02
   962 237C 85 02			sta SPRITES.BSHIPY
   963
   964 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 42
   965
   966 237E 20 33 22			jsr SPRITES.COPYSHIP
   967 2381			l_01BA
   968
   969 2381			l_01A8
   970 2381			a_0003
   971
   972 				; optimize OK (JOY), line = 46
   973
   974 2381 A9 03			lda #$03
   975 2383 85 FF			sta GLOBALS.BTMP1
   976
   977 				; --- ForToDoEpilog
   978 2385 C6 FD			dec GLOBALS.B1I
   979 2387 30 03 4C 02 23		jpl l_0117
   980 238C			l_0125
   981
   982 				; ------------------------------------------------------------
   983
   984 = 0000			@FORTMP_0114	= $00
   985 = 2543			@CASETMP_0003	= DATAORIGIN+$000F
   986
   987 = 2543			@VarData	= @CASETMP_0003
   988 = 0001			@VarDataSize	= 1
   989
   990 238C			@exit
   991 					.ifdef @new
   992 					lda <@VarData
   993 					sta :ztmp
   994 					lda >@VarData
   995 					ldy #@VarDataSize-1
   996 					jmp @FreeMem
   997 					els
   998 238C 60				rts						; ret
   999 					eif
  1000 				.endl
  1001
  1002 				; ------------------------------------------------------------
  1003 				; ------------------------------------------------------------
  1004 238D			@UnitInit
  1005
  1006 238D 60				rts
  1007
  1008 				; ------------------------------------------------------------
  1009
  1010 = 0004			JOYDIRECTION	= $04
  1011
  1012 				.endl							; UNIT JOY
  1013
  1014 238E			.local	VBI						; PROCEDURE | INTERRUPT
  1015
  1016 				; ---------------------  ASM Block 055  ---------------------
  1017
  1018 238E 48 8A 48 98 48	 phr 
  1019
  1020 				; ---------------------  ASM Block 056  ---------------------
  1021
  1022 2393 68 A8 68 AA 68	 plr 
  1023 2398 40				rti						; ret
  1024 				.endl
  1025
  1026 2399			.local	JOYHANDLER					; PROCEDURE | INTERRUPT
  1027
  1028 				; ---------------------  ASM Block 057  ---------------------
  1029
  1030 2399 48 8A 48 98 48	 phr 
  1031
  1032 				; ---------------------  ASM Block 058  ---------------------
  1033
  1034 239E 8D 0A D4		 sta WSYNC 
  1035
  1036 				; optimize OK (main.pas), line = 34
  1037
  1038 23A1 A9 0F			lda #$0F
  1039 23A3 8D 1A D0			sta GLOBALS.COLBK
  1040
  1041 				; optimize OK (main.pas), line = 36
  1042
  1043 23A6 AD 00 D3			lda GLOBALS.PORTA
  1044 23A9 85 04			sta JOY.JOYDIRECTION
  1045
  1046 				; optimize OK (main.pas), line = 37
  1047
  1048 23AB 29 0F			and #$0F
  1049 23AD C9 0F			cmp #$0F
  1050 23AF F0 03			jeq l_01FE
  1051 23B1 20 FA 22			jsr JOY.MOVESHIP
  1052 23B4			l_01FE
  1053
  1054 				; optimize OK (main.pas), line = 39
  1055
  1056 23B4 A9 00			lda #$00
  1057 23B6 8D 1A D0			sta GLOBALS.COLBK
  1058
  1059 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 41
  1060
  1061 23B9 E8				inx
  1062 23BA AD 46 25 95 98		mva PSTARS :STACKORIGIN,x
  1063 23BF AD 47 25 95 A8		mva PSTARS+1 :STACKORIGIN+STACKWIDTH,x
  1064 23C4 20 F3 21			jsr SYS.SETDLI
  1065
  1066 				; ---------------------  ASM Block 059  ---------------------
  1067
  1068 23C7 68 A8 68 AA 68	 plr 
  1069 23CC 40				rti						; ret
  1070 				.endl
  1071
  1072 23CD			.local	STARS						; PROCEDURE | INTERRUPT
  1073
  1074 				; ---------------------  ASM Block 060  ---------------------
  1075
  1076 23CD 48 8A 48 98 48	 phr 
  1077
  1078 				; optimize OK (main.pas), line = 50
  1079
  1080 23D2 A9 7C			lda #$7C
  1081 23D4 85 FD			sta GLOBALS.B1I
  1082
  1083 23D6			l_0216
  1084 				; --- ForToDoCondition
  1085
  1086 				; ---------------------  ASM Block 061  ---------------------
  1087
  1088 23D6 8D 0A D4		 sta WSYNC 
  1089
  1090 				; optimize OK (main.pas), line = 52
  1091
  1092 23D9 A4 FD			ldy GLOBALS.B1I
  1093 23DB B9 00 12			lda adr.ASTARS,y
  1094 23DE 8D 07 D0			sta GLOBALS.HPOSM3
  1095
  1096 				; optimize OK (main.pas), line = 53
  1097
  1098 23E1 B9 00 12			lda adr.ASTARS,y
  1099 23E4 38 F9 7D 12			sub adr.ASPEED,y
  1100 23E8 99 00 12			sta adr.ASTARS,y
  1101
  1102 				; optimize OK (main.pas), line = 54
  1103
  1104 23EB AD 0A D2			lda SYSTEM.RND
  1105 23EE 8D 15 D0			sta GLOBALS.COLPM3
  1106
  1107 				; --- ForToDoEpilog
  1108 23F1 C6 FD			dec GLOBALS.B1I
  1109 23F3 10 E1			jpl l_0216
  1110 23F5			l_0224
  1111
  1112 				; ---------------------  ASM Block 062  ---------------------
  1113
  1114 23F5 8D 0A D4		 sta WSYNC 
  1115
  1116 				; optimize OK (main.pas), line = 60
  1117
  1118 23F8 A9 0F			lda #$0F
  1119 23FA 8D 1A D0			sta GLOBALS.COLBK
  1120
  1121 				; optimize OK (main.pas), line = 63
  1122
  1123 23FD A5 14			lda GLOBALS.RTCLOK
  1124 23FF 29 01			and #$01
  1125 2401 D0 25			jne l_025B
  1126
  1127 				; optimize OK (main.pas), line = 64
  1128
  1129 2403 AD 04 11			lda GLOBALS.DL2LMS
  1130 2406 18 69 03			add #$03
  1131 2409 85 A1			sta :STACKORIGIN+9
  1132 240B AD 05 11			lda GLOBALS.DL2LMS+1
  1133 240E 69 00			adc #$00
  1134 2410 85 B1			sta :STACKORIGIN+STACKWIDTH+9
  1135 2412 AD 0A D2			lda SYSTEM.RND
  1136 2415 29 0F			and #$0F
  1137 2417 20 F4 20			jsr @mul40
  1138 241A 18 65 A1			add :STACKORIGIN+9
  1139 241D A8				tay
  1140 241E A5 B1			lda :STACKORIGIN+STACKWIDTH+9
  1141 2420 65 85			adc :eax+1
  1142 2422 85 91			sta :bp+1
  1143 2424 A9 80			lda #$80
  1144 2426 91 90			sta (:bp),y
  1145 2428			l_025B
  1146
  1147 				; optimize OK (main.pas), line = 67
  1148
  1149 2428 AD 05 11			lda GLOBALS.DL2LMS+1
  1150 242B C9 E0			cmp #$E0
  1151 242D 90 17			jcc l_0285
  1152 242F D0 07			bne @+
  1153 2431 AD 04 11			lda GLOBALS.DL2LMS
  1154 2434 C9 01			cmp #$01
  1155 2436 90 0E			jcc l_0285
  1156 2438			@
  1157 2438 AD 04 11 D0 03 CE + 	dew GLOBALS.DL2LMS
  1158 2443 4C 50 24			jmp l_0293
  1159 2446			l_0285
  1160 2446 A9 3F			lda #$3F
  1161 2448 8D 04 11			sta GLOBALS.DL2LMS
  1162 244B A9 EC			lda #$EC
  1163 244D 8D 05 11			sta GLOBALS.DL2LMS+1
  1164 2450			l_0293
  1165
  1166 				; optimize OK (main.pas), line = 69
  1167
  1168 2450 AD 04 11			lda GLOBALS.DL2LMS
  1169 2453 85 FA			sta GLOBALS.WTMP1
  1170 2455 AD 05 11			lda GLOBALS.DL2LMS+1
  1171 2458 85 FB			sta GLOBALS.WTMP1+1
  1172
  1173 				; ---------------------  ASM Block 063  ---------------------
  1174
  1175
  1176 245A A2 15		    ldx #21
  1177 245C A0 00		    ldy #0
  1178 245E			  clear_loop:
  1179 245E 98			    tya
  1180 245F 91 FA		    sta (GLOBALS.WTMP1),y
  1181 2461 A5 FA		    lda GLOBALS.WTMP1
  1182 2463 18 69 28		    add #40
  1183 2466 85 FA		    sta GLOBALS.WTMP1
  1184 2468 90 02		    bcc inc_row
  1185 246A E6 FB		    inc GLOBALS.WTMP1+1
  1186 246C			  inc_row:
  1187 246C CA			    dex
  1188 246D 10 EF		    bpl clear_loop
  1189 				  
  1190
  1191 				; optimize OK (main.pas), line = 87
  1192
  1193 246F A9 00			lda #$00
  1194 2471 8D 1A D0			sta GLOBALS.COLBK
  1195
  1196 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 91
  1197
  1198 2474 E8				inx
  1199 2475 AD 44 25 95 98		mva PJOY :STACKORIGIN,x
  1200 247A AD 45 25 95 A8		mva PJOY+1 :STACKORIGIN+STACKWIDTH,x
  1201 247F 20 F3 21			jsr SYS.SETDLI
  1202
  1203 				; ---------------------  ASM Block 064  ---------------------
  1204
  1205 2482 68 A8 68 AA 68	 plr 
  1206
  1207 				; ------------------------------------------------------------
  1208
  1209 = 0000			@FORTMP_0213	= $00
  1210 2487 40				rti						; ret
  1211 				.endl
  1212
  1213 2488			.local	INIT						; PROCEDURE
  1214
  1215 				; optimize FAIL ('SYSTEM.PAUSE_0078', main.pas), line = 98
  1216
  1217 2488 20 C2 21			jsr SYSTEM.PAUSE_0078
  1218 248B A9 00			lda #$00
  1219 248D 8D 00 D4			sta GLOBALS.DMACTL
  1220 2490 20 0B 22			jsr SYS.SYSTEMOFF
  1221
  1222 				; optimize OK (main.pas), line = 100
  1223
  1224 2493 A9 3F			lda #$3F
  1225 2495 85 88			sta :edx
  1226 2497 A9 EC			lda #$EC
  1227 2499 85 89			sta :edx+1
  1228 249B A9 C0			lda #$C0
  1229 249D 85 8C			sta :ecx
  1230 249F A9 03			lda #$03
  1231 24A1 85 8D			sta :ecx+1
  1232 24A3 A9 00			lda #$00
  1233 24A5 85 84			sta :eax
  1234 24A7 20 AC 20			jsr @fill
  1235
  1236 				; optimize OK (main.pas), line = 102
  1237
  1238 24AA A9 7C			lda #$7C
  1239 24AC 85 FD			sta GLOBALS.B1I
  1240
  1241 24AE			l_02BA
  1242 				; --- ForToDoCondition
  1243
  1244 				; optimize OK (main.pas), line = 103
  1245
  1246 24AE A4 FD			ldy GLOBALS.B1I
  1247 24B0 AD 0A D2			lda SYSTEM.RND
  1248 24B3 99 00 12			sta adr.ASTARS,y
  1249
  1250 				; optimize OK (main.pas), line = 104
  1251
  1252 24B6 29 03			and #$03
  1253 24B8 18 69 01			add #$01
  1254 24BB 99 7D 12			sta adr.ASPEED,y
  1255
  1256 				; --- ForToDoEpilog
  1257 24BE C6 FD			dec GLOBALS.B1I
  1258 24C0 10 EC			jpl l_02BA
  1259 24C2			l_02C8
  1260
  1261 				; optimize FAIL ('SPRITES.INIT', main.pas), line = 107
  1262
  1263 24C2 20 8A 22			jsr SPRITES.INIT
  1264
  1265 				; optimize FAIL ('GR.MODE2', main.pas), line = 108
  1266
  1267 24C5 20 27 22			jsr GR.MODE2
  1268 24C8 A9 00			lda #$00
  1269 24CA 8D 1A D0			sta GLOBALS.COLBK
  1270 24CD A9 02			lda #$02
  1271 24CF 8D 18 D0			sta GLOBALS.COLPF2
  1272
  1273 				; optimize OK (main.pas), line = 109
  1274
  1275 24D2 AD 02 D3			lda GLOBALS.PACTL
  1276 24D5 09 04			ora #$04
  1277 24D7 8D 02 D3			sta GLOBALS.PACTL
  1278
  1279 				; optimize OK (main.pas), line = 110
  1280
  1281 24DA A9 99			lda <JOYHANDLER
  1282 24DC 8D 44 25			sta PJOY
  1283 24DF A9 23			lda >JOYHANDLER
  1284 24E1 8D 45 25			sta PJOY+1
  1285 24E4 A9 CD			lda <STARS
  1286 24E6 8D 46 25			sta PSTARS
  1287 24E9 A9 23			lda >STARS
  1288 24EB 8D 47 25			sta PSTARS+1
  1289
  1290 				; optimize FAIL ('SYS.SETVBI', main.pas), line = 112
  1291
  1292 24EE E8				inx
  1293 24EF A9 8E 95 98			mva <VBI :STACKORIGIN,x
  1294 24F3 A9 23 95 A8			mva >VBI :STACKORIGIN+STACKWIDTH,x
  1295 24F7 20 DB 21			jsr SYS.SETVBI
  1296
  1297 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 113
  1298
  1299 24FA E8				inx
  1300 24FB A9 99 95 98			mva <JOYHANDLER :STACKORIGIN,x
  1301 24FF A9 23 95 A8			mva >JOYHANDLER :STACKORIGIN+STACKWIDTH,x
  1302 2503 20 F3 21			jsr SYS.SETDLI
  1303
  1304 				; optimize FAIL ('SYSTEM.PAUSE_0078', main.pas), line = 115
  1305
  1306 2506 20 C2 21			jsr SYSTEM.PAUSE_0078
  1307 2509 A9 3E			lda #$3E
  1308 250B 8D 00 D4			sta GLOBALS.DMACTL
  1309
  1310 				; ------------------------------------------------------------
  1311
  1312 = 0000			@FORTMP_02B7	= $00
  1313 250E			@exit
  1314 					.ifdef @new
  1315 					lda <@VarData
  1316 					sta :ztmp
  1317 					lda >@VarData
  1318 					ldy #@VarDataSize-1
  1319 					jmp @FreeMem
  1320 					els
  1321 250E 60				rts						; ret
  1322 					eif
  1323 				.endl
  1324 250F			l_0007
  1325
  1326 				; optimize FAIL ('INIT', main.pas), line = 119
  1327
  1328 250F 20 88 24			jsr INIT
  1329
  1330 				; --- RepeatUntilProlog
  1331 2512			l_030B
  1332
  1333 				; optimize OK (main.pas), line = 120
  1334
  1335 2512 4C 12 25			jmp l_030B
  1336
  1337 				; ------------------------------------------------------------
  1338
  1339 = 2000			adr.CLEARSCRCOL	= CODEORIGIN+$0000
  1340 2515			.var CLEARSCRCOL	= adr.CLEARSCRCOL .word
  1341 = 1200			adr.ASTARS	= $1200
  1342 2515			.var ASTARS	= adr.ASTARS .word
  1343 = 127D			adr.ASPEED	= $127D
  1344 2515			.var ASPEED	= adr.ASPEED .word
  1345 = 2544			PJOY	= DATAORIGIN+$0010
  1346 = 2546			PSTARS	= DATAORIGIN+$0012
  1347 2515			@exit
  1348
  1349 2515 A2 00		@halt	ldx #$00
  1350 2517 9A				txs
  1351 					.ifdef MAIN.@DEFINES.ROMOFF
  1352 					inc portb
  1353 					.endif
  1354
  1355 2518 A0 01			ldy #$01
  1356
  1357 251A 60				rts
  1358
  1359 				; ------------------------------------------------------------
  1360
  1361 251B 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1362
  1363 				; ------------------------------------------------------------
  1364
  1365 252B			.local	@DEFINES
  1366 252B			ATARI
  1367 				.endl
  1368
  1369 252B			.local	@RESOURCE
  1370 				.endl
  1371
  1372 = 252B 00 20		CLEARSCRCOL
  1372 = 252D 00 12		ASTARS
  1372 = 252F 7D 12		ASPEED
  1372 				.endl							; MAIN
  1373
  1374 				; ------------------------------------------------------------
  1375 				; ------------------------------------------------------------
  1376
  1377 				.macro	UNITINITIALIZATION
  1378 				
  1379 					.ifdef MAIN.SYSTEM.@UnitInit
  1380 					jsr MAIN.SYSTEM.@UnitInit
  1381 					eif
  1382 				
  1383 					.ifdef MAIN.GLOBALS.@UnitInit
  1384 					jsr MAIN.GLOBALS.@UnitInit
  1385 					eif
  1386 				
  1387 					.ifdef MAIN.SYS.@UnitInit
  1388 					jsr MAIN.SYS.@UnitInit
  1389 					eif
  1390 				
  1391 					.ifdef MAIN.GR.@UnitInit
  1392 					jsr MAIN.GR.@UnitInit
  1393 					eif
  1394 				
  1395 					.ifdef MAIN.SPRITES.@UnitInit
  1396 					jsr MAIN.SPRITES.@UnitInit
  1397 					eif
  1398 				
  1399 					.ifdef MAIN.JOY.@UnitInit
  1400 					jsr MAIN.JOY.@UnitInit
  1401 					eif
  1402 				.endm
  1403
  1404 				; ------------------------------------------------------------
  1405
  1406 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1407 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1407 				SYSTEM: $2155..$21CC
  1408 					eif
  1409
  1410 					ift .SIZEOF(MAIN.GLOBALS) > 0
  1411 					.print 'GLOBALS: ',MAIN.GLOBALS,'..',MAIN.GLOBALS+.SIZEOF(MAIN.GLOBALS)-1
  1412 					eif
  1413
  1414 					ift .SIZEOF(MAIN.SYS) > 0
  1415 					.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
  1415 				SYS: $21CD..$2226
  1416 					eif
  1417
  1418 					ift .SIZEOF(MAIN.GR) > 0
  1419 					.print 'GR: ',MAIN.GR,'..',MAIN.GR+.SIZEOF(MAIN.GR)-1
  1419 				GR: $2227..$2232
  1420 					eif
  1421
  1422 					ift .SIZEOF(MAIN.SPRITES) > 0
  1423 					.print 'SPRITES: ',MAIN.SPRITES,'..',MAIN.SPRITES+.SIZEOF(MAIN.SPRITES)-1
  1423 				SPRITES: $2233..$22F9
  1424 					eif
  1425
  1426 					ift .SIZEOF(MAIN.JOY) > 0
  1427 					.print 'JOY: ',MAIN.JOY,'..',MAIN.JOY+.SIZEOF(MAIN.JOY)-1
  1427 				JOY: $22FA..$238D
  1428 					eif
  1429
  1430 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1430 				CODE: $2000..$252A
  1431
  1432 				; ------------------------------------------------------------
  1433
  1434 2531				.align $04
  1435
  1436 2534			DATAORIGIN
  1437 2534-2539> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  1438
  1439 = 0006			VARINITSIZE	= *-DATAORIGIN
  1440 = 0014			VARDATASIZE	= 20
  1441
  1442 = 2548			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1443
  1444 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1444 				DATA: $2534..$2548
  1445
  1446 02E0-02E1> 19 21			run START
  1447
  1448 				; ------------------------------------------------------------
  1449
  1450 				.macro	STATICDATA
  1451 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  1452 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03
  1453 				.endm
  1454
  1455 					end
