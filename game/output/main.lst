mads 2.1.1
  1133 					opt l+
    98 = 0000				?EXTDETECT = 0
    99 = 0000				?VBXDETECT = 0
   100
   101 2075				RCASM 'res/gr_dl.asm' GLOBALS.DL_2 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 001A			len = .sizeof(_GLOBALS.DL_2)
     6 				mcpy	ift main.GLOBALS.DL_2+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 11 +  MWA #MAIN.GLOBALS.DL_2 ECX
    13 2088 A9 1A 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: const.inc
     1 = 1000			PM_ADR              = $1000;                      // players & missiles memory (2K) start address
     2 = 1300			M0_ADR              = PM_ADR + $300;              // missile 0 start memory address
     3 = 1400			P0_ADR              = PM_ADR + $400;              // player 0 start memory address
     4 = 1500			P1_ADR              = PM_ADR + $500;              // player 1 start memory address
     5 = 1000			GFX_SHIP_ADR        = $1000;                      // ship gfx memory start address, ship size = 20 bytes, 16 bytes for gfx and 4 bytes fo top/bottom empty rows
     6 = 0008			GFX_SHIP_SEG        = 8;                          // ship gfx 10 byte segment, 10B for P0 & 10B for P1
     8 = 0E0E			SHIP_COL            = $0e0e;
     9 = 0030			SHIP_LEFT_LIMIT     = 48;
    10 = 00B0			SHIP_RIGHT_LIMIT    = SHIP_LEFT_LIMIT + (16 * 8);
    11 = 0020			SHIP_TOP_LIMIT      = 32;
    12 = 00A8			SHIP_BOTTOM_LIMIT   = 8 * 21;
    13 = 0202			SHIP_X_STEP         = $0202;
    15 = 0008			JOY_LEFT            = %1000;
    16 = 0004			JOY_RIGHT           = %0100;
    17 = 0002			JOY_UP              = %0010;
    18 = 0001			JOY_DOWN            = %0001;
    20 = 1100			DL_2                = $1100;                      // display list memory start address for ANTIC mode 2
    21 = EC3F			GAME_LMS            = $efff - $3c0;               // Load Memory Scan address
    22 = E000			GAME_LMS_EMD        = $e000;
     3 1100			dl2
     4 1100 F0 70 F0		    .byte $f0,$70,$f0
     5 1103 42 3F EC		    .byte $42,a(GAME_LMS)
     6 1106 02 02 02 02 02 02 + :17 .byte 2
     7 1117 41 00 11		    .byte $41,a(dl2)
    23 					.print '$R RCASM   ',main.GLOBALS.DL_2,'..',main.GLOBALS.DL_2+len-1," 'res/gr_dl.asm'"
    23 				$R RCASM   $1100..$1119 'res/gr_dl.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: main.a65
   102 20B0				RCDATA 'res/gfx_ship.bin' GLOBALS.GFX_SHIP_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0010			len = .filesize('res/gfx_ship.bin')
    28 20B0				org main.GLOBALS.GFX_SHIP_ADR
    30 1000-100F> 70 7B 1E 3F + 	ins 'res/gfx_ship.bin'
    32 					.print '$R RCDATA  ',main.GLOBALS.GFX_SHIP_ADR,'..',*-1," 'res/gfx_ship.bin'"
    32 				$R RCDATA  $1000..$100F 'res/gfx_ship.bin'
Source: main.a65
   103 				.endl
   104
   105 				; ------------------------------------------------------------
   106
   107 1010				org CODEORIGIN
   108
   109 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
     1 2000-2551> 00 00 28 00 + .by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
     2 2018 E0 01 08 02 30 02 + .by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03
Source: main.a65
   110
   111 				; ------------------------------------------------------------
   112
   113 202C			RTLIB
   114 202C				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
   166 					opt l+
   115
   116 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   116 				ZPAGE: $0080..$00D7
   117
   118 				.print 'RTLIB: ',RTLIB,'..',*-1
   118 				RTLIB: $202C..$2118
   119
   120 				; ------------------------------------------------------------
   121
   122 2119			START
   123 2119 BA				tsx
   124 211A 8E 37 25			stx MAIN.@halt+1
   125
   126 					.ifdef fmulinit
   127 					fmulinit
   128 					eif
   129
   130 = 000E			VLEN	= VARDATASIZE-VARINITSIZE
   131 = 255A			VADR	= DATAORIGIN+VARINITSIZE
   132
   133 					ift VADR > $BFFF
   134 					ert 'Invalid memory address range ',VADR
   135 					eli (VLEN>0) && (VLEN<=256)
   136 211D A2 F2			ldx #256-VLEN
   137 211F A9 00			lda #$00
   138 2121 9D 68 24 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   139 					eli VLEN>0
   140 					@fill #VADR #VLEN #$00
   141 					eif
   142
   143 2127 A9 68 85 82 A9 25 + 	mwa #PROGRAMSTACK psptr
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 					icl 'atari\romoff.asm'
   147 					.endif
   148
   149 212F A2 0F			ldx #$0F					; DOS II+/D ParamStr
   150 2131 BD 40 03 9D 3C 25 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   151
   152 213A E8				inx						; X = 0
   153 213B 86 90			stx bp						; BP = 0
   154
   155 213D 8E 08 D2			stx audctl					; reset POKEY
   156 2140 A9 03			lda #3
   157 2142 8D 0F D2			sta skctl
   158
   159 2145 CA				dex						; X = 255
   160
   161 2146				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
    11 2146 20 26 22			jsr MAIN.SYS.@UnitInit
    15 2149 20 32 22			jsr MAIN.GR.@UnitInit
    19 214C 20 F9 22			jsr MAIN.SPRITES.@UnitInit
    23 214F 20 8D 23			jsr MAIN.JOY.@UnitInit
   162
   163 2152			.local	MAIN						; PROCEDURE
   164
   165 2152 4C 30 25			jmp l_0007
   166
   167 				; ------------------------------------------------------------
   168
   169 2155			.local	SYSTEM						; UNIT
   170
   171 2155			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   172
   173 				; ------------------------------------------------------------
   174
   175 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   176 				; as Pointer
   177 2155 B5 98			lda :STACKORIGIN,x
   178 2157 85 8C			sta VALUE
   179 2159 CA				dex
   180
   181 				; ------------------------------------------------------------
   182
   183 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   184 				; as Pointer
   185 215A B5 98			lda :STACKORIGIN,x
   186 215C 85 88			sta A
   187 215E B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   188 2160 85 89			sta A+1
   189 2162 CA				dex
   190
   191 				; ---------------------  ASM Block 021  ---------------------
   192
   193 2163 A0 00			ldy #0
   194 2165 A5 8C 91 88			mva value (edx),y
   195
   196
   197 				; ------------------------------------------------------------
   198
   199 = 0088			A	= edx
   200 = 008C			VALUE	= ecx
   201 2169			@exit
   202 					.ifdef @new
   203 					lda <@VarData
   204 					sta :ztmp
   205 					lda >@VarData
   206 					ldy #@VarDataSize-1
   207 					jmp @FreeMem
   208 					els
   209 2169 60				rts						; ret
   210 					eif
   211 				.endl
   212
   213 216A			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   214
   215 				; ------------------------------------------------------------
   216
   217 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   218 				; as Pointer
   219 216A B5 98			lda :STACKORIGIN,x
   220 216C 85 8C			sta VALUE
   221 216E B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   222 2170 85 8D			sta VALUE+1
   223 2172 CA				dex
   224
   225 				; ------------------------------------------------------------
   226
   227 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   228 				; as Pointer
   229 2173 B5 98			lda :STACKORIGIN,x
   230 2175 85 88			sta A
   231 2177 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   232 2179 85 89			sta A+1
   233 217B CA				dex
   234
   235 				; ---------------------  ASM Block 022  ---------------------
   236
   237 217C A0 00			ldy #0
   238 217E A5 8C 91 88			mva value (edx),y
   239 2182 C8				iny
   240 2183 A5 8D 91 88			mva value+1 (edx),y
   241
   242
   243 				; ------------------------------------------------------------
   244
   245 = 0088			A	= edx
   246 = 008C			VALUE	= ecx
   247 2187			@exit
   248 					.ifdef @new
   249 					lda <@VarData
   250 					sta :ztmp
   251 					lda >@VarData
   252 					ldy #@VarDataSize-1
   253 					jmp @FreeMem
   254 					els
   255 2187 60				rts						; ret
   256 					eif
   257 				.endl
   258
   259 2188			.local	FILLBYTE_0050					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   260
   261 				; ------------------------------------------------------------
   262
   263 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   264 				; as Pointer
   265 2188 B5 98			lda :STACKORIGIN,x
   266 218A 85 84			sta VALUE
   267 218C CA				dex
   268
   269 				; ------------------------------------------------------------
   270
   271 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   272 				; as Pointer
   273 218D B5 98			lda :STACKORIGIN,x
   274 218F 85 8C			sta COUNT
   275 2191 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   276 2193 85 8D			sta COUNT+1
   277 2195 CA				dex
   278
   279 				; ------------------------------------------------------------
   280
   281 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   282 				; as Pointer
   283 2196 B5 98			lda :STACKORIGIN,x
   284 2198 85 88			sta A
   285 219A B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   286 219C 85 89			sta A+1
   287 219E CA				dex
   288
   289 				; ---------------------  ASM Block 029  ---------------------
   290
   291 219F 20 AC 20			jsr @fill
   292
   293
   294 				; ------------------------------------------------------------
   295
   296 = 0088			A	= edx
   297 = 008C			COUNT	= ecx
   298 = 0084			VALUE	= eax
   299 21A2			@exit
   300 					.ifdef @new
   301 					lda <@VarData
   302 					sta :ztmp
   303 					lda >@VarData
   304 					ldy #@VarDataSize-1
   305 					jmp @FreeMem
   306 					els
   307 21A2 60				rts						; ret
   308 					eif
   309 				.endl
   310
   311 21A3			.local	MOVE_005A					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   312
   313 				; ------------------------------------------------------------
   314
   315 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   316 				; as Pointer
   317 21A3 B5 98			lda :STACKORIGIN,x
   318 21A5 85 84			sta COUNT
   319 21A7 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   320 21A9 85 85			sta COUNT+1
   321 21AB CA				dex
   322
   323 				; ------------------------------------------------------------
   324
   325 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   326 				; as Pointer
   327 21AC B5 98			lda :STACKORIGIN,x
   328 21AE 85 8C			sta DEST
   329 21B0 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   330 21B2 85 8D			sta DEST+1
   331 21B4 CA				dex
   332
   333 				; ------------------------------------------------------------
   334
   335 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   336 				; as Pointer
   337 21B5 B5 98			lda :STACKORIGIN,x
   338 21B7 85 88			sta SOURCE
   339 21B9 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   340 21BB 85 89			sta SOURCE+1
   341 21BD CA				dex
   342
   343 				; ---------------------  ASM Block 031  ---------------------
   344
   345 21BE 20 57 20			jsr @move
   346
   347
   348 				; ------------------------------------------------------------
   349
   350 = 0088			SOURCE	= edx
   351 = 008C			DEST	= ecx
   352 = 0084			COUNT	= eax
   353 21C1			@exit
   354 					.ifdef @new
   355 					lda <@VarData
   356 					sta :ztmp
   357 					lda >@VarData
   358 					ldy #@VarDataSize-1
   359 					jmp @FreeMem
   360 					els
   361 21C1 60				rts						; ret
   362 					eif
   363 				.endl
   364
   365 21C2			.local	PAUSE_0078					; PROCEDURE | ASSEMBLER | OVERLOAD
   366
   367 				; ---------------------  ASM Block 039  ---------------------
   368
   369 21C2 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   370
   371 21C8			@exit
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					els
   379 21C8 60				rts						; ret
   380 					eif
   381 				.endl
   382
   383 				; ------------------------------------------------------------
   384
   385 = 0101			__PORTB_BANKS	= $0101
   386 = 0648			M_PI_2	= $0648
   387 = 0192			D_PI_2	= $0192
   388 = 0004			D_PI_180	= $04
   389 = 0000			MGTIA	= $00
   390 = 0080			MVBXE	= $80
   391 = 0000			VBXE_XDLADR	= $00
   392 = 0100			VBXE_BCBADR	= $0100
   393 = 1000			VBXE_MAPADR	= $1000
   394 = 5000			VBXE_OVRADR	= $5000
   395 = B000			VBXE_WINDOW	= $B000
   396 = 0000			IDLI	= $00
   397 = 0001			IVBL	= $01
   398 = 00FE			CH_DELCHR	= $FE
   399 = 009B			CH_ENTER	= $9B
   400 = 001B			CH_ESC	= $1B
   401 = 001C			CH_CURS_UP	= $1C
   402 = 001D			CH_CURS_DOWN	= $1D
   403 = 001E			CH_CURS_LEFT	= $1E
   404 = 001F			CH_CURS_RIGHT	= $1F
   405 = 007F			CH_TAB	= $7F
   406 = 009B			CH_EOL	= $9B
   407 = 007D			CH_CLR	= $7D
   408 = 00FD			CH_BELL	= $FD
   409 = 007E			CH_DEL	= $7E
   410 = 009C			CH_DELLINE	= $9C
   411 = 009D			CH_INSLINE	= $9D
   412 = 0000			COLOR_BLACK	= $00
   413 = 000E			COLOR_WHITE	= $0E
   414 = 0032			COLOR_RED	= $32
   415 = 0096			COLOR_CYAN	= $96
   416 = 0068			COLOR_VIOLET	= $68
   417 = 00C4			COLOR_GREEN	= $C4
   418 = 0074			COLOR_BLUE	= $74
   419 = 00EE			COLOR_YELLOW	= $EE
   420 = 0028			COLOR_ORANGE	= $28
   421 = 00E4			COLOR_BROWN	= $E4
   422 = 003C			COLOR_LIGHTRED	= $3C
   423 = 0004			COLOR_GRAY1	= $04
   424 = 0006			COLOR_GRAY2	= $06
   425 = 000A			COLOR_GRAY3	= $0A
   426 = 00CC			COLOR_LIGHTGREEN	= $CC
   427 = 007C			COLOR_LIGHTBLUE	= $7C
   428 = 0004			FMOPENREAD	= $04
   429 = 0008			FMOPENWRITE	= $08
   430 = 0009			FMOPENAPPEND	= $09
   431 = 000C			FMOPENREADWRITE	= $0C
   432 = 2554			SCREENWIDTH	= DATAORIGIN+$0000
   433 = 2556			SCREENHEIGHT	= DATAORIGIN+$0002
   434 = 2558			DATESEPARATOR	= DATAORIGIN+$0004
   435 = D014			TVSYSTEM	= $D014
   436 = D20A			RND	= $D20A
   437 = 02C0			adr.PALETTE	= $02C0
   438 21C9			.var PALETTE	= adr.PALETTE .word
   439 = D012			adr.HPALETTE	= $D012
   440 21C9			.var HPALETTE	= adr.HPALETTE .word
   441 = 2559			FILEMODE	= DATAORIGIN+$0005
   442 = 255A			GRAPHMODE	= DATAORIGIN+$0006
   443 = 255B			IORESULT	= DATAORIGIN+$0007
   444 = 255C			EOLN	= DATAORIGIN+$0008
   445 = 255D			RNDSEED	= DATAORIGIN+$0009
   446
   447 = 21C9 C0 02		PALETTE
   447 = 21CB 12 D0		HPALETTE
   447 				.endl							; UNIT SYSTEM
   448
   449 				; ------------------------------------------------------------
   450
   451 21CD			.local	GLOBALS						; UNIT
   452
   453 				; ------------------------------------------------------------
   454
   455 = 1000			PM_ADR	= $1000
   456 = 1300			M0_ADR	= $1300
   457 = 1400			P0_ADR	= $1400
   458 = 1500			P1_ADR	= $1500
   459 = 1000			GFX_SHIP_ADR	= $1000
   460 = 0008			GFX_SHIP_SEG	= $08
   461 = 0E0E			SHIP_COL	= $0E0E
   462 = 0030			SHIP_LEFT_LIMIT	= $30
   463 = 00B0			SHIP_RIGHT_LIMIT	= $B0
   464 = 0020			SHIP_TOP_LIMIT	= $20
   465 = 00A8			SHIP_BOTTOM_LIMIT	= $A8
   466 = 0202			SHIP_X_STEP	= $0202
   467 = 0008			JOY_LEFT	= $08
   468 = 0004			JOY_RIGHT	= $04
   469 = 0002			JOY_UP	= $02
   470 = 0001			JOY_DOWN	= $01
   471 = 1100			DL_2	= $1100
   472 = EC3F			GAME_LMS	= $EC3F
   473 = E000			GAME_LMS_EMD	= $E000
   474 = 0014			RTCLOK	= $14
   475 = D000			HPOSP0	= $D000
   476 = D001			HPOSP1	= $D001
   477 = D004			HPOSM0	= $D004
   478 = D005			HPOSM1	= $D005
   479 = D006			HPOSM2	= $D006
   480 = D007			HPOSM3	= $D007
   481 = D008			SIZEP0	= $D008
   482 = D009			SIZEP1	= $D009
   483 = D00A			SIZEP2	= $D00A
   484 = D00B			SIZEP3	= $D00B
   485 = D00C			SIZEM	= $D00C
   486 = D011			GRAFM	= $D011
   487 = D012			COLPM0	= $D012
   488 = D013			COLPM1	= $D013
   489 = D014			COLPM2	= $D014
   490 = D015			COLPM3	= $D015
   491 = D017			COLPF1	= $D017
   492 = D018			COLPF2	= $D018
   493 = D01A			COLBK	= $D01A
   494 = D01B			PRIOR	= $D01B
   495 = D01D			GRACTL	= $D01D
   496 = D20A			RND	= $D20A
   497 = D300			PORTA	= $D300
   498 = D301			PORTB	= $D301
   499 = D302			PACTL	= $D302
   500 = D400			DMACTL	= $D400
   501 = D402			DLIST	= $D402
   502 = D407			PMBASE	= $D407
   503 = D40A			WSYNC	= $D40A
   504 = D40B			VCOUNT	= $D40B
   505 = D40E			NMIEN	= $D40E
   506 = FFFA			NMIVEC	= $FFFA
   507 = D000			HPOSP01	= $D000
   508 = D008			SIZEP01	= $D008
   509 = D012			COLPM01	= $D012
   510 = 1104			DL2LMS	= $1104
   511 = 00FF			BMASK1	= $FF
   512 = 00FE			BMASK2	= $FE
   513 = 00FD			B1I	= $FD
   514 = 00FC			B2I	= $FC
   515
   516 				.endl							; UNIT GLOBALS
   517
   518 				; ------------------------------------------------------------
   519
   520 21CD			.local	SYS						; UNIT
   521
   522 21CD			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
   523
   524 				; ---------------------  ASM Block 049  ---------------------
   525
   526
   527 				      bit NMIST \ bpl vbi     ; check kind of interrupt
   527 21CD 2C 0F D4		      BIT NMIST 
   527 21D0 10 03		 BPL VBI     
   528 = 21D2			.def  :__dlijmp
   529 21D2 4C DA 21		      jmp __off               ; VDSLST
   530 21D5 E6 14		vbi:  inc RTCLOK+2
   531 = 21D7			.def  :__vbijmp
   532 21D7 4C DA 21		      jmp __off               ; VBIVEC
   533 = 21DA			.def  :__off
   534
   535 21DA 40				rti						; ret
   536 				.endl
   537
   538 21DB			.local	SETVBI						; PROCEDURE | ASSEMBLER
   539
   540 				; ------------------------------------------------------------
   541
   542 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   543 				; as Pointer
   544 21DB B5 98			lda :STACKORIGIN,x
   545 21DD 8D 5F 25			sta A
   546 21E0 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   547 21E2 8D 60 25			sta A+1
   548 21E5 CA				dex
   549
   550 				; ---------------------  ASM Block 050  ---------------------
   551
   552
   553 21E6 AD 5F 25 8D D8 21 +   mwa a __vbijmp+1
   554
   555
   556 				; ------------------------------------------------------------
   557
   558 = 255F			A	= DATAORIGIN+$000B
   559
   560 = 255F			@VarData	= A
   561 = 0002			@VarDataSize	= 2
   562
   563 21F2			@exit
   564 					.ifdef @new
   565 					lda <@VarData
   566 					sta :ztmp
   567 					lda >@VarData
   568 					ldy #@VarDataSize-1
   569 					jmp @FreeMem
   570 					els
   571 21F2 60				rts						; ret
   572 					eif
   573 				.endl
   574
   575 21F3			.local	SETDLI						; PROCEDURE | ASSEMBLER
   576
   577 				; ------------------------------------------------------------
   578
   579 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   580 				; as Pointer
   581 21F3 B5 98			lda :STACKORIGIN,x
   582 21F5 8D 61 25			sta A
   583 21F8 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   584 21FA 8D 62 25			sta A+1
   585 21FD CA				dex
   586
   587 				; ---------------------  ASM Block 051  ---------------------
   588
   589
   590 21FE AD 61 25 8D D3 21 +   mwa a __dlijmp+1
   591
   592
   593 				; ------------------------------------------------------------
   594
   595 = 2561			A	= DATAORIGIN+$000D
   596
   597 = 2561			@VarData	= A
   598 = 0002			@VarDataSize	= 2
   599
   600 220A			@exit
   601 					.ifdef @new
   602 					lda <@VarData
   603 					sta :ztmp
   604 					lda >@VarData
   605 					ldy #@VarDataSize-1
   606 					jmp @FreeMem
   607 					els
   608 220A 60				rts						; ret
   609 					eif
   610 				.endl
   611
   612 220B			.local	SYSTEMOFF					; PROCEDURE
   613
   614 				; ---------------------  ASM Block 054  ---------------------
   615
   616 220B 78			 sei 
   617
   618 				; optimize OK (SYS), line = 63
   619
   620 220C A9 00			lda #$00
   621 220E 8D 0E D4			sta GLOBALS.NMIEN
   622 2211 A9 FE			lda #$FE
   623 2213 8D 01 D3			sta GLOBALS.PORTB
   624 2216 A9 CD			lda <NMI
   625 2218 8D FA FF			sta GLOBALS.NMIVEC
   626 221B A9 21			lda >NMI
   627 221D 8D FB FF			sta GLOBALS.NMIVEC+1
   628 2220 A9 C0			lda #$C0
   629 2222 8D 0E D4			sta GLOBALS.NMIEN
   630 2225			@exit
   631 					.ifdef @new
   632 					lda <@VarData
   633 					sta :ztmp
   634 					lda >@VarData
   635 					ldy #@VarDataSize-1
   636 					jmp @FreeMem
   637 					els
   638 2225 60				rts						; ret
   639 					eif
   640 				.endl
   641
   642 				; ------------------------------------------------------------
   643 				; ------------------------------------------------------------
   644 2226			@UnitInit
   645
   646 2226 60				rts
   647
   648 				; ------------------------------------------------------------
   649
   650 				.endl							; UNIT SYS
   651
   652 				; ------------------------------------------------------------
   653
   654 2227			.local	GR						; UNIT
   655
   656 2227			.local	MODE2						; PROCEDURE
   657
   658 				; optimize OK (GR), line = 17
   659
   660 2227 A9 00			lda #$00
   661 2229 8D 02 D4			sta GLOBALS.DLIST
   662 222C A9 11			lda #$11
   663 222E 8D 03 D4			sta GLOBALS.DLIST+1
   664 2231			@exit
   665 					.ifdef @new
   666 					lda <@VarData
   667 					sta :ztmp
   668 					lda >@VarData
   669 					ldy #@VarDataSize-1
   670 					jmp @FreeMem
   671 					els
   672 2231 60				rts						; ret
   673 					eif
   674 				.endl
   675
   676 				; ------------------------------------------------------------
   677 				; ------------------------------------------------------------
   678 2232			@UnitInit
   679
   680 2232 60				rts
   681
   682 				; ------------------------------------------------------------
   683
   684 				.endl							; UNIT GR
   685
   686 				; ------------------------------------------------------------
   687
   688 2233			.local	SPRITES						; UNIT
   689
   690 2233			.local	COPYSHIP					; PROCEDURE
   691
   692 				; optimize OK (SPRITES), line = 25
   693
   694 2233 A5 03			lda BSHIPYCLEAR
   695 2235 85 92			sta :bp2
   696 2237 A9 14			lda #$14
   697 2239 85 93			sta :bp2+1
   698 223B A0 00			ldy #$00
   699 223D 98				tya
   700 223E 91 92			sta (:bp2),y
   701 2240 C8				iny
   702 2241 91 92			sta (:bp2),y
   703 2243 A5 03			lda BSHIPYCLEAR
   704 2245 85 92			sta :bp2
   705 2247 A9 15			lda #$15
   706 2249 85 93			sta :bp2+1
   707 224B A0 00			ldy #$00
   708 224D 98				tya
   709 224E 91 92			sta (:bp2),y
   710 2250 C8				iny
   711 2251 91 92			sta (:bp2),y
   712
   713 				; optimize OK (SPRITES), line = 26
   714
   715 2253 A5 02			lda BSHIPY
   716 2255 85 8C			sta :ecx
   717 2257 A9 14			lda #$14
   718 2259 85 8D			sta :ecx+1
   719 225B A9 00			lda #$00
   720 225D 85 88			sta :edx
   721 225F A9 10			lda #$10
   722 2261 85 89			sta :edx+1
   723 2263 A9 08			lda #$08
   724 2265 85 84			sta :eax
   725 2267 A9 00			lda #$00
   726 2269 85 85			sta :eax+1
   727 226B 20 57 20			jsr @move
   728
   729 				; optimize OK (SPRITES), line = 27
   730
   731 226E A5 02			lda BSHIPY
   732 2270 85 8C			sta :ecx
   733 2272 A9 15			lda #$15
   734 2274 85 8D			sta :ecx+1
   735 2276 A9 08			lda #$08
   736 2278 85 88			sta :edx
   737 227A A9 10			lda #$10
   738 227C 85 89			sta :edx+1
   739 227E A9 08			lda #$08
   740 2280 85 84			sta :eax
   741 2282 A9 00			lda #$00
   742 2284 85 85			sta :eax+1
   743 2286 20 57 20			jsr @move
   744 2289			@exit
   745 					.ifdef @new
   746 					lda <@VarData
   747 					sta :ztmp
   748 					lda >@VarData
   749 					ldy #@VarDataSize-1
   750 					jmp @FreeMem
   751 					els
   752 2289 60				rts						; ret
   753 					eif
   754 				.endl
   755
   756 228A			.local	INIT						; PROCEDURE
   757
   758 				; optimize OK (SPRITES), line = 32
   759
   760 228A				.LOCAL
   761 228A A0 00			ldy #$00
   762 228C 98				tya
   763 228D 99 00 13 99 80 13 + fill	:10 sta $1300+#*$80,y
   764 22AB C8				iny
   765 22AC 10 DF			bpl fill
   766 					.ENDL
   767
   768 				; optimize OK (SPRITES), line = 33
   769
   770 22AE A0 70			ldy #256-$90
   771 22B0 A9 FF			lda #$FF
   772 22B2 99 B0 12 C8 D0 FA		sta:rne $1320+$90-256,y+
   773
   774 				; optimize OK (SPRITES), line = 35
   775
   776 22B8 A9 10			lda #$10
   777 22BA 8D 07 D4			sta GLOBALS.PMBASE
   778
   779 				; optimize OK (SPRITES), line = 36
   780
   781 22BD A9 0A			lda #$0A
   782 22BF 8D 15 D0			sta GLOBALS.COLPM3
   783 22C2 A9 0E			lda #$0E
   784 22C4 8D 12 D0			sta GLOBALS.COLPM01
   785 22C7 8D 13 D0			sta GLOBALS.COLPM01+1
   786
   787 				; optimize OK (SPRITES), line = 37
   788
   789 22CA A9 50			lda #$50
   790 22CC 85 02			sta BSHIPY
   791 22CE 85 03			sta BSHIPYCLEAR
   792
   793 				; optimize OK (SPRITES), line = 38
   794
   795 22D0 A9 30			lda #$30
   796 22D2 85 00			sta BHPOSP0
   797 22D4 A9 38			lda #$38
   798 22D6 85 01			sta BHPOSP1
   799 22D8 A5 00			lda WSHIPX
   800 22DA 8D 00 D0			sta GLOBALS.HPOSP01
   801 22DD A5 01			lda WSHIPX+1
   802 22DF 8D 01 D0			sta GLOBALS.HPOSP01+1
   803
   804 				; optimize OK (SPRITES), line = 39
   805
   806 22E2 A9 00			lda #$00
   807 22E4 8D 08 D0			sta GLOBALS.SIZEP01
   808 22E7 8D 09 D0			sta GLOBALS.SIZEP01+1
   809 22EA 8D 0C D0			sta GLOBALS.SIZEM
   810 22ED 8D 1B D0			sta GLOBALS.PRIOR
   811 22F0 A9 03			lda #$03
   812 22F2 8D 1D D0			sta GLOBALS.GRACTL
   813
   814 				; optimize FAIL ('COPYSHIP', SPRITES), line = 41
   815
   816 22F5 20 33 22			jsr COPYSHIP
   817 22F8			@exit
   818 					.ifdef @new
   819 					lda <@VarData
   820 					sta :ztmp
   821 					lda >@VarData
   822 					ldy #@VarDataSize-1
   823 					jmp @FreeMem
   824 					els
   825 22F8 60				rts						; ret
   826 					eif
   827 				.endl
   828
   829 				; ------------------------------------------------------------
   830 				; ------------------------------------------------------------
   831 22F9			@UnitInit
   832
   833 22F9 60				rts
   834
   835 				; ------------------------------------------------------------
   836
   837 = 0000			BHPOSP0	= $00
   838 = 0001			BHPOSP1	= $01
   839 = 0002			BSHIPY	= $02
   840 = 0003			BSHIPYCLEAR	= $03
   841 = 0000			WSHIPX	= $00
   842
   843 				.endl							; UNIT SPRITES
   844
   845 				; ------------------------------------------------------------
   846
   847 22FA			.local	JOY						; UNIT
   848
   849 22FA			.local	MOVESHIP					; PROCEDURE
   850
   851 				; optimize OK (JOY), line = 20
   852
   853 22FA A9 0C			lda #$0C
   854 22FC 85 FF			sta GLOBALS.BMASK1
   855
   856 				; optimize OK (JOY), line = 21
   857
   858 22FE A9 01			lda #$01
   859 2300 85 FD			sta GLOBALS.B1I
   860
   861 2302			l_0117
   862 				; --- ForToDoCondition
   863
   864 				; optimize OK (JOY), line = 22
   865
   866 2302 A5 04			lda JOYDIRECTION
   867 2304 25 FF			and GLOBALS.BMASK1
   868 2306 8D 63 25			sta @CASETMP_0003
   869 2309 C9 04			cmp #$04
   870 230B D0 20			jne l_0136
   871 230D			@
   872
   873 				; optimize OK (JOY), line = 24
   874
   875 230D A5 01			lda SPRITES.BHPOSP1
   876 230F C9 B0			cmp #$B0
   877 2311 B0 17			jcs l_0148
   878
   879 				; optimize OK (JOY), line = 25
   880
   881 2313 A5 00			lda SPRITES.WSHIPX
   882 2315 18 69 02			add #$02
   883 2318 85 00			sta SPRITES.WSHIPX
   884 231A A5 01			lda SPRITES.WSHIPX+1
   885 231C 69 02			adc #$02
   886 231E 85 01			sta SPRITES.WSHIPX+1
   887 2320 A5 00			lda SPRITES.WSHIPX
   888 2322 8D 00 D0			sta GLOBALS.HPOSP01
   889 2325 A5 01			lda SPRITES.WSHIPX+1
   890 2327 8D 01 D0			sta GLOBALS.HPOSP01+1
   891 232A			l_0148
   892
   893 232A 4C 81 23			jmp a_0003
   894 232D			l_0136
   895 232D C9 08			cmp #$08
   896 232F D0 20			jne l_015A
   897 2331			@
   898
   899 				; optimize OK (JOY), line = 29
   900
   901 2331 A5 00			lda SPRITES.BHPOSP0
   902 2333 C9 31			cmp #$31
   903 2335 90 17			jcc l_016C
   904
   905 				; optimize OK (JOY), line = 30
   906
   907 2337 A5 00			lda SPRITES.WSHIPX
   908 2339 38 E9 02			sub #$02
   909 233C 85 00			sta SPRITES.WSHIPX
   910 233E A5 01			lda SPRITES.WSHIPX+1
   911 2340 E9 02			sbc #$02
   912 2342 85 01			sta SPRITES.WSHIPX+1
   913 2344 A5 00			lda SPRITES.WSHIPX
   914 2346 8D 00 D0			sta GLOBALS.HPOSP01
   915 2349 A5 01			lda SPRITES.WSHIPX+1
   916 234B 8D 01 D0			sta GLOBALS.HPOSP01+1
   917 234E			l_016C
   918
   919 234E 4C 81 23			jmp a_0003
   920 2351			l_015A
   921 2351 C9 02			cmp #$02
   922 2353 D0 18			jne l_017E
   923 2355			@
   924
   925 				; optimize OK (JOY), line = 34
   926
   927 2355 A5 02			lda SPRITES.BSHIPY
   928 2357 C9 21			cmp #$21
   929 2359 90 0F			jcc l_0190
   930
   931 				; optimize OK (JOY), line = 35
   932
   933 235B 18 69 06			add #$06
   934 235E 85 03			sta SPRITES.BSHIPYCLEAR
   935 2360 A5 02			lda SPRITES.BSHIPY
   936 2362 38 E9 02			sub #$02
   937 2365 85 02			sta SPRITES.BSHIPY
   938
   939 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 36
   940
   941 2367 20 33 22			jsr SPRITES.COPYSHIP
   942 236A			l_0190
   943
   944 236A 4C 81 23			jmp a_0003
   945 236D			l_017E
   946 236D C9 01			cmp #$01
   947 236F D0 10			jne l_01A8
   948 2371			@
   949
   950 				; optimize OK (JOY), line = 40
   951
   952 2371 A5 02			lda SPRITES.BSHIPY
   953 2373 C9 A8			cmp #$A8
   954 2375 B0 0A			jcs l_01BA
   955
   956 				; optimize OK (JOY), line = 41
   957
   958 2377 85 03			sta SPRITES.BSHIPYCLEAR
   959 2379 18 69 02			add #$02
   960 237C 85 02			sta SPRITES.BSHIPY
   961
   962 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 42
   963
   964 237E 20 33 22			jsr SPRITES.COPYSHIP
   965 2381			l_01BA
   966
   967 2381			l_01A8
   968 2381			a_0003
   969
   970 				; optimize OK (JOY), line = 46
   971
   972 2381 A9 03			lda #$03
   973 2383 85 FF			sta GLOBALS.BMASK1
   974
   975 				; --- ForToDoEpilog
   976 2385 C6 FD			dec GLOBALS.B1I
   977 2387 30 03 4C 02 23		jpl l_0117
   978 238C			l_0125
   979
   980 				; ------------------------------------------------------------
   981
   982 = 0000			@FORTMP_0114	= $00
   983 = 2563			@CASETMP_0003	= DATAORIGIN+$000F
   984
   985 = 2563			@VarData	= @CASETMP_0003
   986 = 0001			@VarDataSize	= 1
   987
   988 238C			@exit
   989 					.ifdef @new
   990 					lda <@VarData
   991 					sta :ztmp
   992 					lda >@VarData
   993 					ldy #@VarDataSize-1
   994 					jmp @FreeMem
   995 					els
   996 238C 60				rts						; ret
   997 					eif
   998 				.endl
   999
  1000 				; ------------------------------------------------------------
  1001 				; ------------------------------------------------------------
  1002 238D			@UnitInit
  1003
  1004 238D 60				rts
  1005
  1006 				; ------------------------------------------------------------
  1007
  1008 = 0004			JOYDIRECTION	= $04
  1009
  1010 				.endl							; UNIT JOY
  1011
  1012 238E			.local	VBI						; PROCEDURE | INTERRUPT
  1013
  1014 				; ---------------------  ASM Block 055  ---------------------
  1015
  1016 238E 48 8A 48 98 48	 phr 
  1017
  1018 				; optimize OK (main.pas), line = 26
  1019
  1020 2393 AD 05 11			lda GLOBALS.DL2LMS+1
  1021 2396 C9 E0			cmp #$E0
  1022 2398 D0 03			bne @+
  1023 239A AD 04 11			lda GLOBALS.DL2LMS
  1024 239D			@
  1025 239D D0 17			jne l_01EB
  1026 239F A9 3F			lda #$3F
  1027 23A1 85 88			sta :edx
  1028 23A3 A9 EC			lda #$EC
  1029 23A5 85 89			sta :edx+1
  1030 23A7 A9 C0			lda #$C0
  1031 23A9 85 8C			sta :ecx
  1032 23AB A9 03			lda #$03
  1033 23AD 85 8D			sta :ecx+1
  1034 23AF A9 00			lda #$00
  1035 23B1 85 84			sta :eax
  1036 23B3 20 AC 20			jsr @fill
  1037 23B6			l_01EB
  1038
  1039 				; ---------------------  ASM Block 056  ---------------------
  1040
  1041 23B6 68 A8 68 AA 68	 plr 
  1042 23BB 40				rti						; ret
  1043 				.endl
  1044
  1045 23BC			.local	JOYHANDLER					; PROCEDURE | INTERRUPT
  1046
  1047 				; ---------------------  ASM Block 057  ---------------------
  1048
  1049 23BC 48 8A 48 98 48	 phr 
  1050
  1051 				; ---------------------  ASM Block 058  ---------------------
  1052
  1053 23C1 8D 0A D4		 sta WSYNC 
  1054
  1055 				; optimize OK (main.pas), line = 36
  1056
  1057 23C4 A9 0F			lda #$0F
  1058 23C6 8D 1A D0			sta GLOBALS.COLBK
  1059
  1060 				; optimize OK (main.pas), line = 38
  1061
  1062 23C9 AD 00 D3			lda GLOBALS.PORTA
  1063 23CC 85 04			sta JOY.JOYDIRECTION
  1064
  1065 				; optimize OK (main.pas), line = 39
  1066
  1067 23CE 29 0F			and #$0F
  1068 23D0 C9 0F			cmp #$0F
  1069 23D2 F0 03			jeq l_0216
  1070 23D4 20 FA 22			jsr JOY.MOVESHIP
  1071 23D7			l_0216
  1072
  1073 				; optimize OK (main.pas), line = 41
  1074
  1075 23D7 A9 00			lda #$00
  1076 23D9 8D 1A D0			sta GLOBALS.COLBK
  1077
  1078 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 43
  1079
  1080 23DC E8				inx
  1081 23DD AD 66 25 95 98		mva PSTARS :STACKORIGIN,x
  1082 23E2 AD 67 25 95 A8		mva PSTARS+1 :STACKORIGIN+STACKWIDTH,x
  1083 23E7 20 F3 21			jsr SYS.SETDLI
  1084
  1085 				; ---------------------  ASM Block 059  ---------------------
  1086
  1087 23EA 68 A8 68 AA 68	 plr 
  1088 23EF 40				rti						; ret
  1089 				.endl
  1090
  1091 23F0			.local	STARS						; PROCEDURE | INTERRUPT
  1092
  1093 				; ---------------------  ASM Block 060  ---------------------
  1094
  1095 23F0 48 8A 48 98 48	 phr 
  1096
  1097 				; optimize OK (main.pas), line = 52
  1098
  1099 23F5 A9 7C			lda #$7C
  1100 23F7 85 FD			sta GLOBALS.B1I
  1101
  1102 23F9			l_022E
  1103 				; --- ForToDoCondition
  1104
  1105 				; ---------------------  ASM Block 061  ---------------------
  1106
  1107 23F9 8D 0A D4		 sta WSYNC 
  1108
  1109 				; optimize OK (main.pas), line = 54
  1110
  1111 23FC A4 FD			ldy GLOBALS.B1I
  1112 23FE B9 00 12			lda adr.ASTARS,y
  1113 2401 8D 07 D0			sta GLOBALS.HPOSM3
  1114
  1115 				; optimize OK (main.pas), line = 55
  1116
  1117 2404 B9 00 12			lda adr.ASTARS,y
  1118 2407 38 F9 7D 12			sub adr.ASPEED,y
  1119 240B 99 00 12			sta adr.ASTARS,y
  1120
  1121 				; optimize OK (main.pas), line = 56
  1122
  1123 240E AD 0A D2			lda SYSTEM.RND
  1124 2411 8D 15 D0			sta GLOBALS.COLPM3
  1125
  1126 				; --- ForToDoEpilog
  1127 2414 C6 FD			dec GLOBALS.B1I
  1128 2416 10 E1			jpl l_022E
  1129 2418			l_023C
  1130
  1131 				; ---------------------  ASM Block 062  ---------------------
  1132
  1133 2418 8D 0A D4		 sta WSYNC 
  1134
  1135 				; optimize OK (main.pas), line = 62
  1136
  1137 241B A9 0F			lda #$0F
  1138 241D 8D 1A D0			sta GLOBALS.COLBK
  1139
  1140 				; optimize OK (main.pas), line = 65
  1141
  1142 2420 A5 14			lda GLOBALS.RTCLOK
  1143 2422 29 01			and #$01
  1144 2424 D0 25			jne l_0273
  1145
  1146 				; optimize OK (main.pas), line = 66
  1147
  1148 2426 AD 04 11			lda GLOBALS.DL2LMS
  1149 2429 18 69 03			add #$03
  1150 242C 85 A1			sta :STACKORIGIN+9
  1151 242E AD 05 11			lda GLOBALS.DL2LMS+1
  1152 2431 69 00			adc #$00
  1153 2433 85 B1			sta :STACKORIGIN+STACKWIDTH+9
  1154 2435 AD 0A D2			lda SYSTEM.RND
  1155 2438 29 0F			and #$0F
  1156 243A 20 F4 20			jsr @mul40
  1157 243D 18 65 A1			add :STACKORIGIN+9
  1158 2440 A8				tay
  1159 2441 A5 B1			lda :STACKORIGIN+STACKWIDTH+9
  1160 2443 65 85			adc :eax+1
  1161 2445 85 91			sta :bp+1
  1162 2447 A9 80			lda #$80
  1163 2449 91 90			sta (:bp),y
  1164 244B			l_0273
  1165
  1166 				; optimize OK (main.pas), line = 69
  1167
  1168 244B AD 05 11			lda GLOBALS.DL2LMS+1
  1169 244E C9 E0			cmp #$E0
  1170 2450 90 17			jcc l_029D
  1171 2452 D0 07			bne @+
  1172 2454 AD 04 11			lda GLOBALS.DL2LMS
  1173 2457 C9 01			cmp #$01
  1174 2459 90 0E			jcc l_029D
  1175 245B			@
  1176 245B AD 04 11 D0 03 CE + 	dew GLOBALS.DL2LMS
  1177 2466 4C 73 24			jmp l_02AB
  1178 2469			l_029D
  1179 2469 A9 3F			lda #$3F
  1180 246B 8D 04 11			sta GLOBALS.DL2LMS
  1181 246E A9 EC			lda #$EC
  1182 2470 8D 05 11			sta GLOBALS.DL2LMS+1
  1183 2473			l_02AB
  1184
  1185 				; optimize OK (main.pas), line = 72
  1186
  1187 2473 A9 15			lda #$15
  1188 2475 85 FD			sta GLOBALS.B1I
  1189
  1190 2477			l_02B8
  1191 				; --- ForToDoCondition
  1192 2477 A5 FD			lda GLOBALS.B1I
  1193 2479 20 F4 20			jsr @mul40
  1194 247C 18 6D 04 11			add GLOBALS.DL2LMS
  1195 2480 A8				tay
  1196 2481 AD 05 11			lda GLOBALS.DL2LMS+1
  1197 2484 65 85			adc :eax+1
  1198 2486 85 91			sta :bp+1
  1199 2488 A9 00			lda #$00
  1200 248A 91 90			sta (:bp),y
  1201
  1202 				; --- ForToDoEpilog
  1203 248C C6 FD			dec GLOBALS.B1I
  1204 248E 10 E7			jpl l_02B8
  1205 2490			l_02C6
  1206
  1207 				; optimize OK (main.pas), line = 76
  1208
  1209 2490 A9 00			lda #$00
  1210 2492 8D 1A D0			sta GLOBALS.COLBK
  1211
  1212 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 80
  1213
  1214 2495 E8				inx
  1215 2496 AD 64 25 95 98		mva PJOY :STACKORIGIN,x
  1216 249B AD 65 25 95 A8		mva PJOY+1 :STACKORIGIN+STACKWIDTH,x
  1217 24A0 20 F3 21			jsr SYS.SETDLI
  1218
  1219 				; ---------------------  ASM Block 063  ---------------------
  1220
  1221 24A3 68 A8 68 AA 68	 plr 
  1222
  1223 				; ------------------------------------------------------------
  1224
  1225 = 0000			@FORTMP_022B	= $00
  1226 = 0000			@FORTMP_02B5	= $00
  1227 24A8 40				rti						; ret
  1228 				.endl
  1229
  1230 24A9			.local	INIT						; PROCEDURE
  1231
  1232 				; optimize FAIL ('SYSTEM.PAUSE_0078', main.pas), line = 87
  1233
  1234 24A9 20 C2 21			jsr SYSTEM.PAUSE_0078
  1235 24AC A9 00			lda #$00
  1236 24AE 8D 00 D4			sta GLOBALS.DMACTL
  1237 24B1 20 0B 22			jsr SYS.SYSTEMOFF
  1238
  1239 				; optimize OK (main.pas), line = 89
  1240
  1241 24B4 A9 3F			lda #$3F
  1242 24B6 85 88			sta :edx
  1243 24B8 A9 EC			lda #$EC
  1244 24BA 85 89			sta :edx+1
  1245 24BC A9 C0			lda #$C0
  1246 24BE 85 8C			sta :ecx
  1247 24C0 A9 03			lda #$03
  1248 24C2 85 8D			sta :ecx+1
  1249 24C4 A9 00			lda #$00
  1250 24C6 85 84			sta :eax
  1251 24C8 20 AC 20			jsr @fill
  1252
  1253 				; optimize OK (main.pas), line = 91
  1254
  1255 24CB A9 7C			lda #$7C
  1256 24CD 85 FD			sta GLOBALS.B1I
  1257
  1258 24CF			l_02F7
  1259 				; --- ForToDoCondition
  1260
  1261 				; optimize OK (main.pas), line = 92
  1262
  1263 24CF A4 FD			ldy GLOBALS.B1I
  1264 24D1 AD 0A D2			lda SYSTEM.RND
  1265 24D4 99 00 12			sta adr.ASTARS,y
  1266
  1267 				; optimize OK (main.pas), line = 93
  1268
  1269 24D7 29 03			and #$03
  1270 24D9 18 69 01			add #$01
  1271 24DC 99 7D 12			sta adr.ASPEED,y
  1272
  1273 				; --- ForToDoEpilog
  1274 24DF C6 FD			dec GLOBALS.B1I
  1275 24E1 10 EC			jpl l_02F7
  1276 24E3			l_0305
  1277
  1278 				; optimize FAIL ('SPRITES.INIT', main.pas), line = 96
  1279
  1280 24E3 20 8A 22			jsr SPRITES.INIT
  1281
  1282 				; optimize FAIL ('GR.MODE2', main.pas), line = 97
  1283
  1284 24E6 20 27 22			jsr GR.MODE2
  1285 24E9 A9 00			lda #$00
  1286 24EB 8D 1A D0			sta GLOBALS.COLBK
  1287 24EE A9 02			lda #$02
  1288 24F0 8D 18 D0			sta GLOBALS.COLPF2
  1289
  1290 				; optimize OK (main.pas), line = 98
  1291
  1292 24F3 AD 02 D3			lda GLOBALS.PACTL
  1293 24F6 09 04			ora #$04
  1294 24F8 8D 02 D3			sta GLOBALS.PACTL
  1295
  1296 				; optimize OK (main.pas), line = 99
  1297
  1298 24FB A9 BC			lda <JOYHANDLER
  1299 24FD 8D 64 25			sta PJOY
  1300 2500 A9 23			lda >JOYHANDLER
  1301 2502 8D 65 25			sta PJOY+1
  1302 2505 A9 F0			lda <STARS
  1303 2507 8D 66 25			sta PSTARS
  1304 250A A9 23			lda >STARS
  1305 250C 8D 67 25			sta PSTARS+1
  1306
  1307 				; optimize FAIL ('SYS.SETVBI', main.pas), line = 101
  1308
  1309 250F E8				inx
  1310 2510 A9 8E 95 98			mva <VBI :STACKORIGIN,x
  1311 2514 A9 23 95 A8			mva >VBI :STACKORIGIN+STACKWIDTH,x
  1312 2518 20 DB 21			jsr SYS.SETVBI
  1313
  1314 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 102
  1315
  1316 251B E8				inx
  1317 251C A9 BC 95 98			mva <JOYHANDLER :STACKORIGIN,x
  1318 2520 A9 23 95 A8			mva >JOYHANDLER :STACKORIGIN+STACKWIDTH,x
  1319 2524 20 F3 21			jsr SYS.SETDLI
  1320
  1321 				; optimize FAIL ('SYSTEM.PAUSE_0078', main.pas), line = 104
  1322
  1323 2527 20 C2 21			jsr SYSTEM.PAUSE_0078
  1324 252A A9 3E			lda #$3E
  1325 252C 8D 00 D4			sta GLOBALS.DMACTL
  1326
  1327 				; ------------------------------------------------------------
  1328
  1329 = 0000			@FORTMP_02F4	= $00
  1330 252F			@exit
  1331 					.ifdef @new
  1332 					lda <@VarData
  1333 					sta :ztmp
  1334 					lda >@VarData
  1335 					ldy #@VarDataSize-1
  1336 					jmp @FreeMem
  1337 					els
  1338 252F 60				rts						; ret
  1339 					eif
  1340 				.endl
  1341 2530			l_0007
  1342
  1343 				; optimize FAIL ('INIT', main.pas), line = 108
  1344
  1345 2530 20 A9 24			jsr INIT
  1346
  1347 				; --- RepeatUntilProlog
  1348 2533			l_0348
  1349
  1350 				; optimize OK (main.pas), line = 109
  1351
  1352 2533 4C 33 25			jmp l_0348
  1353
  1354 				; ------------------------------------------------------------
  1355
  1356 = 2000			adr.CLEARSCRCOL	= CODEORIGIN+$0000
  1357 2536			.var CLEARSCRCOL	= adr.CLEARSCRCOL .word
  1358 = 1200			adr.ASTARS	= $1200
  1359 2536			.var ASTARS	= adr.ASTARS .word
  1360 = 127D			adr.ASPEED	= $127D
  1361 2536			.var ASPEED	= adr.ASPEED .word
  1362 = 2564			PJOY	= DATAORIGIN+$0010
  1363 = 2566			PSTARS	= DATAORIGIN+$0012
  1364 2536			@exit
  1365
  1366 2536 A2 00		@halt	ldx #$00
  1367 2538 9A				txs
  1368 					.ifdef MAIN.@DEFINES.ROMOFF
  1369 					inc portb
  1370 					.endif
  1371
  1372 2539 A0 01			ldy #$01
  1373
  1374 253B 60				rts
  1375
  1376 				; ------------------------------------------------------------
  1377
  1378 253C 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1379
  1380 				; ------------------------------------------------------------
  1381
  1382 254C			.local	@DEFINES
  1383 254C			ATARI
  1384 				.endl
  1385
  1386 254C			.local	@RESOURCE
  1387 				.endl
  1388
  1389 = 254C 00 20		CLEARSCRCOL
  1389 = 254E 00 12		ASTARS
  1389 = 2550 7D 12		ASPEED
  1389 				.endl							; MAIN
  1390
  1391 				; ------------------------------------------------------------
  1392 				; ------------------------------------------------------------
  1393
  1394 				.macro	UNITINITIALIZATION
  1395 				
  1396 					.ifdef MAIN.SYSTEM.@UnitInit
  1397 					jsr MAIN.SYSTEM.@UnitInit
  1398 					eif
  1399 				
  1400 					.ifdef MAIN.GLOBALS.@UnitInit
  1401 					jsr MAIN.GLOBALS.@UnitInit
  1402 					eif
  1403 				
  1404 					.ifdef MAIN.SYS.@UnitInit
  1405 					jsr MAIN.SYS.@UnitInit
  1406 					eif
  1407 				
  1408 					.ifdef MAIN.GR.@UnitInit
  1409 					jsr MAIN.GR.@UnitInit
  1410 					eif
  1411 				
  1412 					.ifdef MAIN.SPRITES.@UnitInit
  1413 					jsr MAIN.SPRITES.@UnitInit
  1414 					eif
  1415 				
  1416 					.ifdef MAIN.JOY.@UnitInit
  1417 					jsr MAIN.JOY.@UnitInit
  1418 					eif
  1419 				.endm
  1420
  1421 				; ------------------------------------------------------------
  1422
  1423 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1424 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1424 				SYSTEM: $2155..$21CC
  1425 					eif
  1426
  1427 					ift .SIZEOF(MAIN.GLOBALS) > 0
  1428 					.print 'GLOBALS: ',MAIN.GLOBALS,'..',MAIN.GLOBALS+.SIZEOF(MAIN.GLOBALS)-1
  1429 					eif
  1430
  1431 					ift .SIZEOF(MAIN.SYS) > 0
  1432 					.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
  1432 				SYS: $21CD..$2226
  1433 					eif
  1434
  1435 					ift .SIZEOF(MAIN.GR) > 0
  1436 					.print 'GR: ',MAIN.GR,'..',MAIN.GR+.SIZEOF(MAIN.GR)-1
  1436 				GR: $2227..$2232
  1437 					eif
  1438
  1439 					ift .SIZEOF(MAIN.SPRITES) > 0
  1440 					.print 'SPRITES: ',MAIN.SPRITES,'..',MAIN.SPRITES+.SIZEOF(MAIN.SPRITES)-1
  1440 				SPRITES: $2233..$22F9
  1441 					eif
  1442
  1443 					ift .SIZEOF(MAIN.JOY) > 0
  1444 					.print 'JOY: ',MAIN.JOY,'..',MAIN.JOY+.SIZEOF(MAIN.JOY)-1
  1444 				JOY: $22FA..$238D
  1445 					eif
  1446
  1447 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1447 				CODE: $2000..$254B
  1448
  1449 				; ------------------------------------------------------------
  1450
  1451 2552				.align $04
  1452
  1453 2554			DATAORIGIN
  1454 2554-2559> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  1455
  1456 = 0006			VARINITSIZE	= *-DATAORIGIN
  1457 = 0014			VARDATASIZE	= 20
  1458
  1459 = 2568			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1460
  1461 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1461 				DATA: $2554..$2568
  1462
  1463 02E0-02E1> 19 21			run START
  1464
  1465 				; ------------------------------------------------------------
  1466
  1467 				.macro	STATICDATA
  1468 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  1469 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03
  1470 				.endm
  1471
  1472 					end
