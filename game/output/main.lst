mads 2.1.1
  1133 					opt l+
    98 = 0000				?EXTDETECT = 0
    99 = 0000				?VBXDETECT = 0
   100
   101 2075				RCASM 'res/gr_dl.asm' GLOBALS.DL_2 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 001A			len = .sizeof(_GLOBALS.DL_2)
     6 				mcpy	ift main.GLOBALS.DL_2+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 11 +  MWA #MAIN.GLOBALS.DL_2 ECX
    13 2088 A9 1A 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: const.inc
     1 = 1000			PM_ADR              = $1000;                      // players & missiles memory (2K) start address
     2 = 1300			M0_ADR              = PM_ADR + $300;              // missile 0 start memory address
     3 = 1400			P0_ADR              = PM_ADR + $400;              // player 0 start memory address
     4 = 1500			P1_ADR              = PM_ADR + $500;              // player 1 start memory address
     5 = 1000			GFX_SHIP_ADR        = $1000;                      // ship gfx memory start address, ship size = 20 bytes, 16 bytes for gfx and 4 bytes fo top/bottom empty rows
     6 = 0008			GFX_SHIP_SEG        = 8;                          // ship gfx 10 byte segment, 10B for P0 & 10B for P1
     8 = 1800			GFX_FONTS_ADR       = $1800;
    10 = 1100			DL_2                = $1100;                      // display list memory start address for ANTIC mode 2
    11 = ED57			GAME_LMS            = $efff - (17 * 40);          // Load Memory Scan address
    12 = E000			GAME_LMS_END        = $e000;
    13 = 0011			GAME_SCREEN_ROWS    = 17;
    15 = 0E0E			SHIP_COL            = $0e0e;
    16 = 0030			SHIP_LEFT_LIMIT     = 48;
    17 = 00B0			SHIP_RIGHT_LIMIT    = SHIP_LEFT_LIMIT + (16 * 8);
    18 = 0020			SHIP_TOP_LIMIT      = 32;
    19 = 00A8			SHIP_BOTTOM_LIMIT   = SHIP_TOP_LIMIT + GFX_SHIP_SEG * GAME_SCREEN_ROWS;
    20 = 0202			SHIP_X_STEP         = $0202;
    21 = 0004			SHIP_Y_STEP         = 4;
    23 = 0008			JOY_LEFT            = %1000;
    24 = 0004			JOY_RIGHT           = %0100;
    25 = 0002			JOY_UP              = %0010;
    26 = 0001			JOY_DOWN            = %0001;
     3 1100			dl2
     4 1100 F0 70 F0		    .byte $f0,$70,$f0
     5 1103 42 57 ED		    .byte $42,a(GAME_LMS)
     6 1106 02 02 02 02 02 02 + :17 .byte 2
     7 1117 41 00 11		    .byte $41,a(dl2)
    23 					.print '$R RCASM   ',main.GLOBALS.DL_2,'..',main.GLOBALS.DL_2+len-1," 'res/gr_dl.asm'"
    23 				$R RCASM   $1100..$1119 'res/gr_dl.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: main.a65
   102 20B0				RCDATA 'res/gfx_ship.bin' GLOBALS.GFX_SHIP_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0010			len = .filesize('res/gfx_ship.bin')
    28 20B0				org main.GLOBALS.GFX_SHIP_ADR
    30 1000-100F> 70 7B 1E 3F + 	ins 'res/gfx_ship.bin'
    32 					.print '$R RCDATA  ',main.GLOBALS.GFX_SHIP_ADR,'..',*-1," 'res/gfx_ship.bin'"
    32 				$R RCDATA  $1000..$100F 'res/gfx_ship.bin'
Source: main.a65
   103 1010				RCDATA 'res/charset.fnt' GLOBALS.GFX_FONTS_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0400			len = .filesize('res/charset.fnt')
    28 1010				org main.GLOBALS.GFX_FONTS_ADR
    30 1800-1BFF> 00 00 00 00 + 	ins 'res/charset.fnt'
    32 					.print '$R RCDATA  ',main.GLOBALS.GFX_FONTS_ADR,'..',*-1," 'res/charset.fnt'"
    32 				$R RCDATA  $1800..$1BFF 'res/charset.fnt'
Source: main.a65
   104 				.endl
   105
   106 				; ------------------------------------------------------------
   107
   108 1C00				org CODEORIGIN
   109
   110 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
Source: main.a65
   111
   112 				; ------------------------------------------------------------
   113
   114 2000			RTLIB
   115 2000				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
   148 					opt l+
   116
   117 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   117 				ZPAGE: $0080..$00D7
   118
   119 				.print 'RTLIB: ',RTLIB,'..',*-1
   119 				RTLIB: $2000..$205B
   120
   121 				; ------------------------------------------------------------
   122
   123 205C			START
   124 205C BA				tsx
   125 205D 8E 23 24			stx MAIN.@halt+1
   126
   127 					.ifdef fmulinit
   128 					fmulinit
   129 					eif
   130
   131 = 000A			VLEN	= VARDATASIZE-VARINITSIZE
   132 = 2442			VADR	= DATAORIGIN+VARINITSIZE
   133
   134 					ift VADR > $BFFF
   135 					ert 'Invalid memory address range ',VADR
   136 					eli (VLEN>0) && (VLEN<=256)
   137 2060 A2 F6			ldx #256-VLEN
   138 2062 A9 00			lda #$00
   139 2064 9D 4C 23 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   140 					eli VLEN>0
   141 					@fill #VADR #VLEN #$00
   142 					eif
   143
   144 206A A9 4C 85 82 A9 24 + 	mwa #PROGRAMSTACK psptr
   145
   146 					.ifdef MAIN.@DEFINES.ROMOFF
   147 					icl 'atari\romoff.asm'
   148 					.endif
   149
   150 2072 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   151 2074 BD 40 03 9D 28 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   152
   153 207D E8				inx						; X = 0
   154 207E 86 90			stx bp						; BP = 0
   155
   156 2080 8E 08 D2			stx audctl					; reset POKEY
   157 2083 A9 03			lda #3
   158 2085 8D 0F D2			sta skctl
   159
   160 2088 CA				dex						; X = 255
   161
   162 2089				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
    11 2089 20 2C 21			jsr MAIN.SYS.@UnitInit
    15 208C 20 38 21			jsr MAIN.GR.@UnitInit
    19 208F 20 F6 21			jsr MAIN.SPRITES.@UnitInit
    23 2092 20 9B 22			jsr MAIN.JOY.@UnitInit
   163
   164 2095			.local	MAIN						; PROCEDURE
   165
   166 2095 4C 1C 24			jmp l_0007
   167
   168 				; ------------------------------------------------------------
   169
   170 2098			.local	SYSTEM						; UNIT
   171
   172 2098			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   173
   174 				; ------------------------------------------------------------
   175
   176 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   177 				; as Pointer
   178 2098 B5 98			lda :STACKORIGIN,x
   179 209A 85 8C			sta VALUE
   180 209C CA				dex
   181
   182 				; ------------------------------------------------------------
   183
   184 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   185 				; as Pointer
   186 209D B5 98			lda :STACKORIGIN,x
   187 209F 85 88			sta A
   188 20A1 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   189 20A3 85 89			sta A+1
   190 20A5 CA				dex
   191
   192 				; ---------------------  ASM Block 021  ---------------------
   193
   194 20A6 A0 00			ldy #0
   195 20A8 A5 8C 91 88			mva value (edx),y
   196
   197
   198 				; ------------------------------------------------------------
   199
   200 = 0088			A	= edx
   201 = 008C			VALUE	= ecx
   202 20AC			@exit
   203 					.ifdef @new
   204 					lda <@VarData
   205 					sta :ztmp
   206 					lda >@VarData
   207 					ldy #@VarDataSize-1
   208 					jmp @FreeMem
   209 					els
   210 20AC 60				rts						; ret
   211 					eif
   212 				.endl
   213
   214 20AD			.local	FILLBYTE_0049					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   215
   216 				; ------------------------------------------------------------
   217
   218 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   219 				; as Pointer
   220 20AD B5 98			lda :STACKORIGIN,x
   221 20AF 85 84			sta VALUE
   222 20B1 CA				dex
   223
   224 				; ------------------------------------------------------------
   225
   226 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   227 				; as Pointer
   228 20B2 B5 98			lda :STACKORIGIN,x
   229 20B4 85 8C			sta COUNT
   230 20B6 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   231 20B8 85 8D			sta COUNT+1
   232 20BA CA				dex
   233
   234 				; ------------------------------------------------------------
   235
   236 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   237 				; as Pointer
   238 20BB B5 98			lda :STACKORIGIN,x
   239 20BD 85 88			sta A
   240 20BF B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   241 20C1 85 89			sta A+1
   242 20C3 CA				dex
   243
   244 				; ---------------------  ASM Block 029  ---------------------
   245
   246 20C4 20 00 20			jsr @fill
   247
   248
   249 				; ------------------------------------------------------------
   250
   251 = 0088			A	= edx
   252 = 008C			COUNT	= ecx
   253 = 0084			VALUE	= eax
   254 20C7			@exit
   255 					.ifdef @new
   256 					lda <@VarData
   257 					sta :ztmp
   258 					lda >@VarData
   259 					ldy #@VarDataSize-1
   260 					jmp @FreeMem
   261 					els
   262 20C7 60				rts						; ret
   263 					eif
   264 				.endl
   265
   266 20C8			.local	PAUSE_0067					; PROCEDURE | ASSEMBLER | OVERLOAD
   267
   268 				; ---------------------  ASM Block 039  ---------------------
   269
   270 20C8 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   271
   272 20CE			@exit
   273 					.ifdef @new
   274 					lda <@VarData
   275 					sta :ztmp
   276 					lda >@VarData
   277 					ldy #@VarDataSize-1
   278 					jmp @FreeMem
   279 					els
   280 20CE 60				rts						; ret
   281 					eif
   282 				.endl
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0101			__PORTB_BANKS	= $0101
   287 = 0648			M_PI_2	= $0648
   288 = 0192			D_PI_2	= $0192
   289 = 0004			D_PI_180	= $04
   290 = 0000			MGTIA	= $00
   291 = 0080			MVBXE	= $80
   292 = 0000			VBXE_XDLADR	= $00
   293 = 0100			VBXE_BCBADR	= $0100
   294 = 1000			VBXE_MAPADR	= $1000
   295 = 5000			VBXE_OVRADR	= $5000
   296 = B000			VBXE_WINDOW	= $B000
   297 = 0000			IDLI	= $00
   298 = 0001			IVBL	= $01
   299 = 00FE			CH_DELCHR	= $FE
   300 = 009B			CH_ENTER	= $9B
   301 = 001B			CH_ESC	= $1B
   302 = 001C			CH_CURS_UP	= $1C
   303 = 001D			CH_CURS_DOWN	= $1D
   304 = 001E			CH_CURS_LEFT	= $1E
   305 = 001F			CH_CURS_RIGHT	= $1F
   306 = 007F			CH_TAB	= $7F
   307 = 009B			CH_EOL	= $9B
   308 = 007D			CH_CLR	= $7D
   309 = 00FD			CH_BELL	= $FD
   310 = 007E			CH_DEL	= $7E
   311 = 009C			CH_DELLINE	= $9C
   312 = 009D			CH_INSLINE	= $9D
   313 = 0000			COLOR_BLACK	= $00
   314 = 000E			COLOR_WHITE	= $0E
   315 = 0032			COLOR_RED	= $32
   316 = 0096			COLOR_CYAN	= $96
   317 = 0068			COLOR_VIOLET	= $68
   318 = 00C4			COLOR_GREEN	= $C4
   319 = 0074			COLOR_BLUE	= $74
   320 = 00EE			COLOR_YELLOW	= $EE
   321 = 0028			COLOR_ORANGE	= $28
   322 = 00E4			COLOR_BROWN	= $E4
   323 = 003C			COLOR_LIGHTRED	= $3C
   324 = 0004			COLOR_GRAY1	= $04
   325 = 0006			COLOR_GRAY2	= $06
   326 = 000A			COLOR_GRAY3	= $0A
   327 = 00CC			COLOR_LIGHTGREEN	= $CC
   328 = 007C			COLOR_LIGHTBLUE	= $7C
   329 = 0004			FMOPENREAD	= $04
   330 = 0008			FMOPENWRITE	= $08
   331 = 0009			FMOPENAPPEND	= $09
   332 = 000C			FMOPENREADWRITE	= $0C
   333 = 243C			SCREENWIDTH	= DATAORIGIN+$0000
   334 = 243E			SCREENHEIGHT	= DATAORIGIN+$0002
   335 = 2440			DATESEPARATOR	= DATAORIGIN+$0004
   336 = D014			TVSYSTEM	= $D014
   337 = D20A			RND	= $D20A
   338 = 02C0			adr.PALETTE	= $02C0
   339 20CF			.var PALETTE	= adr.PALETTE .word
   340 = D012			adr.HPALETTE	= $D012
   341 20CF			.var HPALETTE	= adr.HPALETTE .word
   342 = 2441			FILEMODE	= DATAORIGIN+$0005
   343 = 2442			GRAPHMODE	= DATAORIGIN+$0006
   344 = 2443			IORESULT	= DATAORIGIN+$0007
   345 = 2444			EOLN	= DATAORIGIN+$0008
   346 = 2445			RNDSEED	= DATAORIGIN+$0009
   347
   348 = 20CF C0 02		PALETTE
   348 = 20D1 12 D0		HPALETTE
   348 				.endl							; UNIT SYSTEM
   349
   350 				; ------------------------------------------------------------
   351
   352 20D3			.local	GLOBALS						; UNIT
   353
   354 				; ------------------------------------------------------------
   355
   356 = 1000			PM_ADR	= $1000
   357 = 1300			M0_ADR	= $1300
   358 = 1400			P0_ADR	= $1400
   359 = 1500			P1_ADR	= $1500
   360 = 1000			GFX_SHIP_ADR	= $1000
   361 = 0008			GFX_SHIP_SEG	= $08
   362 = 1800			GFX_FONTS_ADR	= $1800
   363 = 1100			DL_2	= $1100
   364 = ED57			GAME_LMS	= $ED57
   365 = E000			GAME_LMS_END	= $E000
   366 = 0011			GAME_SCREEN_ROWS	= $11
   367 = 0E0E			SHIP_COL	= $0E0E
   368 = 0030			SHIP_LEFT_LIMIT	= $30
   369 = 00B0			SHIP_RIGHT_LIMIT	= $B0
   370 = 0020			SHIP_TOP_LIMIT	= $20
   371 = 00A8			SHIP_BOTTOM_LIMIT	= $A8
   372 = 0202			SHIP_X_STEP	= $0202
   373 = 0004			SHIP_Y_STEP	= $04
   374 = 0008			JOY_LEFT	= $08
   375 = 0004			JOY_RIGHT	= $04
   376 = 0002			JOY_UP	= $02
   377 = 0001			JOY_DOWN	= $01
   378 = 0014			RTCLOK	= $14
   379 = D000			HPOSP0	= $D000
   380 = D001			HPOSP1	= $D001
   381 = D004			HPOSM0	= $D004
   382 = D005			HPOSM1	= $D005
   383 = D006			HPOSM2	= $D006
   384 = D007			HPOSM3	= $D007
   385 = D008			SIZEP0	= $D008
   386 = D009			SIZEP1	= $D009
   387 = D00A			SIZEP2	= $D00A
   388 = D00B			SIZEP3	= $D00B
   389 = D00C			SIZEM	= $D00C
   390 = D010			GRAFP3	= $D010
   391 = D010			TRIG0	= $D010
   392 = D011			GRAFM	= $D011
   393 = D012			COLPM0	= $D012
   394 = D013			COLPM1	= $D013
   395 = D014			COLPM2	= $D014
   396 = D015			COLPM3	= $D015
   397 = D016			COLPF0	= $D016
   398 = D017			COLPF1	= $D017
   399 = D018			COLPF2	= $D018
   400 = D019			COLPF3	= $D019
   401 = D01A			COLBK	= $D01A
   402 = D01B			PRIOR	= $D01B
   403 = D01D			GRACTL	= $D01D
   404 = D20A			RND	= $D20A
   405 = D300			PORTA	= $D300
   406 = D301			PORTB	= $D301
   407 = D302			PACTL	= $D302
   408 = D400			DMACTL	= $D400
   409 = D402			DLIST	= $D402
   410 = D407			PMBASE	= $D407
   411 = D409			CHBAS	= $D409
   412 = D40A			WSYNC	= $D40A
   413 = D40B			VCOUNT	= $D40B
   414 = D40E			NMIEN	= $D40E
   415 = FFFA			NMIVEC	= $FFFA
   416 = D000			HPOSP01	= $D000
   417 = D008			SIZEP01	= $D008
   418 = D012			COLPM01	= $D012
   419 = 1104			WDL2LMS	= $1104
   420 = 00FF			BTMP1	= $FF
   421 = 00FE			BTMP2	= $FE
   422 = 00FD			B1I	= $FD
   423 = 00FC			B2I	= $FC
   424 = 00FA			WTMP1	= $FA
   425 = 00F8			WTMP2	= $F8
   426 = 00F6			WTMP3	= $F6
   427 = 00F4			WTMP4	= $F4
   428 = 00F3			ODDCOUNTER	= $F3
   429 = 00F2			ISFIRETIME	= $F2
   430
   431 				.endl							; UNIT GLOBALS
   432
   433 				; ------------------------------------------------------------
   434
   435 20D3			.local	SYS						; UNIT
   436
   437 20D3			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
   438
   439 				; ---------------------  ASM Block 049  ---------------------
   440
   441
   442 				      bit NMIST \ bpl vbi     ; check kind of interrupt
   442 20D3 2C 0F D4		      BIT NMIST 
   442 20D6 10 03		 BPL VBI     
   443 = 20D8			.def  :__dlijmp
   444 20D8 4C E0 20		      jmp __off               ; VDSLST
   445 20DB E6 14		vbi:  inc RTCLOK+2
   446 = 20DD			.def  :__vbijmp
   447 20DD 4C E0 20		      jmp __off               ; VBIVEC
   448 = 20E0			.def  :__off
   449
   450 20E0 40				rti						; ret
   451 				.endl
   452
   453 20E1			.local	SETVBI						; PROCEDURE | ASSEMBLER
   454
   455 				; ------------------------------------------------------------
   456
   457 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   458 				; as Pointer
   459 20E1 B5 98			lda :STACKORIGIN,x
   460 20E3 8D 47 24			sta A
   461 20E6 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   462 20E8 8D 48 24			sta A+1
   463 20EB CA				dex
   464
   465 				; ---------------------  ASM Block 050  ---------------------
   466
   467
   468 20EC AD 47 24 8D DE 20 +   mwa a __vbijmp+1
   469
   470
   471 				; ------------------------------------------------------------
   472
   473 = 2447			A	= DATAORIGIN+$000B
   474
   475 = 2447			@VarData	= A
   476 = 0002			@VarDataSize	= 2
   477
   478 20F8			@exit
   479 					.ifdef @new
   480 					lda <@VarData
   481 					sta :ztmp
   482 					lda >@VarData
   483 					ldy #@VarDataSize-1
   484 					jmp @FreeMem
   485 					els
   486 20F8 60				rts						; ret
   487 					eif
   488 				.endl
   489
   490 20F9			.local	SETDLI						; PROCEDURE | ASSEMBLER
   491
   492 				; ------------------------------------------------------------
   493
   494 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   495 				; as Pointer
   496 20F9 B5 98			lda :STACKORIGIN,x
   497 20FB 8D 49 24			sta A
   498 20FE B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   499 2100 8D 4A 24			sta A+1
   500 2103 CA				dex
   501
   502 				; ---------------------  ASM Block 051  ---------------------
   503
   504
   505 2104 AD 49 24 8D D9 20 +   mwa a __dlijmp+1
   506
   507
   508 				; ------------------------------------------------------------
   509
   510 = 2449			A	= DATAORIGIN+$000D
   511
   512 = 2449			@VarData	= A
   513 = 0002			@VarDataSize	= 2
   514
   515 2110			@exit
   516 					.ifdef @new
   517 					lda <@VarData
   518 					sta :ztmp
   519 					lda >@VarData
   520 					ldy #@VarDataSize-1
   521 					jmp @FreeMem
   522 					els
   523 2110 60				rts						; ret
   524 					eif
   525 				.endl
   526
   527 2111			.local	SYSTEMOFF					; PROCEDURE
   528
   529 				; ---------------------  ASM Block 054  ---------------------
   530
   531 2111 78			 sei 
   532
   533 				; optimize OK (SYS), line = 63
   534
   535 2112 A9 00			lda #$00
   536 2114 8D 0E D4			sta GLOBALS.NMIEN
   537 2117 A9 FE			lda #$FE
   538 2119 8D 01 D3			sta GLOBALS.PORTB
   539 211C A9 D3			lda <NMI
   540 211E 8D FA FF			sta GLOBALS.NMIVEC
   541 2121 A9 20			lda >NMI
   542 2123 8D FB FF			sta GLOBALS.NMIVEC+1
   543 2126 A9 C0			lda #$C0
   544 2128 8D 0E D4			sta GLOBALS.NMIEN
   545 212B			@exit
   546 					.ifdef @new
   547 					lda <@VarData
   548 					sta :ztmp
   549 					lda >@VarData
   550 					ldy #@VarDataSize-1
   551 					jmp @FreeMem
   552 					els
   553 212B 60				rts						; ret
   554 					eif
   555 				.endl
   556
   557 				; ------------------------------------------------------------
   558 				; ------------------------------------------------------------
   559 212C			@UnitInit
   560
   561 212C 60				rts
   562
   563 				; ------------------------------------------------------------
   564
   565 				.endl							; UNIT SYS
   566
   567 				; ------------------------------------------------------------
   568
   569 212D			.local	GR						; UNIT
   570
   571 212D			.local	MODE2						; PROCEDURE
   572
   573 				; optimize OK (GR), line = 17
   574
   575 212D A9 00			lda #$00
   576 212F 8D 02 D4			sta GLOBALS.DLIST
   577 2132 A9 11			lda #$11
   578 2134 8D 03 D4			sta GLOBALS.DLIST+1
   579 2137			@exit
   580 					.ifdef @new
   581 					lda <@VarData
   582 					sta :ztmp
   583 					lda >@VarData
   584 					ldy #@VarDataSize-1
   585 					jmp @FreeMem
   586 					els
   587 2137 60				rts						; ret
   588 					eif
   589 				.endl
   590
   591 				; ------------------------------------------------------------
   592 				; ------------------------------------------------------------
   593 2138			@UnitInit
   594
   595 2138 60				rts
   596
   597 				; ------------------------------------------------------------
   598
   599 				.endl							; UNIT GR
   600
   601 				; ------------------------------------------------------------
   602
   603 2139			.local	SPRITES						; UNIT
   604
   605 2139			.local	COPYSHIP					; PROCEDURE | ASSEMBLER
   606
   607 				; ---------------------  ASM Block 055  ---------------------
   608
   609
   610 2139 A0 14		        ldy #>P0_ADR
   611 213B 8C 57 21		        sty p0Ship+2
   612 213E 8C 81 21		        sty clrP0+2
   613 2141 C8			        iny
   614 2142 8C 5D 21		        sty p1Ship+2
   615 2145 8C 84 21		        sty clrP1+2
   616
   617 2148 A4 02		        ldy BSHIPY
   618 214A 8C 56 21		        sty p0Ship+1
   619 214D 8C 5C 21		        sty p1Ship+1
   620
   621 				        ;move
   622 2150 A0 07		        ldy #GFX_SHIP_SEG-1
   623 2152 B9 00 10		@:      lda GFX_SHIP_ADR,y
   624 2155 99 00 14		p0Ship: sta P0_ADR,y
   625 2158 B9 08 10		        lda GFX_SHIP_ADR+GFX_SHIP_SEG,y
   626 215B 99 00 15		p1Ship: sta P1_ADR,y
   627 215E 88			        dey
   628 215F 10 F1		        bpl @-
   629
   630 				        ;clear
   631 2161 A4 02		        ldy BSHIPY
   632 2163 A5 06		        lda JOY.JOYDIRECTION
   633 2165 29 03		        and #%0011
   634 2167 C9 01		        cmp #JOY_DOWN
   635 2169 F0 06		        beq @+
   636 216B 98			        tya
   637 216C 18 69 08		        add #SHIP_Y_STEP*2
   638 216F D0 04		        bne @+1
   639 2171 98			@:      tya
   640 2172 38 E9 04		        sub #SHIP_Y_STEP
   641 2175 8D 80 21		@:      sta clrP0+1
   642 2178 8D 83 21		        sta clrP1+1
   643
   644 217B A9 00		        lda #0
   645 217D A0 03		        ldy #GFX_SHIP_SEG-SHIP_Y_STEP-1
   646 217F 99 00 14		clrP0:  sta P0_ADR,y
   647 2182 99 00 15		clrP1:  sta P1_ADR,y
   648 2185 88			        dey
   649 2186 10 F7		        bpl clrP0
   650
   651 2188			@exit
   652 					.ifdef @new
   653 					lda <@VarData
   654 					sta :ztmp
   655 					lda >@VarData
   656 					ldy #@VarDataSize-1
   657 					jmp @FreeMem
   658 					els
   659 2188 60				rts						; ret
   660 					eif
   661 				.endl
   662
   663 2189			.local	INIT						; PROCEDURE
   664
   665 				; optimize OK (SPRITES), line = 73
   666
   667 2189				.LOCAL
   668 2189 A0 00			ldy #$00
   669 218B 98				tya
   670 218C 99 00 13 99 80 13 + fill	:10 sta $1300+#*$80,y
   671 21AA C8				iny
   672 21AB 10 DF			bpl fill
   673 					.ENDL
   674
   675 				; optimize OK (SPRITES), line = 74
   676
   677 21AD A0 70			ldy #256-$90
   678 21AF A9 FF			lda #$FF
   679 21B1 99 B0 12 C8 D0 FA		sta:rne $1320+$90-256,y+
   680
   681 				; optimize OK (SPRITES), line = 76
   682
   683 21B7 A9 10			lda #$10
   684 21B9 8D 07 D4			sta GLOBALS.PMBASE
   685
   686 				; optimize OK (SPRITES), line = 77
   687
   688 21BC A9 0A			lda #$0A
   689 21BE 8D 15 D0			sta GLOBALS.COLPM3
   690 21C1 A9 0E			lda #$0E
   691 21C3 8D 12 D0			sta GLOBALS.COLPM01
   692 21C6 8D 13 D0			sta GLOBALS.COLPM01+1
   693
   694 				; optimize OK (SPRITES), line = 78
   695
   696 21C9 A9 30			lda #$30
   697 21CB 85 00			sta BHPOSP0
   698 21CD A9 38			lda #$38
   699 21CF 85 01			sta BHPOSP1
   700 21D1 A5 00			lda WSHIPX
   701 21D3 8D 00 D0			sta GLOBALS.HPOSP01
   702 21D6 A5 01			lda WSHIPX+1
   703 21D8 8D 01 D0			sta GLOBALS.HPOSP01+1
   704
   705 				; optimize OK (SPRITES), line = 79
   706
   707 21DB A9 50			lda #$50
   708 21DD 85 02			sta BSHIPY
   709 21DF A9 00			lda #$00
   710 21E1 8D 08 D0			sta GLOBALS.SIZEP01
   711 21E4 8D 09 D0			sta GLOBALS.SIZEP01+1
   712 21E7 8D 0C D0			sta GLOBALS.SIZEM
   713 21EA 8D 1B D0			sta GLOBALS.PRIOR
   714 21ED A9 03			lda #$03
   715 21EF 8D 1D D0			sta GLOBALS.GRACTL
   716
   717 				; optimize FAIL ('COPYSHIP', SPRITES), line = 81
   718
   719 21F2 20 39 21			jsr COPYSHIP
   720 21F5			@exit
   721 					.ifdef @new
   722 					lda <@VarData
   723 					sta :ztmp
   724 					lda >@VarData
   725 					ldy #@VarDataSize-1
   726 					jmp @FreeMem
   727 					els
   728 21F5 60				rts						; ret
   729 					eif
   730 				.endl
   731
   732 				; ------------------------------------------------------------
   733 				; ------------------------------------------------------------
   734 21F6			@UnitInit
   735
   736 21F6 60				rts
   737
   738 				; ------------------------------------------------------------
   739
   740 = 0000			BHPOSP0	= $00
   741 = 0001			BHPOSP1	= $01
   742 = 0002			BSHIPY	= $02
   743 = 0003			BCANNONX	= $03
   744 = 0000			WSHIPX	= $00
   745 = 0004			WCANNONY	= $04
   746
   747 				.endl							; UNIT SPRITES
   748
   749 				; ------------------------------------------------------------
   750
   751 21F7			.local	JOY						; UNIT
   752
   753 21F7			.local	MOVESHIP					; PROCEDURE
   754
   755 				; optimize OK (JOY), line = 20
   756
   757 21F7 A9 0C			lda #$0C
   758 21F9 85 FF			sta GLOBALS.BTMP1
   759
   760 				; optimize OK (JOY), line = 21
   761
   762 21FB A9 01			lda #$01
   763 21FD 85 FD			sta GLOBALS.B1I
   764
   765 21FF			l_00D7
   766 				; --- ForToDoCondition
   767
   768 				; optimize OK (JOY), line = 22
   769
   770 21FF A5 06			lda JOYDIRECTION
   771 2201 25 FF			and GLOBALS.BTMP1
   772 2203 8D 4B 24			sta @CASETMP_0003
   773 2206 C9 04			cmp #$04
   774 2208 D0 22			jne l_00F6
   775 220A			@
   776
   777 				; optimize OK (JOY), line = 24
   778
   779 220A A5 01			lda SPRITES.BHPOSP1
   780 220C C9 B0			cmp #$B0
   781 220E B0 19			jcs l_0108
   782
   783 				; optimize OK (JOY), line = 25
   784
   785 2210 A5 00			lda SPRITES.WSHIPX
   786 2212 18 69 02			add #$02
   787 2215 85 00			sta SPRITES.WSHIPX
   788 2217 A5 01			lda SPRITES.WSHIPX+1
   789 2219 69 02			adc #$02
   790 221B 85 01			sta SPRITES.WSHIPX+1
   791 221D E6 03			inc SPRITES.BCANNONX
   792
   793 				; optimize OK (JOY), line = 26
   794
   795 221F A5 00			lda SPRITES.WSHIPX
   796 2221 8D 00 D0			sta GLOBALS.HPOSP01
   797 2224 A5 01			lda SPRITES.WSHIPX+1
   798 2226 8D 01 D0			sta GLOBALS.HPOSP01+1
   799 2229			l_0108
   800
   801 2229 4C 8F 22			jmp a_0003
   802 222C			l_00F6
   803 222C C9 08			cmp #$08
   804 222E D0 22			jne l_011E
   805 2230			@
   806
   807 				; optimize OK (JOY), line = 30
   808
   809 2230 A5 00			lda SPRITES.BHPOSP0
   810 2232 C9 31			cmp #$31
   811 2234 90 19			jcc l_0130
   812
   813 				; optimize OK (JOY), line = 31
   814
   815 2236 A5 00			lda SPRITES.WSHIPX
   816 2238 38 E9 02			sub #$02
   817 223B 85 00			sta SPRITES.WSHIPX
   818 223D A5 01			lda SPRITES.WSHIPX+1
   819 223F E9 02			sbc #$02
   820 2241 85 01			sta SPRITES.WSHIPX+1
   821 2243 C6 03			dec SPRITES.BCANNONX
   822
   823 				; optimize OK (JOY), line = 32
   824
   825 2245 A5 00			lda SPRITES.WSHIPX
   826 2247 8D 00 D0			sta GLOBALS.HPOSP01
   827 224A A5 01			lda SPRITES.WSHIPX+1
   828 224C 8D 01 D0			sta GLOBALS.HPOSP01+1
   829 224F			l_0130
   830
   831 224F 4C 8F 22			jmp a_0003
   832 2252			l_011E
   833 2252 C9 02			cmp #$02
   834 2254 D0 1C			jne l_0146
   835 2256			@
   836
   837 				; optimize OK (JOY), line = 36
   838
   839 2256 A5 02			lda SPRITES.BSHIPY
   840 2258 C9 21			cmp #$21
   841 225A 90 13			jcc l_0158
   842
   843 				; optimize OK (JOY), line = 37
   844
   845 225C 38 E9 04			sub #$04
   846 225F 85 02			sta SPRITES.BSHIPY
   847 2261 A5 04			lda SPRITES.WCANNONY
   848 2263 38 E9 14			sub #$14
   849 2266 85 04			sta SPRITES.WCANNONY
   850 2268 B0 02			scs
   851 226A C6 05			dec SPRITES.WCANNONY+1
   852
   853 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 38
   854
   855 226C 20 39 21			jsr SPRITES.COPYSHIP
   856 226F			l_0158
   857
   858 226F 4C 8F 22			jmp a_0003
   859 2272			l_0146
   860 2272 C9 01			cmp #$01
   861 2274 D0 19			jne l_0167
   862 2276			@
   863
   864 				; optimize OK (JOY), line = 42
   865
   866 2276 A5 02			lda SPRITES.BSHIPY
   867 2278 C9 A8			cmp #$A8
   868 227A B0 13			jcs l_0179
   869
   870 				; optimize OK (JOY), line = 43
   871
   872 227C 18 69 04			add #$04
   873 227F 85 02			sta SPRITES.BSHIPY
   874 2281 A5 04			lda SPRITES.WCANNONY
   875 2283 18 69 14			add #$14
   876 2286 85 04			sta SPRITES.WCANNONY
   877 2288 90 02			scc
   878 228A E6 05			inc SPRITES.WCANNONY+1
   879
   880 				; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 44
   881
   882 228C 20 39 21			jsr SPRITES.COPYSHIP
   883 228F			l_0179
   884
   885 228F			l_0167
   886 228F			a_0003
   887
   888 				; optimize OK (JOY), line = 48
   889
   890 228F A9 03			lda #$03
   891 2291 85 FF			sta GLOBALS.BTMP1
   892
   893 				; --- ForToDoEpilog
   894 2293 C6 FD			dec GLOBALS.B1I
   895 2295 30 03 4C FF 21		jpl l_00D7
   896 229A			l_00E5
   897
   898 				; ------------------------------------------------------------
   899
   900 = 0000			@FORTMP_00D4	= $00
   901 = 244B			@CASETMP_0003	= DATAORIGIN+$000F
   902
   903 = 244B			@VarData	= @CASETMP_0003
   904 = 0001			@VarDataSize	= 1
   905
   906 229A			@exit
   907 					.ifdef @new
   908 					lda <@VarData
   909 					sta :ztmp
   910 					lda >@VarData
   911 					ldy #@VarDataSize-1
   912 					jmp @FreeMem
   913 					els
   914 229A 60				rts						; ret
   915 					eif
   916 				.endl
   917
   918 				; ------------------------------------------------------------
   919 				; ------------------------------------------------------------
   920 229B			@UnitInit
   921
   922 229B 60				rts
   923
   924 				; ------------------------------------------------------------
   925
   926 = 0006			JOYDIRECTION	= $06
   927
   928 				.endl							; UNIT JOY
   929
   930 229C			.local	VBI						; PROCEDURE | INTERRUPT
   931
   932 				; ---------------------  ASM Block 056  ---------------------
   933
   934 229C 48 8A 48 98 48	 phr 
   935
   936 				; optimize OK (main.pas), line = 21
   937
   938 22A1 A5 14			lda GLOBALS.RTCLOK
   939 22A3 29 01			and #$01
   940 22A5 85 F3			sta GLOBALS.ODDCOUNTER
   941
   942 				; optimize OK (main.pas), line = 22
   943
   944 22A7 A5 14			lda GLOBALS.RTCLOK
   945 22A9 A0 01			ldy #1
   946 22AB 29 03			and #$03
   947 22AD F0 01			beq @+
   948 22AF 88				dey
   949 22B0			@
   950 22B0 98				tya
   951 22B1 85 F2			sta GLOBALS.ISFIRETIME
   952
   953 				; optimize OK (main.pas), line = 26
   954
   955 22B3 F0 25			jeq l_01B7
   956
   957 				; optimize OK (main.pas), line = 27
   958
   959 22B5 AD 10 D0			lda GLOBALS.TRIG0
   960 22B8 D0 20			jne l_01CA
   961 22BA A5 03			lda SPRITES.BCANNONX
   962 22BC 4A				lsr @
   963 22BD 18 6D 04 11			add GLOBALS.WDL2LMS
   964 22C1 85 A1			sta :STACKORIGIN+9
   965 22C3 AD 05 11			lda GLOBALS.WDL2LMS+1
   966 22C6 69 00			adc #$00
   967 22C8 85 B1			sta :STACKORIGIN+STACKWIDTH+9
   968 22CA A5 A1			lda :STACKORIGIN+9
   969 22CC 18 65 04			add SPRITES.WCANNONY
   970 22CF A8				tay
   971 22D0 A5 B1			lda :STACKORIGIN+STACKWIDTH+9
   972 22D2 65 05			adc SPRITES.WCANNONY+1
   973 22D4 85 91			sta :bp+1
   974 22D6 A9 02			lda #$02
   975 22D8 91 90			sta (:bp),y
   976 22DA			l_01CA
   977 22DA			l_01B7
   978
   979 				; optimize OK (main.pas), line = 30
   980
   981 22DA AD 05 11			lda GLOBALS.WDL2LMS+1
   982 22DD C9 E0			cmp #$E0
   983 22DF 90 17			jcc l_01F3
   984 22E1 D0 07			bne @+
   985 22E3 AD 04 11			lda GLOBALS.WDL2LMS
   986 22E6 C9 01			cmp #$01
   987 22E8 90 0E			jcc l_01F3
   988 22EA			@
   989 22EA AD 04 11 D0 03 CE + 	dew GLOBALS.WDL2LMS
   990 22F5 4C 02 23			jmp l_0201
   991 22F8			l_01F3
   992 22F8 A9 57			lda #$57
   993 22FA 8D 04 11			sta GLOBALS.WDL2LMS
   994 22FD A9 ED			lda #$ED
   995 22FF 8D 05 11			sta GLOBALS.WDL2LMS+1
   996 2302			l_0201
   997
   998 				; optimize OK (main.pas), line = 32
   999
  1000 2302 AD 04 11			lda GLOBALS.WDL2LMS
  1001 2305 85 FA			sta GLOBALS.WTMP1
  1002 2307 AD 05 11			lda GLOBALS.WDL2LMS+1
  1003 230A 85 FB			sta GLOBALS.WTMP1+1
  1004
  1005 				; ---------------------  ASM Block 057  ---------------------
  1006
  1007
  1008 230C A2 11		        ldx #GAME_SCREEN_ROWS
  1009 230E A0 00		        ldy #0
  1010 2310 98			  @:    tya
  1011 2311 91 FA		        sta (GLOBALS.WTMP1),y
  1012 2313 A5 FA		        lda GLOBALS.WTMP1
  1013 2315 18 69 28		        add #40
  1014 2318 85 FA		        sta GLOBALS.WTMP1
  1015 231A 90 02		        bcc @+
  1016 231C E6 FB		        inc GLOBALS.WTMP1+1
  1017 231E CA			  @:    dex
  1018 231F 10 EF		        bpl @-1
  1019 				  
  1020
  1021 				; ---------------------  ASM Block 058  ---------------------
  1022
  1023 2321 68 A8 68 AA 68	 plr 
  1024 2326 40				rti						; ret
  1025 				.endl
  1026
  1027 2327			.local	JOYHANDLER					; PROCEDURE | INTERRUPT
  1028
  1029 				; ---------------------  ASM Block 059  ---------------------
  1030
  1031 2327 48 8A 48 98 48	 phr 
  1032
  1033 				; optimize OK (main.pas), line = 56
  1034
  1035 232C A5 F3			lda GLOBALS.ODDCOUNTER
  1036 232E D0 05			jne l_021D
  1037 2330 AD 00 D3			lda GLOBALS.PORTA
  1038 2333 85 06			sta JOY.JOYDIRECTION
  1039 2335			l_021D
  1040 2335 20 F7 21			jsr JOY.MOVESHIP
  1041
  1042 				; ---------------------  ASM Block 060  ---------------------
  1043
  1044
  1045 2338 A9 48 8D D9 20 A9 +     mwa #STARS __dlijmp+1
  1046 2342 68 A8 68 AA 68	    plr
  1047 				  
  1048 2347 40				rti						; ret
  1049 				.endl
  1050
  1051 2348			.local	STARS						; PROCEDURE | INTERRUPT
  1052
  1053 				; ---------------------  ASM Block 061  ---------------------
  1054
  1055 2348 48 8A 48 98 48	 phr 
  1056
  1057 				; optimize OK (main.pas), line = 68
  1058
  1059 234D A9 7C			lda #$7C
  1060 234F 85 FD			sta GLOBALS.B1I
  1061
  1062 2351			l_0234
  1063 				; --- ForToDoCondition
  1064
  1065 				; ---------------------  ASM Block 062  ---------------------
  1066
  1067 2351 8D 0A D4		 sta WSYNC 
  1068
  1069 				; optimize OK (main.pas), line = 70
  1070
  1071 2354 A4 FD			ldy GLOBALS.B1I
  1072 2356 B9 00 12			lda adr.ASTARS,y
  1073 2359 8D 07 D0			sta GLOBALS.HPOSM3
  1074
  1075 				; optimize OK (main.pas), line = 71
  1076
  1077 235C B9 00 12			lda adr.ASTARS,y
  1078 235F 38 F9 7D 12			sub adr.ASPEED,y
  1079 2363 99 00 12			sta adr.ASTARS,y
  1080
  1081 				; optimize OK (main.pas), line = 72
  1082
  1083 2366 AD 0A D2			lda SYSTEM.RND
  1084 2369 8D 15 D0			sta GLOBALS.COLPM3
  1085
  1086 				; --- ForToDoEpilog
  1087 236C C6 FD			dec GLOBALS.B1I
  1088 236E 10 E1			jpl l_0234
  1089 2370			l_0242
  1090
  1091 				; ---------------------  ASM Block 063  ---------------------
  1092
  1093
  1094 2370 A9 27 8D D9 20 A9 +     mwa #JOYHANDLER __dlijmp+1
  1095 237A 68 A8 68 AA 68	    plr
  1096 				  
  1097
  1098 				; ------------------------------------------------------------
  1099
  1100 = 0000			@FORTMP_0231	= $00
  1101 237F 40				rti						; ret
  1102 				.endl
  1103
  1104 2380			.local	INIT						; PROCEDURE
  1105
  1106 				; optimize FAIL ('SYSTEM.PAUSE_0067', main.pas), line = 83
  1107
  1108 2380 20 C8 20			jsr SYSTEM.PAUSE_0067
  1109 2383 A9 00			lda #$00
  1110 2385 8D 00 D4			sta GLOBALS.DMACTL
  1111 2388 20 11 21			jsr SYS.SYSTEMOFF
  1112
  1113 				; optimize OK (main.pas), line = 85
  1114
  1115 238B A9 18			lda #$18
  1116 238D 8D 09 D4			sta GLOBALS.CHBAS
  1117
  1118 				; optimize OK (main.pas), line = 87
  1119
  1120 2390 A9 57			lda #$57
  1121 2392 85 88			sta :edx
  1122 2394 A9 ED			lda #$ED
  1123 2396 85 89			sta :edx+1
  1124 2398 A9 C0			lda #$C0
  1125 239A 85 8C			sta :ecx
  1126 239C A9 03			lda #$03
  1127 239E 85 8D			sta :ecx+1
  1128 23A0 A9 00			lda #$00
  1129 23A2 85 84			sta :eax
  1130 23A4 20 00 20			jsr @fill
  1131
  1132 				; optimize OK (main.pas), line = 89
  1133
  1134 23A7 A9 7C			lda #$7C
  1135 23A9 85 FD			sta GLOBALS.B1I
  1136
  1137 23AB			l_027A
  1138 				; --- ForToDoCondition
  1139
  1140 				; optimize OK (main.pas), line = 90
  1141
  1142 23AB A4 FD			ldy GLOBALS.B1I
  1143 23AD AD 0A D2			lda SYSTEM.RND
  1144 23B0 99 00 12			sta adr.ASTARS,y
  1145
  1146 				; optimize OK (main.pas), line = 91
  1147
  1148 23B3 29 03			and #$03
  1149 23B5 18 69 01			add #$01
  1150 23B8 99 7D 12			sta adr.ASPEED,y
  1151
  1152 				; --- ForToDoEpilog
  1153 23BB C6 FD			dec GLOBALS.B1I
  1154 23BD 10 EC			jpl l_027A
  1155 23BF			l_0288
  1156
  1157 				; optimize OK (main.pas), line = 94
  1158
  1159 23BF AD 02 D3			lda GLOBALS.PACTL
  1160 23C2 09 04			ora #$04
  1161 23C4 8D 02 D3			sta GLOBALS.PACTL
  1162 23C7 20 89 21			jsr SPRITES.INIT
  1163 23CA 20 2D 21			jsr GR.MODE2
  1164
  1165 				; optimize OK (main.pas), line = 95
  1166
  1167 23CD A9 00			lda #$00
  1168 23CF 8D 1A D0			sta GLOBALS.COLBK
  1169 23D2 8D 16 D0			sta GLOBALS.COLPF0
  1170 23D5 A9 0F			lda #$0F
  1171 23D7 8D 17 D0			sta GLOBALS.COLPF1
  1172 23DA A9 02			lda #$02
  1173 23DC 8D 18 D0			sta GLOBALS.COLPF2
  1174 23DF A9 00			lda #$00
  1175 23E1 8D 19 D0			sta GLOBALS.COLPF3
  1176
  1177 				; optimize OK (main.pas), line = 97
  1178
  1179 23E4 A9 06			lda #$06
  1180 23E6 85 03			sta SPRITES.BCANNONX
  1181 23E8 A9 03			lda #$03
  1182 23EA 85 8C			sta :ecx
  1183 23EC A5 02			lda SPRITES.BSHIPY
  1184 23EE 85 84			sta :eax
  1185 					.ifdef fmulinit
  1186 					fmulu_8
  1187 					els
  1188 23F0 20 48 20			imulCL
  1189 					eif
  1190 23F3 A5 84			lda :eax
  1191 23F5 85 04			sta SPRITES.WCANNONY
  1192 23F7 A5 85			lda :eax+1
  1193 23F9 85 05			sta SPRITES.WCANNONY+1
  1194
  1195 				; optimize FAIL ('SYS.SETVBI', main.pas), line = 99
  1196
  1197 23FB E8				inx
  1198 23FC A9 9C 95 98			mva <VBI :STACKORIGIN,x
  1199 2400 A9 22 95 A8			mva >VBI :STACKORIGIN+STACKWIDTH,x
  1200 2404 20 E1 20			jsr SYS.SETVBI
  1201
  1202 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 100
  1203
  1204 2407 E8				inx
  1205 2408 A9 27 95 98			mva <JOYHANDLER :STACKORIGIN,x
  1206 240C A9 23 95 A8			mva >JOYHANDLER :STACKORIGIN+STACKWIDTH,x
  1207 2410 20 F9 20			jsr SYS.SETDLI
  1208
  1209 				; optimize FAIL ('SYSTEM.PAUSE_0067', main.pas), line = 102
  1210
  1211 2413 20 C8 20			jsr SYSTEM.PAUSE_0067
  1212 2416 A9 3E			lda #$3E
  1213 2418 8D 00 D4			sta GLOBALS.DMACTL
  1214
  1215 				; ------------------------------------------------------------
  1216
  1217 = 0000			@FORTMP_0277	= $00
  1218 241B			@exit
  1219 					.ifdef @new
  1220 					lda <@VarData
  1221 					sta :ztmp
  1222 					lda >@VarData
  1223 					ldy #@VarDataSize-1
  1224 					jmp @FreeMem
  1225 					els
  1226 241B 60				rts						; ret
  1227 					eif
  1228 				.endl
  1229 241C			l_0007
  1230
  1231 				; optimize FAIL ('INIT', main.pas), line = 106
  1232
  1233 241C 20 80 23			jsr INIT
  1234
  1235 				; --- RepeatUntilProlog
  1236 241F			l_02DF
  1237
  1238 				; optimize OK (main.pas), line = 107
  1239
  1240 241F 4C 1F 24			jmp l_02DF
  1241
  1242 				; ------------------------------------------------------------
  1243
  1244 = 1000			PM_ADR	= $1000
  1245 = 1300			M0_ADR	= $1300
  1246 = 1400			P0_ADR	= $1400
  1247 = 1500			P1_ADR	= $1500
  1248 = 1000			GFX_SHIP_ADR	= $1000
  1249 = 0008			GFX_SHIP_SEG	= $08
  1250 = 1800			GFX_FONTS_ADR	= $1800
  1251 = 1100			DL_2	= $1100
  1252 = ED57			GAME_LMS	= $ED57
  1253 = E000			GAME_LMS_END	= $E000
  1254 = 0011			GAME_SCREEN_ROWS	= $11
  1255 = 0E0E			SHIP_COL	= $0E0E
  1256 = 0030			SHIP_LEFT_LIMIT	= $30
  1257 = 00B0			SHIP_RIGHT_LIMIT	= $B0
  1258 = 0020			SHIP_TOP_LIMIT	= $20
  1259 = 00A8			SHIP_BOTTOM_LIMIT	= $A8
  1260 = 0202			SHIP_X_STEP	= $0202
  1261 = 0004			SHIP_Y_STEP	= $04
  1262 = 0008			JOY_LEFT	= $08
  1263 = 0004			JOY_RIGHT	= $04
  1264 = 0002			JOY_UP	= $02
  1265 = 0001			JOY_DOWN	= $01
  1266 = 1200			adr.ASTARS	= $1200
  1267 2422			.var ASTARS	= adr.ASTARS .word
  1268 = 127D			adr.ASPEED	= $127D
  1269 2422			.var ASPEED	= adr.ASPEED .word
  1270 2422			@exit
  1271
  1272 2422 A2 00		@halt	ldx #$00
  1273 2424 9A				txs
  1274 					.ifdef MAIN.@DEFINES.ROMOFF
  1275 					inc portb
  1276 					.endif
  1277
  1278 2425 A0 01			ldy #$01
  1279
  1280 2427 60				rts
  1281
  1282 				; ------------------------------------------------------------
  1283
  1284 2428 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1285
  1286 				; ------------------------------------------------------------
  1287
  1288 2438			.local	@DEFINES
  1289 2438			ATARI
  1290 				.endl
  1291
  1292 2438			.local	@RESOURCE
  1293 				.endl
  1294
  1295 = 2438 00 12		ASTARS
  1295 = 243A 7D 12		ASPEED
  1295 				.endl							; MAIN
  1296
  1297 				; ------------------------------------------------------------
  1298 				; ------------------------------------------------------------
  1299
  1300 				.macro	UNITINITIALIZATION
  1301 				
  1302 					.ifdef MAIN.SYSTEM.@UnitInit
  1303 					jsr MAIN.SYSTEM.@UnitInit
  1304 					eif
  1305 				
  1306 					.ifdef MAIN.GLOBALS.@UnitInit
  1307 					jsr MAIN.GLOBALS.@UnitInit
  1308 					eif
  1309 				
  1310 					.ifdef MAIN.SYS.@UnitInit
  1311 					jsr MAIN.SYS.@UnitInit
  1312 					eif
  1313 				
  1314 					.ifdef MAIN.GR.@UnitInit
  1315 					jsr MAIN.GR.@UnitInit
  1316 					eif
  1317 				
  1318 					.ifdef MAIN.SPRITES.@UnitInit
  1319 					jsr MAIN.SPRITES.@UnitInit
  1320 					eif
  1321 				
  1322 					.ifdef MAIN.JOY.@UnitInit
  1323 					jsr MAIN.JOY.@UnitInit
  1324 					eif
  1325 				.endm
  1326
  1327 				; ------------------------------------------------------------
  1328
  1329 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1330 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1330 				SYSTEM: $2098..$20D2
  1331 					eif
  1332
  1333 					ift .SIZEOF(MAIN.GLOBALS) > 0
  1334 					.print 'GLOBALS: ',MAIN.GLOBALS,'..',MAIN.GLOBALS+.SIZEOF(MAIN.GLOBALS)-1
  1335 					eif
  1336
  1337 					ift .SIZEOF(MAIN.SYS) > 0
  1338 					.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
  1338 				SYS: $20D3..$212C
  1339 					eif
  1340
  1341 					ift .SIZEOF(MAIN.GR) > 0
  1342 					.print 'GR: ',MAIN.GR,'..',MAIN.GR+.SIZEOF(MAIN.GR)-1
  1342 				GR: $212D..$2138
  1343 					eif
  1344
  1345 					ift .SIZEOF(MAIN.SPRITES) > 0
  1346 					.print 'SPRITES: ',MAIN.SPRITES,'..',MAIN.SPRITES+.SIZEOF(MAIN.SPRITES)-1
  1346 				SPRITES: $2139..$21F6
  1347 					eif
  1348
  1349 					ift .SIZEOF(MAIN.JOY) > 0
  1350 					.print 'JOY: ',MAIN.JOY,'..',MAIN.JOY+.SIZEOF(MAIN.JOY)-1
  1350 				JOY: $21F7..$229B
  1351 					eif
  1352
  1353 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1353 				CODE: $2000..$2437
  1354
  1355 				; ------------------------------------------------------------
  1356
  1357 243C				.align $04
  1358
  1359 243C			DATAORIGIN
  1360 243C 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1361
  1362 = 0006			VARINITSIZE	= *-DATAORIGIN
  1363 = 0010			VARDATASIZE	= 16
  1364
  1365 = 244C			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1366
  1367 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1367 				DATA: $243C..$244C
  1368
  1369 02E0-02E1> 5C 20			run START
  1370
  1371 				; ------------------------------------------------------------
  1372
  1373 				.macro	STATICDATA
  1374 				.endm
  1375
  1376 					end
