mads 2.1.1
  1133 					opt l+
    98 = 0000				?EXTDETECT = 0
    99 = 0000				?VBXDETECT = 0
   100
   101 2075				RCASM 'res/gr_dl.asm' GLOBALS.DL_2 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 001A			len = .sizeof(_GLOBALS.DL_2)
     6 				mcpy	ift main.GLOBALS.DL_2+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 11 +  MWA #MAIN.GLOBALS.DL_2 ECX
    13 2088 A9 1A 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: const.inc
     1 = 1000			PM_ADR              = $1000;                      // players & missiles memory (2K) start address
     2 = 1300			M0_ADR              = PM_ADR + $300;              // missile 0 start memory address
     3 = 1400			P0_ADR              = PM_ADR + $400;              // player 0 start memory address
     4 = 1500			P1_ADR              = PM_ADR + $500;              // player 1 start memory address
     5 = 1000			GFX_SHIP_ADR        = $1000;                      // ship gfx memory start address, ship size = 20 bytes, 16 bytes for gfx and 4 bytes fo top/bottom empty rows
     6 = 0008			GFX_SHIP_SEG        = 8;                          // ship gfx 10 byte segment, 10B for P0 & 10B for P1
     8 = 0E0E			SHIP_COL            = $0e0e;
     9 = 0030			SHIP_LEFT_LIMIT     = 48;
    10 = 00B0			SHIP_RIGHT_LIMIT    = SHIP_LEFT_LIMIT + (16 * 8);
    11 = 0020			SHIP_TOP_LIMIT      = 32;
    12 = 00A8			SHIP_BOTTOM_LIMIT   = 8 * 21;
    13 = 0202			SHIP_X_STEP         = $0202;
    15 = 0008			JOY_LEFT            = %1000;
    16 = 0004			JOY_RIGHT           = %0100;
    17 = 0002			JOY_UP              = %0010;
    18 = 0001			JOY_DOWN            = %0001;
    20 = 1100			DL_2                = $1100;                      // display list memory start address for ANTIC mode 2
    21 = E000			GAME_LMS            = $e000;                      // Load Memory Scan address
     3 1100			dl2
     4 1100 F0 70 F0		    .byte $f0,$70,$f0
     5 1103 42 00 E0		    .byte $42,a(GAME_LMS)
     6 1106 02 02 02 02 02 02 + :17 .byte 2
     7 1117 41 00 11		    .byte $41,a(dl2)
    23 					.print '$R RCASM   ',main.GLOBALS.DL_2,'..',main.GLOBALS.DL_2+len-1," 'res/gr_dl.asm'"
    23 				$R RCASM   $1100..$1119 'res/gr_dl.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: main.a65
   102 20B0				RCDATA 'res/gfx_ship.bin' GLOBALS.GFX_SHIP_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0010			len = .filesize('res/gfx_ship.bin')
    28 20B0				org main.GLOBALS.GFX_SHIP_ADR
    30 1000-100F> 70 7B 1E 3F + 	ins 'res/gfx_ship.bin'
    32 					.print '$R RCDATA  ',main.GLOBALS.GFX_SHIP_ADR,'..',*-1," 'res/gfx_ship.bin'"
    32 				$R RCDATA  $1000..$100F 'res/gfx_ship.bin'
Source: main.a65
   103 				.endl
   104
   105 				; ------------------------------------------------------------
   106
   107 1010				org CODEORIGIN
   108
   109 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
Source: main.a65
   110
   111 				; ------------------------------------------------------------
   112
   113 2000			RTLIB
   114 2000				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
   166 					opt l+
   115
   116 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   116 				ZPAGE: $0080..$00D7
   117
   118 				.print 'RTLIB: ',RTLIB,'..',*-1
   118 				RTLIB: $2000..$20C7
   119
   120 				; ------------------------------------------------------------
   121
   122 20C8			START
   123 20C8 BA				tsx
   124 20C9 8E 31 24			stx MAIN.@halt+1
   125
   126 					.ifdef fmulinit
   127 					fmulinit
   128 					eif
   129
   130 = 000E			VLEN	= VARDATASIZE-VARINITSIZE
   131 = 2452			VADR	= DATAORIGIN+VARINITSIZE
   132
   133 					ift VADR > $BFFF
   134 					ert 'Invalid memory address range ',VADR
   135 					eli (VLEN>0) && (VLEN<=256)
   136 20CC A2 F2			ldx #256-VLEN
   137 20CE A9 00			lda #$00
   138 20D0 9D 60 23 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   139 					eli VLEN>0
   140 					@fill #VADR #VLEN #$00
   141 					eif
   142
   143 20D6 A9 60 85 82 A9 24 + 	mwa #PROGRAMSTACK psptr
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 					icl 'atari\romoff.asm'
   147 					.endif
   148
   149 20DE A2 0F			ldx #$0F					; DOS II+/D ParamStr
   150 20E0 BD 40 03 9D 36 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   151
   152 20E9 E8				inx						; X = 0
   153 20EA 86 90			stx bp						; BP = 0
   154
   155 20EC 8E 08 D2			stx audctl					; reset POKEY
   156 20EF A9 03			lda #3
   157 20F1 8D 0F D2			sta skctl
   158
   159 20F4 CA				dex						; X = 255
   160
   161 20F5				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
    11 20F5 20 C0 21			jsr MAIN.SYS.@UnitInit
    15 20F8 20 CC 21			jsr MAIN.GR.@UnitInit
    19 20FB 20 93 22			jsr MAIN.SPRITES.@UnitInit
    23 20FE 20 27 23			jsr MAIN.JOY.@UnitInit
   162
   163 2101			.local	MAIN						; PROCEDURE
   164
   165 2101 4C 2A 24			jmp l_0007
   166
   167 				; ------------------------------------------------------------
   168
   169 2104			.local	SYSTEM						; UNIT
   170
   171 2104			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   172
   173 				; ------------------------------------------------------------
   174
   175 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   176 				; as Pointer
   177 2104 B5 98			lda :STACKORIGIN,x
   178 2106 85 8C			sta VALUE
   179 2108 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   180 210A 85 8D			sta VALUE+1
   181 210C CA				dex
   182
   183 				; ------------------------------------------------------------
   184
   185 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   186 				; as Pointer
   187 210D B5 98			lda :STACKORIGIN,x
   188 210F 85 88			sta A
   189 2111 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   190 2113 85 89			sta A+1
   191 2115 CA				dex
   192
   193 				; ---------------------  ASM Block 022  ---------------------
   194
   195 2116 A0 00			ldy #0
   196 2118 A5 8C 91 88			mva value (edx),y
   197 211C C8				iny
   198 211D A5 8D 91 88			mva value+1 (edx),y
   199
   200
   201 				; ------------------------------------------------------------
   202
   203 = 0088			A	= edx
   204 = 008C			VALUE	= ecx
   205 2121			@exit
   206 					.ifdef @new
   207 					lda <@VarData
   208 					sta :ztmp
   209 					lda >@VarData
   210 					ldy #@VarDataSize-1
   211 					jmp @FreeMem
   212 					els
   213 2121 60				rts						; ret
   214 					eif
   215 				.endl
   216
   217 2122			.local	FILLBYTE_0049					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   218
   219 				; ------------------------------------------------------------
   220
   221 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   222 				; as Pointer
   223 2122 B5 98			lda :STACKORIGIN,x
   224 2124 85 84			sta VALUE
   225 2126 CA				dex
   226
   227 				; ------------------------------------------------------------
   228
   229 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   230 				; as Pointer
   231 2127 B5 98			lda :STACKORIGIN,x
   232 2129 85 8C			sta COUNT
   233 212B B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   234 212D 85 8D			sta COUNT+1
   235 212F CA				dex
   236
   237 				; ------------------------------------------------------------
   238
   239 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   240 				; as Pointer
   241 2130 B5 98			lda :STACKORIGIN,x
   242 2132 85 88			sta A
   243 2134 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   244 2136 85 89			sta A+1
   245 2138 CA				dex
   246
   247 				; ---------------------  ASM Block 029  ---------------------
   248
   249 2139 20 80 20			jsr @fill
   250
   251
   252 				; ------------------------------------------------------------
   253
   254 = 0088			A	= edx
   255 = 008C			COUNT	= ecx
   256 = 0084			VALUE	= eax
   257 213C			@exit
   258 					.ifdef @new
   259 					lda <@VarData
   260 					sta :ztmp
   261 					lda >@VarData
   262 					ldy #@VarDataSize-1
   263 					jmp @FreeMem
   264 					els
   265 213C 60				rts						; ret
   266 					eif
   267 				.endl
   268
   269 213D			.local	MOVE_0053					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   270
   271 				; ------------------------------------------------------------
   272
   273 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   274 				; as Pointer
   275 213D B5 98			lda :STACKORIGIN,x
   276 213F 85 84			sta COUNT
   277 2141 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   278 2143 85 85			sta COUNT+1
   279 2145 CA				dex
   280
   281 				; ------------------------------------------------------------
   282
   283 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   284 				; as Pointer
   285 2146 B5 98			lda :STACKORIGIN,x
   286 2148 85 8C			sta DEST
   287 214A B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   288 214C 85 8D			sta DEST+1
   289 214E CA				dex
   290
   291 				; ------------------------------------------------------------
   292
   293 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   294 				; as Pointer
   295 214F B5 98			lda :STACKORIGIN,x
   296 2151 85 88			sta SOURCE
   297 2153 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   298 2155 85 89			sta SOURCE+1
   299 2157 CA				dex
   300
   301 				; ---------------------  ASM Block 031  ---------------------
   302
   303 2158 20 2B 20			jsr @move
   304
   305
   306 				; ------------------------------------------------------------
   307
   308 = 0088			SOURCE	= edx
   309 = 008C			DEST	= ecx
   310 = 0084			COUNT	= eax
   311 215B			@exit
   312 					.ifdef @new
   313 					lda <@VarData
   314 					sta :ztmp
   315 					lda >@VarData
   316 					ldy #@VarDataSize-1
   317 					jmp @FreeMem
   318 					els
   319 215B 60				rts						; ret
   320 					eif
   321 				.endl
   322
   323 215C			.local	PAUSE_0071					; PROCEDURE | ASSEMBLER | OVERLOAD
   324
   325 				; ---------------------  ASM Block 039  ---------------------
   326
   327 215C A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   328
   329 2162			@exit
   330 					.ifdef @new
   331 					lda <@VarData
   332 					sta :ztmp
   333 					lda >@VarData
   334 					ldy #@VarDataSize-1
   335 					jmp @FreeMem
   336 					els
   337 2162 60				rts						; ret
   338 					eif
   339 				.endl
   340
   341 				; ------------------------------------------------------------
   342
   343 = 0101			__PORTB_BANKS	= $0101
   344 = 0648			M_PI_2	= $0648
   345 = 0192			D_PI_2	= $0192
   346 = 0004			D_PI_180	= $04
   347 = 0000			MGTIA	= $00
   348 = 0080			MVBXE	= $80
   349 = 0000			VBXE_XDLADR	= $00
   350 = 0100			VBXE_BCBADR	= $0100
   351 = 1000			VBXE_MAPADR	= $1000
   352 = 5000			VBXE_OVRADR	= $5000
   353 = B000			VBXE_WINDOW	= $B000
   354 = 0000			IDLI	= $00
   355 = 0001			IVBL	= $01
   356 = 00FE			CH_DELCHR	= $FE
   357 = 009B			CH_ENTER	= $9B
   358 = 001B			CH_ESC	= $1B
   359 = 001C			CH_CURS_UP	= $1C
   360 = 001D			CH_CURS_DOWN	= $1D
   361 = 001E			CH_CURS_LEFT	= $1E
   362 = 001F			CH_CURS_RIGHT	= $1F
   363 = 007F			CH_TAB	= $7F
   364 = 009B			CH_EOL	= $9B
   365 = 007D			CH_CLR	= $7D
   366 = 00FD			CH_BELL	= $FD
   367 = 007E			CH_DEL	= $7E
   368 = 009C			CH_DELLINE	= $9C
   369 = 009D			CH_INSLINE	= $9D
   370 = 0000			COLOR_BLACK	= $00
   371 = 000E			COLOR_WHITE	= $0E
   372 = 0032			COLOR_RED	= $32
   373 = 0096			COLOR_CYAN	= $96
   374 = 0068			COLOR_VIOLET	= $68
   375 = 00C4			COLOR_GREEN	= $C4
   376 = 0074			COLOR_BLUE	= $74
   377 = 00EE			COLOR_YELLOW	= $EE
   378 = 0028			COLOR_ORANGE	= $28
   379 = 00E4			COLOR_BROWN	= $E4
   380 = 003C			COLOR_LIGHTRED	= $3C
   381 = 0004			COLOR_GRAY1	= $04
   382 = 0006			COLOR_GRAY2	= $06
   383 = 000A			COLOR_GRAY3	= $0A
   384 = 00CC			COLOR_LIGHTGREEN	= $CC
   385 = 007C			COLOR_LIGHTBLUE	= $7C
   386 = 0004			FMOPENREAD	= $04
   387 = 0008			FMOPENWRITE	= $08
   388 = 0009			FMOPENAPPEND	= $09
   389 = 000C			FMOPENREADWRITE	= $0C
   390 = 244C			SCREENWIDTH	= DATAORIGIN+$0000
   391 = 244E			SCREENHEIGHT	= DATAORIGIN+$0002
   392 = 2450			DATESEPARATOR	= DATAORIGIN+$0004
   393 = D014			TVSYSTEM	= $D014
   394 = D20A			RND	= $D20A
   395 = 02C0			adr.PALETTE	= $02C0
   396 2163			.var PALETTE	= adr.PALETTE .word
   397 = D012			adr.HPALETTE	= $D012
   398 2163			.var HPALETTE	= adr.HPALETTE .word
   399 = 2451			FILEMODE	= DATAORIGIN+$0005
   400 = 2452			GRAPHMODE	= DATAORIGIN+$0006
   401 = 2453			IORESULT	= DATAORIGIN+$0007
   402 = 2454			EOLN	= DATAORIGIN+$0008
   403 = 2455			RNDSEED	= DATAORIGIN+$0009
   404
   405 = 2163 C0 02		PALETTE
   405 = 2165 12 D0		HPALETTE
   405 				.endl							; UNIT SYSTEM
   406
   407 				; ------------------------------------------------------------
   408
   409 2167			.local	GLOBALS						; UNIT
   410
   411 				; ------------------------------------------------------------
   412
   413 = 1000			PM_ADR	= $1000
   414 = 1300			M0_ADR	= $1300
   415 = 1400			P0_ADR	= $1400
   416 = 1500			P1_ADR	= $1500
   417 = 1000			GFX_SHIP_ADR	= $1000
   418 = 0008			GFX_SHIP_SEG	= $08
   419 = 0E0E			SHIP_COL	= $0E0E
   420 = 0030			SHIP_LEFT_LIMIT	= $30
   421 = 00B0			SHIP_RIGHT_LIMIT	= $B0
   422 = 0020			SHIP_TOP_LIMIT	= $20
   423 = 00A8			SHIP_BOTTOM_LIMIT	= $A8
   424 = 0202			SHIP_X_STEP	= $0202
   425 = 0008			JOY_LEFT	= $08
   426 = 0004			JOY_RIGHT	= $04
   427 = 0002			JOY_UP	= $02
   428 = 0001			JOY_DOWN	= $01
   429 = 1100			DL_2	= $1100
   430 = E000			GAME_LMS	= $E000
   431 = 0014			RTCLOK	= $14
   432 = D000			HPOSP0	= $D000
   433 = D001			HPOSP1	= $D001
   434 = D004			HPOSM0	= $D004
   435 = D005			HPOSM1	= $D005
   436 = D006			HPOSM2	= $D006
   437 = D007			HPOSM3	= $D007
   438 = D008			SIZEP0	= $D008
   439 = D009			SIZEP1	= $D009
   440 = D00A			SIZEP2	= $D00A
   441 = D00B			SIZEP3	= $D00B
   442 = D00C			SIZEM	= $D00C
   443 = D011			GRAFM	= $D011
   444 = D012			COLPM0	= $D012
   445 = D013			COLPM1	= $D013
   446 = D014			COLPM2	= $D014
   447 = D015			COLPM3	= $D015
   448 = D017			COLPF1	= $D017
   449 = D018			COLPF2	= $D018
   450 = D01A			COLBK	= $D01A
   451 = D01B			PRIOR	= $D01B
   452 = D01D			GRACTL	= $D01D
   453 = D20A			RND	= $D20A
   454 = D300			PORTA	= $D300
   455 = D301			PORTB	= $D301
   456 = D302			PACTL	= $D302
   457 = D400			DMACTL	= $D400
   458 = D402			DLIST	= $D402
   459 = D407			PMBASE	= $D407
   460 = D40A			WSYNC	= $D40A
   461 = D40B			VCOUNT	= $D40B
   462 = D40E			NMIEN	= $D40E
   463 = FFFA			NMIVEC	= $FFFA
   464 = D000			HPOSP01	= $D000
   465 = D008			SIZEP01	= $D008
   466 = D012			COLPM01	= $D012
   467 = 00FF			BMASK1	= $FF
   468 = 00FE			BMASK2	= $FE
   469 = 00FD			B1I	= $FD
   470 = 00FC			B2I	= $FC
   471
   472 				.endl							; UNIT GLOBALS
   473
   474 				; ------------------------------------------------------------
   475
   476 2167			.local	SYS						; UNIT
   477
   478 2167			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
   479
   480 				; ---------------------  ASM Block 049  ---------------------
   481
   482
   483 				      bit NMIST \ bpl vbi     ; check kind of interrupt
   483 2167 2C 0F D4		      BIT NMIST 
   483 216A 10 03		 BPL VBI     
   484 = 216C			.def  :__dlijmp
   485 216C 4C 74 21		      jmp __off               ; VDSLST
   486 216F E6 14		vbi:  inc RTCLOK+2
   487 = 2171			.def  :__vbijmp
   488 2171 4C 74 21		      jmp __off               ; VBIVEC
   489 = 2174			.def  :__off
   490
   491 2174 40				rti						; ret
   492 				.endl
   493
   494 2175			.local	SETVBI						; PROCEDURE | ASSEMBLER
   495
   496 				; ------------------------------------------------------------
   497
   498 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   499 				; as Pointer
   500 2175 B5 98			lda :STACKORIGIN,x
   501 2177 8D 57 24			sta A
   502 217A B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   503 217C 8D 58 24			sta A+1
   504 217F CA				dex
   505
   506 				; ---------------------  ASM Block 050  ---------------------
   507
   508
   509 2180 AD 57 24 8D 72 21 +   mwa a __vbijmp+1
   510
   511
   512 				; ------------------------------------------------------------
   513
   514 = 2457			A	= DATAORIGIN+$000B
   515
   516 = 2457			@VarData	= A
   517 = 0002			@VarDataSize	= 2
   518
   519 218C			@exit
   520 					.ifdef @new
   521 					lda <@VarData
   522 					sta :ztmp
   523 					lda >@VarData
   524 					ldy #@VarDataSize-1
   525 					jmp @FreeMem
   526 					els
   527 218C 60				rts						; ret
   528 					eif
   529 				.endl
   530
   531 218D			.local	SETDLI						; PROCEDURE | ASSEMBLER
   532
   533 				; ------------------------------------------------------------
   534
   535 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   536 				; as Pointer
   537 218D B5 98			lda :STACKORIGIN,x
   538 218F 8D 59 24			sta A
   539 2192 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   540 2194 8D 5A 24			sta A+1
   541 2197 CA				dex
   542
   543 				; ---------------------  ASM Block 051  ---------------------
   544
   545
   546 2198 AD 59 24 8D 6D 21 +   mwa a __dlijmp+1
   547
   548
   549 				; ------------------------------------------------------------
   550
   551 = 2459			A	= DATAORIGIN+$000D
   552
   553 = 2459			@VarData	= A
   554 = 0002			@VarDataSize	= 2
   555
   556 21A4			@exit
   557 					.ifdef @new
   558 					lda <@VarData
   559 					sta :ztmp
   560 					lda >@VarData
   561 					ldy #@VarDataSize-1
   562 					jmp @FreeMem
   563 					els
   564 21A4 60				rts						; ret
   565 					eif
   566 				.endl
   567
   568 21A5			.local	SYSTEMOFF					; PROCEDURE
   569
   570 				; ---------------------  ASM Block 054  ---------------------
   571
   572 21A5 78			 sei 
   573
   574 				; optimize OK (SYS), line = 63
   575
   576 21A6 A9 00			lda #$00
   577 21A8 8D 0E D4			sta GLOBALS.NMIEN
   578 21AB A9 FE			lda #$FE
   579 21AD 8D 01 D3			sta GLOBALS.PORTB
   580 21B0 A9 67			lda <NMI
   581 21B2 8D FA FF			sta GLOBALS.NMIVEC
   582 21B5 A9 21			lda >NMI
   583 21B7 8D FB FF			sta GLOBALS.NMIVEC+1
   584 21BA A9 C0			lda #$C0
   585 21BC 8D 0E D4			sta GLOBALS.NMIEN
   586 21BF			@exit
   587 					.ifdef @new
   588 					lda <@VarData
   589 					sta :ztmp
   590 					lda >@VarData
   591 					ldy #@VarDataSize-1
   592 					jmp @FreeMem
   593 					els
   594 21BF 60				rts						; ret
   595 					eif
   596 				.endl
   597
   598 				; ------------------------------------------------------------
   599 				; ------------------------------------------------------------
   600 21C0			@UnitInit
   601
   602 21C0 60				rts
   603
   604 				; ------------------------------------------------------------
   605
   606 				.endl							; UNIT SYS
   607
   608 				; ------------------------------------------------------------
   609
   610 21C1			.local	GR						; UNIT
   611
   612 21C1			.local	MODE2						; PROCEDURE
   613
   614 				; optimize OK (GR), line = 17
   615
   616 21C1 A9 00			lda #$00
   617 21C3 8D 02 D4			sta GLOBALS.DLIST
   618 21C6 A9 11			lda #$11
   619 21C8 8D 03 D4			sta GLOBALS.DLIST+1
   620 21CB			@exit
   621 					.ifdef @new
   622 					lda <@VarData
   623 					sta :ztmp
   624 					lda >@VarData
   625 					ldy #@VarDataSize-1
   626 					jmp @FreeMem
   627 					els
   628 21CB 60				rts						; ret
   629 					eif
   630 				.endl
   631
   632 				; ------------------------------------------------------------
   633 				; ------------------------------------------------------------
   634 21CC			@UnitInit
   635
   636 21CC 60				rts
   637
   638 				; ------------------------------------------------------------
   639
   640 				.endl							; UNIT GR
   641
   642 				; ------------------------------------------------------------
   643
   644 21CD			.local	SPRITES						; UNIT
   645
   646 21CD			.local	COPYSHIP					; PROCEDURE
   647
   648 				; optimize OK (SPRITES), line = 25
   649
   650 21CD A5 03			lda BSHIPYCLEAR
   651 21CF 85 92			sta :bp2
   652 21D1 A9 14			lda #$14
   653 21D3 85 93			sta :bp2+1
   654 21D5 A0 00			ldy #$00
   655 21D7 98				tya
   656 21D8 91 92			sta (:bp2),y
   657 21DA C8				iny
   658 21DB 91 92			sta (:bp2),y
   659 21DD A5 03			lda BSHIPYCLEAR
   660 21DF 85 92			sta :bp2
   661 21E1 A9 15			lda #$15
   662 21E3 85 93			sta :bp2+1
   663 21E5 A0 00			ldy #$00
   664 21E7 98				tya
   665 21E8 91 92			sta (:bp2),y
   666 21EA C8				iny
   667 21EB 91 92			sta (:bp2),y
   668
   669 				; optimize OK (SPRITES), line = 26
   670
   671 21ED A5 02			lda BSHIPY
   672 21EF 85 8C			sta :ecx
   673 21F1 A9 14			lda #$14
   674 21F3 85 8D			sta :ecx+1
   675 21F5 A9 00			lda #$00
   676 21F7 85 88			sta :edx
   677 21F9 A9 10			lda #$10
   678 21FB 85 89			sta :edx+1
   679 21FD A9 08			lda #$08
   680 21FF 85 84			sta :eax
   681 2201 A9 00			lda #$00
   682 2203 85 85			sta :eax+1
   683 2205 20 2B 20			jsr @move
   684
   685 				; optimize OK (SPRITES), line = 27
   686
   687 2208 A5 02			lda BSHIPY
   688 220A 85 8C			sta :ecx
   689 220C A9 15			lda #$15
   690 220E 85 8D			sta :ecx+1
   691 2210 A9 08			lda #$08
   692 2212 85 88			sta :edx
   693 2214 A9 10			lda #$10
   694 2216 85 89			sta :edx+1
   695 2218 A9 08			lda #$08
   696 221A 85 84			sta :eax
   697 221C A9 00			lda #$00
   698 221E 85 85			sta :eax+1
   699 2220 20 2B 20			jsr @move
   700 2223			@exit
   701 					.ifdef @new
   702 					lda <@VarData
   703 					sta :ztmp
   704 					lda >@VarData
   705 					ldy #@VarDataSize-1
   706 					jmp @FreeMem
   707 					els
   708 2223 60				rts						; ret
   709 					eif
   710 				.endl
   711
   712 2224			.local	INIT						; PROCEDURE
   713
   714 				; optimize OK (SPRITES), line = 32
   715
   716 2224				.LOCAL
   717 2224 A0 00			ldy #$00
   718 2226 98				tya
   719 2227 99 00 13 99 80 13 + fill	:10 sta $1300+#*$80,y
   720 2245 C8				iny
   721 2246 10 DF			bpl fill
   722 					.ENDL
   723
   724 				; optimize OK (SPRITES), line = 33
   725
   726 2248 A0 70			ldy #256-$90
   727 224A A9 FF			lda #$FF
   728 224C 99 B0 12 C8 D0 FA		sta:rne $1320+$90-256,y+
   729
   730 				; optimize OK (SPRITES), line = 35
   731
   732 2252 A9 10			lda #$10
   733 2254 8D 07 D4			sta GLOBALS.PMBASE
   734
   735 				; optimize OK (SPRITES), line = 36
   736
   737 2257 A9 0A			lda #$0A
   738 2259 8D 15 D0			sta GLOBALS.COLPM3
   739 225C A9 0E			lda #$0E
   740 225E 8D 12 D0			sta GLOBALS.COLPM01
   741 2261 8D 13 D0			sta GLOBALS.COLPM01+1
   742
   743 				; optimize OK (SPRITES), line = 37
   744
   745 2264 A9 50			lda #$50
   746 2266 85 02			sta BSHIPY
   747 2268 85 03			sta BSHIPYCLEAR
   748
   749 				; optimize OK (SPRITES), line = 38
   750
   751 226A A9 30			lda #$30
   752 226C 85 00			sta BHPOSP0
   753 226E A9 38			lda #$38
   754 2270 85 01			sta BHPOSP1
   755 2272 A5 00			lda WSHIPX
   756 2274 8D 00 D0			sta GLOBALS.HPOSP01
   757 2277 A5 01			lda WSHIPX+1
   758 2279 8D 01 D0			sta GLOBALS.HPOSP01+1
   759
   760 				; optimize OK (SPRITES), line = 39
   761
   762 227C A9 00			lda #$00
   763 227E 8D 08 D0			sta GLOBALS.SIZEP01
   764 2281 8D 09 D0			sta GLOBALS.SIZEP01+1
   765 2284 8D 0C D0			sta GLOBALS.SIZEM
   766 2287 8D 1B D0			sta GLOBALS.PRIOR
   767 228A A9 03			lda #$03
   768 228C 8D 1D D0			sta GLOBALS.GRACTL
   769
   770 				; optimize FAIL ('COPYSHIP', SPRITES), line = 41
   771
   772 228F 20 CD 21			jsr COPYSHIP
   773 2292			@exit
   774 					.ifdef @new
   775 					lda <@VarData
   776 					sta :ztmp
   777 					lda >@VarData
   778 					ldy #@VarDataSize-1
   779 					jmp @FreeMem
   780 					els
   781 2292 60				rts						; ret
   782 					eif
   783 				.endl
   784
   785 				; ------------------------------------------------------------
   786 				; ------------------------------------------------------------
   787 2293			@UnitInit
   788
   789 2293 60				rts
   790
   791 				; ------------------------------------------------------------
   792
   793 = 0000			BHPOSP0	= $00
   794 = 0001			BHPOSP1	= $01
   795 = 0002			BSHIPY	= $02
   796 = 0003			BSHIPYCLEAR	= $03
   797 = 0000			WSHIPX	= $00
   798
   799 				.endl							; UNIT SPRITES
   800
   801 				; ------------------------------------------------------------
   802
   803 2294			.local	JOY						; UNIT
   804
   805 2294			.local	MOVESHIP					; PROCEDURE
   806
   807 				; optimize OK (JOY), line = 20
   808
   809 2294 A9 0C			lda #$0C
   810 2296 85 FF			sta GLOBALS.BMASK1
   811
   812 				; optimize OK (JOY), line = 21
   813
   814 2298 A9 01			lda #$01
   815 229A 85 FD			sta GLOBALS.B1I
   816
   817 229C			l_0110
   818 				; --- ForToDoCondition
   819
   820 				; optimize OK (JOY), line = 22
   821
   822 229C A5 04			lda JOYDIRECTION
   823 229E 25 FF			and GLOBALS.BMASK1
   824 22A0 8D 5B 24			sta @CASETMP_0003
   825 22A3 C9 04			cmp #$04
   826 22A5 D0 20			jne l_012F
   827 22A7			@
   828
   829 				; optimize OK (JOY), line = 24
   830
   831 22A7 A5 01			lda SPRITES.BHPOSP1
   832 22A9 C9 B0			cmp #$B0
   833 22AB B0 17			jcs l_0141
   834
   835 				; optimize OK (JOY), line = 25
   836
   837 22AD A5 00			lda SPRITES.WSHIPX
   838 22AF 18 69 02			add #$02
   839 22B2 85 00			sta SPRITES.WSHIPX
   840 22B4 A5 01			lda SPRITES.WSHIPX+1
   841 22B6 69 02			adc #$02
   842 22B8 85 01			sta SPRITES.WSHIPX+1
   843 22BA A5 00			lda SPRITES.WSHIPX
   844 22BC 8D 00 D0			sta GLOBALS.HPOSP01
   845 22BF A5 01			lda SPRITES.WSHIPX+1
   846 22C1 8D 01 D0			sta GLOBALS.HPOSP01+1
   847 22C4			l_0141
   848
   849 22C4 4C 1B 23			jmp a_0003
   850 22C7			l_012F
   851 22C7 C9 08			cmp #$08
   852 22C9 D0 20			jne l_0153
   853 22CB			@
   854
   855 				; optimize OK (JOY), line = 29
   856
   857 22CB A5 00			lda SPRITES.BHPOSP0
   858 22CD C9 31			cmp #$31
   859 22CF 90 17			jcc l_0165
   860
   861 				; optimize OK (JOY), line = 30
   862
   863 22D1 A5 00			lda SPRITES.WSHIPX
   864 22D3 38 E9 02			sub #$02
   865 22D6 85 00			sta SPRITES.WSHIPX
   866 22D8 A5 01			lda SPRITES.WSHIPX+1
   867 22DA E9 02			sbc #$02
   868 22DC 85 01			sta SPRITES.WSHIPX+1
   869 22DE A5 00			lda SPRITES.WSHIPX
   870 22E0 8D 00 D0			sta GLOBALS.HPOSP01
   871 22E3 A5 01			lda SPRITES.WSHIPX+1
   872 22E5 8D 01 D0			sta GLOBALS.HPOSP01+1
   873 22E8			l_0165
   874
   875 22E8 4C 1B 23			jmp a_0003
   876 22EB			l_0153
   877 22EB C9 02			cmp #$02
   878 22ED D0 18			jne l_0177
   879 22EF			@
   880
   881 				; optimize OK (JOY), line = 34
   882
   883 22EF A5 02			lda SPRITES.BSHIPY
   884 22F1 C9 21			cmp #$21
   885 22F3 90 0F			jcc l_0189
   886
   887 				; optimize OK (JOY), line = 35
   888
   889 22F5 18 69 06			add #$06
   890 22F8 85 03			sta SPRITES.BSHIPYCLEAR
   891
   892 				; optimize OK (JOY), line = 36
   893
   894 22FA A5 02			lda SPRITES.BSHIPY
   895 22FC 38 E9 02			sub #$02
   896 22FF 85 02			sta SPRITES.BSHIPY
   897 2301 20 CD 21			jsr SPRITES.COPYSHIP
   898 2304			l_0189
   899
   900 2304 4C 1B 23			jmp a_0003
   901 2307			l_0177
   902 2307 C9 01			cmp #$01
   903 2309 D0 10			jne l_01A1
   904 230B			@
   905
   906 				; optimize OK (JOY), line = 40
   907
   908 230B A5 02			lda SPRITES.BSHIPY
   909 230D C9 A8			cmp #$A8
   910 230F B0 0A			jcs l_01B3
   911
   912 				; optimize OK (JOY), line = 41
   913
   914 2311 85 03			sta SPRITES.BSHIPYCLEAR
   915
   916 				; optimize OK (JOY), line = 42
   917
   918 2313 18 69 02			add #$02
   919 2316 85 02			sta SPRITES.BSHIPY
   920 2318 20 CD 21			jsr SPRITES.COPYSHIP
   921 231B			l_01B3
   922
   923 231B			l_01A1
   924 231B			a_0003
   925
   926 				; optimize OK (JOY), line = 46
   927
   928 231B A9 03			lda #$03
   929 231D 85 FF			sta GLOBALS.BMASK1
   930
   931 				; --- ForToDoEpilog
   932 231F C6 FD			dec GLOBALS.B1I
   933 2321 30 03 4C 9C 22		jpl l_0110
   934 2326			l_011E
   935
   936 				; ------------------------------------------------------------
   937
   938 = 0000			@FORTMP_010D	= $00
   939 = 245B			@CASETMP_0003	= DATAORIGIN+$000F
   940
   941 = 245B			@VarData	= @CASETMP_0003
   942 = 0001			@VarDataSize	= 1
   943
   944 2326			@exit
   945 					.ifdef @new
   946 					lda <@VarData
   947 					sta :ztmp
   948 					lda >@VarData
   949 					ldy #@VarDataSize-1
   950 					jmp @FreeMem
   951 					els
   952 2326 60				rts						; ret
   953 					eif
   954 				.endl
   955
   956 				; ------------------------------------------------------------
   957 				; ------------------------------------------------------------
   958 2327			@UnitInit
   959
   960 2327 60				rts
   961
   962 				; ------------------------------------------------------------
   963
   964 = 0004			JOYDIRECTION	= $04
   965
   966 				.endl							; UNIT JOY
   967
   968 2328			.local	VBI						; PROCEDURE | INTERRUPT
   969
   970 				; ---------------------  ASM Block 055  ---------------------
   971
   972 2328 48 8A 48 98 48	 phr 
   973
   974 				; ---------------------  ASM Block 056  ---------------------
   975
   976 232D 68 A8 68 AA 68	 plr 
   977 2332 40				rti						; ret
   978 				.endl
   979
   980 2333			.local	JOYHANDLER					; PROCEDURE | INTERRUPT
   981
   982 				; ---------------------  ASM Block 057  ---------------------
   983
   984 2333 48 8A 48 98 48	 phr 
   985
   986 				; ---------------------  ASM Block 058  ---------------------
   987
   988 2338 8D 0A D4		 sta WSYNC 
   989
   990 				; optimize OK (main.pas), line = 26
   991
   992 233B A9 0F			lda #$0F
   993 233D 8D 1A D0			sta GLOBALS.COLBK
   994
   995 				; optimize OK (main.pas), line = 28
   996
   997 2340 AD 00 D3			lda GLOBALS.PORTA
   998 2343 85 04			sta JOY.JOYDIRECTION
   999
  1000 				; optimize OK (main.pas), line = 29
  1001
  1002 2345 29 0F			and #$0F
  1003 2347 C9 0F			cmp #$0F
  1004 2349 F0 03			jeq l_01F7
  1005 234B 20 94 22			jsr JOY.MOVESHIP
  1006 234E			l_01F7
  1007
  1008 				; optimize OK (main.pas), line = 31
  1009
  1010 234E A9 00			lda #$00
  1011 2350 8D 1A D0			sta GLOBALS.COLBK
  1012
  1013 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 33
  1014
  1015 2353 E8				inx
  1016 2354 AD 5E 24 95 98		mva PSTARS :STACKORIGIN,x
  1017 2359 AD 5F 24 95 A8		mva PSTARS+1 :STACKORIGIN+STACKWIDTH,x
  1018 235E 20 8D 21			jsr SYS.SETDLI
  1019
  1020 				; ---------------------  ASM Block 059  ---------------------
  1021
  1022 2361 68 A8 68 AA 68	 plr 
  1023 2366 40				rti						; ret
  1024 				.endl
  1025
  1026 2367			.local	STARS						; PROCEDURE | INTERRUPT
  1027
  1028 				; ---------------------  ASM Block 060  ---------------------
  1029
  1030 2367 48 8A 48 98 48	 phr 
  1031
  1032 				; optimize OK (main.pas), line = 42
  1033
  1034 236C A9 7C			lda #$7C
  1035 236E 85 FD			sta GLOBALS.B1I
  1036
  1037 2370			l_020F
  1038 				; --- ForToDoCondition
  1039
  1040 				; ---------------------  ASM Block 061  ---------------------
  1041
  1042 2370 8D 0A D4		 sta WSYNC 
  1043
  1044 				; optimize OK (main.pas), line = 44
  1045
  1046 2373 A4 FD			ldy GLOBALS.B1I
  1047 2375 B9 00 12			lda adr.ASTARS,y
  1048 2378 8D 07 D0			sta GLOBALS.HPOSM3
  1049
  1050 				; optimize OK (main.pas), line = 45
  1051
  1052 237B B9 00 12			lda adr.ASTARS,y
  1053 237E 38 F9 7D 12			sub adr.ASPEED,y
  1054 2382 99 00 12			sta adr.ASTARS,y
  1055
  1056 				; optimize OK (main.pas), line = 46
  1057
  1058 2385 AD 0A D2			lda SYSTEM.RND
  1059 2388 8D 15 D0			sta GLOBALS.COLPM3
  1060
  1061 				; --- ForToDoEpilog
  1062 238B C6 FD			dec GLOBALS.B1I
  1063 238D 10 E1			jpl l_020F
  1064 238F			l_021D
  1065
  1066 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 49
  1067
  1068 238F E8				inx
  1069 2390 AD 5C 24 95 98		mva PJOY :STACKORIGIN,x
  1070 2395 AD 5D 24 95 A8		mva PJOY+1 :STACKORIGIN+STACKWIDTH,x
  1071 239A 20 8D 21			jsr SYS.SETDLI
  1072
  1073 				; ---------------------  ASM Block 062  ---------------------
  1074
  1075 239D 68 A8 68 AA 68	 plr 
  1076
  1077 				; ------------------------------------------------------------
  1078
  1079 = 0000			@FORTMP_020C	= $00
  1080 23A2 40				rti						; ret
  1081 				.endl
  1082
  1083 23A3			.local	INIT						; PROCEDURE
  1084
  1085 				; optimize FAIL ('SYSTEM.PAUSE_0071', main.pas), line = 56
  1086
  1087 23A3 20 5C 21			jsr SYSTEM.PAUSE_0071
  1088 23A6 A9 00			lda #$00
  1089 23A8 8D 00 D4			sta GLOBALS.DMACTL
  1090 23AB 20 A5 21			jsr SYS.SYSTEMOFF
  1091
  1092 				; optimize OK (main.pas), line = 58
  1093
  1094 23AE A9 00			lda #$00
  1095 23B0 85 88			sta :edx
  1096 23B2 A9 E0			lda #$E0
  1097 23B4 85 89			sta :edx+1
  1098 23B6 A9 C0			lda #$C0
  1099 23B8 85 8C			sta :ecx
  1100 23BA A9 03			lda #$03
  1101 23BC 85 8D			sta :ecx+1
  1102 23BE A9 00			lda #$00
  1103 23C0 85 84			sta :eax
  1104 23C2 20 80 20			jsr @fill
  1105
  1106 				; optimize OK (main.pas), line = 60
  1107
  1108 23C5 A9 7C			lda #$7C
  1109 23C7 85 FD			sta GLOBALS.B1I
  1110
  1111 23C9			l_0254
  1112 				; --- ForToDoCondition
  1113
  1114 				; optimize OK (main.pas), line = 61
  1115
  1116 23C9 A4 FD			ldy GLOBALS.B1I
  1117 23CB AD 0A D2			lda SYSTEM.RND
  1118 23CE 99 00 12			sta adr.ASTARS,y
  1119
  1120 				; optimize OK (main.pas), line = 62
  1121
  1122 23D1 29 03			and #$03
  1123 23D3 18 69 01			add #$01
  1124 23D6 99 7D 12			sta adr.ASPEED,y
  1125
  1126 				; --- ForToDoEpilog
  1127 23D9 C6 FD			dec GLOBALS.B1I
  1128 23DB 10 EC			jpl l_0254
  1129 23DD			l_0262
  1130
  1131 				; optimize FAIL ('SPRITES.INIT', main.pas), line = 65
  1132
  1133 23DD 20 24 22			jsr SPRITES.INIT
  1134
  1135 				; optimize FAIL ('GR.MODE2', main.pas), line = 66
  1136
  1137 23E0 20 C1 21			jsr GR.MODE2
  1138 23E3 A9 00			lda #$00
  1139 23E5 8D 1A D0			sta GLOBALS.COLBK
  1140 23E8 A9 02			lda #$02
  1141 23EA 8D 18 D0			sta GLOBALS.COLPF2
  1142
  1143 				; optimize OK (main.pas), line = 67
  1144
  1145 23ED AD 02 D3			lda GLOBALS.PACTL
  1146 23F0 09 04			ora #$04
  1147 23F2 8D 02 D3			sta GLOBALS.PACTL
  1148
  1149 				; optimize OK (main.pas), line = 68
  1150
  1151 23F5 A9 33			lda <JOYHANDLER
  1152 23F7 8D 5C 24			sta PJOY
  1153 23FA A9 23			lda >JOYHANDLER
  1154 23FC 8D 5D 24			sta PJOY+1
  1155 23FF A9 67			lda <STARS
  1156 2401 8D 5E 24			sta PSTARS
  1157 2404 A9 23			lda >STARS
  1158 2406 8D 5F 24			sta PSTARS+1
  1159
  1160 				; optimize FAIL ('SYS.SETVBI', main.pas), line = 70
  1161
  1162 2409 E8				inx
  1163 240A A9 28 95 98			mva <VBI :STACKORIGIN,x
  1164 240E A9 23 95 A8			mva >VBI :STACKORIGIN+STACKWIDTH,x
  1165 2412 20 75 21			jsr SYS.SETVBI
  1166
  1167 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 71
  1168
  1169 2415 E8				inx
  1170 2416 A9 33 95 98			mva <JOYHANDLER :STACKORIGIN,x
  1171 241A A9 23 95 A8			mva >JOYHANDLER :STACKORIGIN+STACKWIDTH,x
  1172 241E 20 8D 21			jsr SYS.SETDLI
  1173
  1174 				; optimize FAIL ('SYSTEM.PAUSE_0071', main.pas), line = 73
  1175
  1176 2421 20 5C 21			jsr SYSTEM.PAUSE_0071
  1177 2424 A9 3E			lda #$3E
  1178 2426 8D 00 D4			sta GLOBALS.DMACTL
  1179
  1180 				; ------------------------------------------------------------
  1181
  1182 = 0000			@FORTMP_0251	= $00
  1183 2429			@exit
  1184 					.ifdef @new
  1185 					lda <@VarData
  1186 					sta :ztmp
  1187 					lda >@VarData
  1188 					ldy #@VarDataSize-1
  1189 					jmp @FreeMem
  1190 					els
  1191 2429 60				rts						; ret
  1192 					eif
  1193 				.endl
  1194 242A			l_0007
  1195
  1196 				; optimize FAIL ('INIT', main.pas), line = 77
  1197
  1198 242A 20 A3 23			jsr INIT
  1199
  1200 				; --- RepeatUntilProlog
  1201 242D			l_02A5
  1202
  1203 				; optimize OK (main.pas), line = 78
  1204
  1205 242D 4C 2D 24			jmp l_02A5
  1206
  1207 				; ------------------------------------------------------------
  1208
  1209 = 1200			adr.ASTARS	= $1200
  1210 2430			.var ASTARS	= adr.ASTARS .word
  1211 = 127D			adr.ASPEED	= $127D
  1212 2430			.var ASPEED	= adr.ASPEED .word
  1213 = 245C			PJOY	= DATAORIGIN+$0010
  1214 = 245E			PSTARS	= DATAORIGIN+$0012
  1215 2430			@exit
  1216
  1217 2430 A2 00		@halt	ldx #$00
  1218 2432 9A				txs
  1219 					.ifdef MAIN.@DEFINES.ROMOFF
  1220 					inc portb
  1221 					.endif
  1222
  1223 2433 A0 01			ldy #$01
  1224
  1225 2435 60				rts
  1226
  1227 				; ------------------------------------------------------------
  1228
  1229 2436 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1230
  1231 				; ------------------------------------------------------------
  1232
  1233 2446			.local	@DEFINES
  1234 2446			ATARI
  1235 				.endl
  1236
  1237 2446			.local	@RESOURCE
  1238 				.endl
  1239
  1240 = 2446 00 12		ASTARS
  1240 = 2448 7D 12		ASPEED
  1240 				.endl							; MAIN
  1241
  1242 				; ------------------------------------------------------------
  1243 				; ------------------------------------------------------------
  1244
  1245 				.macro	UNITINITIALIZATION
  1246 				
  1247 					.ifdef MAIN.SYSTEM.@UnitInit
  1248 					jsr MAIN.SYSTEM.@UnitInit
  1249 					eif
  1250 				
  1251 					.ifdef MAIN.GLOBALS.@UnitInit
  1252 					jsr MAIN.GLOBALS.@UnitInit
  1253 					eif
  1254 				
  1255 					.ifdef MAIN.SYS.@UnitInit
  1256 					jsr MAIN.SYS.@UnitInit
  1257 					eif
  1258 				
  1259 					.ifdef MAIN.GR.@UnitInit
  1260 					jsr MAIN.GR.@UnitInit
  1261 					eif
  1262 				
  1263 					.ifdef MAIN.SPRITES.@UnitInit
  1264 					jsr MAIN.SPRITES.@UnitInit
  1265 					eif
  1266 				
  1267 					.ifdef MAIN.JOY.@UnitInit
  1268 					jsr MAIN.JOY.@UnitInit
  1269 					eif
  1270 				.endm
  1271
  1272 				; ------------------------------------------------------------
  1273
  1274 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1275 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1275 				SYSTEM: $2104..$2166
  1276 					eif
  1277
  1278 					ift .SIZEOF(MAIN.GLOBALS) > 0
  1279 					.print 'GLOBALS: ',MAIN.GLOBALS,'..',MAIN.GLOBALS+.SIZEOF(MAIN.GLOBALS)-1
  1280 					eif
  1281
  1282 					ift .SIZEOF(MAIN.SYS) > 0
  1283 					.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
  1283 				SYS: $2167..$21C0
  1284 					eif
  1285
  1286 					ift .SIZEOF(MAIN.GR) > 0
  1287 					.print 'GR: ',MAIN.GR,'..',MAIN.GR+.SIZEOF(MAIN.GR)-1
  1287 				GR: $21C1..$21CC
  1288 					eif
  1289
  1290 					ift .SIZEOF(MAIN.SPRITES) > 0
  1291 					.print 'SPRITES: ',MAIN.SPRITES,'..',MAIN.SPRITES+.SIZEOF(MAIN.SPRITES)-1
  1291 				SPRITES: $21CD..$2293
  1292 					eif
  1293
  1294 					ift .SIZEOF(MAIN.JOY) > 0
  1295 					.print 'JOY: ',MAIN.JOY,'..',MAIN.JOY+.SIZEOF(MAIN.JOY)-1
  1295 				JOY: $2294..$2327
  1296 					eif
  1297
  1298 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1298 				CODE: $2000..$2445
  1299
  1300 				; ------------------------------------------------------------
  1301
  1302 244A				.align $04
  1303
  1304 244C			DATAORIGIN
  1305 244C-2451> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  1306
  1307 = 0006			VARINITSIZE	= *-DATAORIGIN
  1308 = 0014			VARDATASIZE	= 20
  1309
  1310 = 2460			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1311
  1312 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1312 				DATA: $244C..$2460
  1313
  1314 02E0-02E1> C8 20			run START
  1315
  1316 				; ------------------------------------------------------------
  1317
  1318 				.macro	STATICDATA
  1319 				.endm
  1320
  1321 					end
