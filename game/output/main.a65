; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.5 [2020/12/13] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

fxptr	.ds 2						; VBXE pointer
psptr	.ds 2						; PROGRAMSTACK Pointer

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.endif

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.endif

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCASM 'res/gr_dl.asm' GLOBALS.DL_2 0 0 0 0 0 0 0 0
	RCDATA 'res/gfx_ship.bin' GLOBALS.GFX_SHIP_ADR 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',fxptr,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>0
	@fill #VADR #VLEN #$00
	eif

	mwa #PROGRAMSTACK psptr

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.endif

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0007

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 021  ---------------------

	ldy #0
	mva value (edx),y


; ------------------------------------------------------------

A	= edx
VALUE	= ecx
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	lda :STACKORIGIN+STACKWIDTH,x
	sta VALUE+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 022  ---------------------

	ldy #0
	mva value (edx),y
	iny
	mva value+1 (edx),y


; ------------------------------------------------------------

A	= edx
VALUE	= ecx
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLBYTE_0050					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta COUNT
	lda :STACKORIGIN+STACKWIDTH,x
	sta COUNT+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 029  ---------------------

	jsr @fill


; ------------------------------------------------------------

A	= edx
COUNT	= ecx
VALUE	= eax
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_005A					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta COUNT
	lda :STACKORIGIN+STACKWIDTH,x
	sta COUNT+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta DEST
	lda :STACKORIGIN+STACKWIDTH,x
	sta DEST+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta SOURCE
	lda :STACKORIGIN+STACKWIDTH,x
	sta SOURCE+1
	dex

; ---------------------  ASM Block 031  ---------------------

	jsr @move


; ------------------------------------------------------------

SOURCE	= edx
DEST	= ecx
COUNT	= eax
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PAUSE_0078					; PROCEDURE | ASSEMBLER | OVERLOAD

; ---------------------  ASM Block 039  ---------------------

	lda:cmp:req :rtclok+2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
TVSYSTEM	= $D014
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	GLOBALS						; UNIT

; ------------------------------------------------------------

PM_ADR	= $1000
M0_ADR	= $1300
P0_ADR	= $1400
P1_ADR	= $1500
GFX_SHIP_ADR	= $1000
GFX_SHIP_SEG	= $08
SHIP_COL	= $0E0E
SHIP_LEFT_LIMIT	= $30
SHIP_RIGHT_LIMIT	= $B0
SHIP_TOP_LIMIT	= $20
SHIP_BOTTOM_LIMIT	= $A8
SHIP_X_STEP	= $0202
JOY_LEFT	= $08
JOY_RIGHT	= $04
JOY_UP	= $02
JOY_DOWN	= $01
DL_2	= $1100
GAME_LMS	= $EFFF
RTCLOK	= $14
HPOSP0	= $D000
HPOSP1	= $D001
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFM	= $D011
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF1	= $D017
COLPF2	= $D018
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
RND	= $D20A
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
DLIST	= $D402
PMBASE	= $D407
WSYNC	= $D40A
VCOUNT	= $D40B
NMIEN	= $D40E
NMIVEC	= $FFFA
HPOSP01	= $D000
SIZEP01	= $D008
COLPM01	= $D012
DL2LMS	= $1104
BMASK1	= $FF
BMASK2	= $FE
B1I	= $FD
B2I	= $FC

.endl							; UNIT GLOBALS

; ------------------------------------------------------------

.local	SYS						; UNIT

.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT

; ---------------------  ASM Block 049  ---------------------


      bit NMIST \ bpl vbi     ; check kind of interrupt
.def  :__dlijmp
      jmp __off               ; VDSLST
vbi:  inc RTCLOK+2
.def  :__vbijmp
      jmp __off               ; VBIVEC
.def  :__off

	rti						; ret
.endl

.local	SETVBI						; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 050  ---------------------


  mwa a __vbijmp+1


; ------------------------------------------------------------

A	= DATAORIGIN+$000B

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETDLI						; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 051  ---------------------


  mwa a __dlijmp+1


; ------------------------------------------------------------

A	= DATAORIGIN+$000D

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SYSTEMOFF					; PROCEDURE

; ---------------------  ASM Block 054  ---------------------

 sei 

; optimize OK (SYS), line = 63

	lda #$00
	sta GLOBALS.NMIEN
	lda #$FE
	sta GLOBALS.PORTB
	lda <NMI
	sta GLOBALS.NMIVEC
	lda >NMI
	sta GLOBALS.NMIVEC+1
	lda #$C0
	sta GLOBALS.NMIEN
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

	rts

; ------------------------------------------------------------

.endl							; UNIT SYS

; ------------------------------------------------------------

.local	GR						; UNIT

.local	MODE2						; PROCEDURE

; optimize OK (GR), line = 17

	lda #$00
	sta GLOBALS.DLIST
	lda #$11
	sta GLOBALS.DLIST+1
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

	rts

; ------------------------------------------------------------

.endl							; UNIT GR

; ------------------------------------------------------------

.local	SPRITES						; UNIT

.local	COPYSHIP					; PROCEDURE

; optimize OK (SPRITES), line = 25

	lda BSHIPYCLEAR
	sta :bp2
	lda #$14
	sta :bp2+1
	ldy #$00
	tya
	sta (:bp2),y
	iny
	sta (:bp2),y
	lda BSHIPYCLEAR
	sta :bp2
	lda #$15
	sta :bp2+1
	ldy #$00
	tya
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (SPRITES), line = 26

	lda BSHIPY
	sta :ecx
	lda #$14
	sta :ecx+1
	lda #$00
	sta :edx
	lda #$10
	sta :edx+1
	lda #$08
	sta :eax
	lda #$00
	sta :eax+1
	jsr @move

; optimize OK (SPRITES), line = 27

	lda BSHIPY
	sta :ecx
	lda #$15
	sta :ecx+1
	lda #$08
	sta :edx
	lda #$10
	sta :edx+1
	lda #$08
	sta :eax
	lda #$00
	sta :eax+1
	jsr @move
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INIT						; PROCEDURE

; optimize OK (SPRITES), line = 32

	.LOCAL
	ldy #$00
	tya
fill	:10 sta $1300+#*$80,y
	iny
	bpl fill
	.ENDL

; optimize OK (SPRITES), line = 33

	ldy #256-$90
	lda #$FF
	sta:rne $1320+$90-256,y+

; optimize OK (SPRITES), line = 35

	lda #$10
	sta GLOBALS.PMBASE

; optimize OK (SPRITES), line = 36

	lda #$0A
	sta GLOBALS.COLPM3
	lda #$0E
	sta GLOBALS.COLPM01
	sta GLOBALS.COLPM01+1

; optimize OK (SPRITES), line = 37

	lda #$50
	sta BSHIPY
	sta BSHIPYCLEAR

; optimize OK (SPRITES), line = 38

	lda #$30
	sta BHPOSP0
	lda #$38
	sta BHPOSP1
	lda WSHIPX
	sta GLOBALS.HPOSP01
	lda WSHIPX+1
	sta GLOBALS.HPOSP01+1

; optimize OK (SPRITES), line = 39

	lda #$00
	sta GLOBALS.SIZEP01
	sta GLOBALS.SIZEP01+1
	sta GLOBALS.SIZEM
	sta GLOBALS.PRIOR
	lda #$03
	sta GLOBALS.GRACTL

; optimize FAIL ('COPYSHIP', SPRITES), line = 41

	jsr COPYSHIP
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

	rts

; ------------------------------------------------------------

BHPOSP0	= $00
BHPOSP1	= $01
BSHIPY	= $02
BSHIPYCLEAR	= $03
WSHIPX	= $00

.endl							; UNIT SPRITES

; ------------------------------------------------------------

.local	JOY						; UNIT

.local	MOVESHIP					; PROCEDURE

; optimize OK (JOY), line = 20

	lda #$0C
	sta GLOBALS.BMASK1

; optimize OK (JOY), line = 21

	lda #$01
	sta GLOBALS.B1I

l_0117
; --- ForToDoCondition

; optimize OK (JOY), line = 22

	lda JOYDIRECTION
	and GLOBALS.BMASK1
	sta @CASETMP_0003
	cmp #$04
	jne l_0136
@

; optimize OK (JOY), line = 24

	lda SPRITES.BHPOSP1
	cmp #$B0
	jcs l_0148

; optimize OK (JOY), line = 25

	lda SPRITES.WSHIPX
	add #$02
	sta SPRITES.WSHIPX
	lda SPRITES.WSHIPX+1
	adc #$02
	sta SPRITES.WSHIPX+1
	lda SPRITES.WSHIPX
	sta GLOBALS.HPOSP01
	lda SPRITES.WSHIPX+1
	sta GLOBALS.HPOSP01+1
l_0148

	jmp a_0003
l_0136
	cmp #$08
	jne l_015A
@

; optimize OK (JOY), line = 29

	lda SPRITES.BHPOSP0
	cmp #$31
	jcc l_016C

; optimize OK (JOY), line = 30

	lda SPRITES.WSHIPX
	sub #$02
	sta SPRITES.WSHIPX
	lda SPRITES.WSHIPX+1
	sbc #$02
	sta SPRITES.WSHIPX+1
	lda SPRITES.WSHIPX
	sta GLOBALS.HPOSP01
	lda SPRITES.WSHIPX+1
	sta GLOBALS.HPOSP01+1
l_016C

	jmp a_0003
l_015A
	cmp #$02
	jne l_017E
@

; optimize OK (JOY), line = 34

	lda SPRITES.BSHIPY
	cmp #$21
	jcc l_0190

; optimize OK (JOY), line = 35

	add #$06
	sta SPRITES.BSHIPYCLEAR
	lda SPRITES.BSHIPY
	sub #$02
	sta SPRITES.BSHIPY

; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 36

	jsr SPRITES.COPYSHIP
l_0190

	jmp a_0003
l_017E
	cmp #$01
	jne l_01A8
@

; optimize OK (JOY), line = 40

	lda SPRITES.BSHIPY
	cmp #$A8
	jcs l_01BA

; optimize OK (JOY), line = 41

	sta SPRITES.BSHIPYCLEAR
	add #$02
	sta SPRITES.BSHIPY

; optimize FAIL ('SPRITES.COPYSHIP', JOY), line = 42

	jsr SPRITES.COPYSHIP
l_01BA

l_01A8
a_0003

; optimize OK (JOY), line = 46

	lda #$03
	sta GLOBALS.BMASK1

; --- ForToDoEpilog
	dec GLOBALS.B1I
	jpl l_0117
l_0125

; ------------------------------------------------------------

@FORTMP_0114	= $00
@CASETMP_0003	= DATAORIGIN+$000F

@VarData	= @CASETMP_0003
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

	rts

; ------------------------------------------------------------

JOYDIRECTION	= $04

.endl							; UNIT JOY

.local	VBI						; PROCEDURE | INTERRUPT

; ---------------------  ASM Block 055  ---------------------

 phr 

; optimize OK (main.pas), line = 19

	lda GLOBALS.RTCLOK
	and #$01
	jne l_01F0

; optimize OK (main.pas), line = 20

	lda GLOBALS.DL2LMS
	add #$02
	sta :STACKORIGIN+9
	lda GLOBALS.DL2LMS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda SYSTEM.RND
	and #$0F
	jsr @mul40
	add :STACKORIGIN+9
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta :bp+1
	lda #$80
	sta (:bp),y
l_01F0

; optimize FAIL (0, main.pas), line = 22

	dew GLOBALS.DL2LMS

; optimize OK (main.pas), line = 23

	lda #$15
	sta GLOBALS.B1I

l_0216
; --- ForToDoCondition
	lda GLOBALS.B1I
	jsr @mul40
	add GLOBALS.DL2LMS
	tay
	lda GLOBALS.DL2LMS+1
	adc :eax+1
	sta :bp+1
	lda #$00
	sta (:bp),y

; --- ForToDoEpilog
	dec GLOBALS.B1I
	jpl l_0216
l_0224

; ---------------------  ASM Block 056  ---------------------

 plr 

; ------------------------------------------------------------

@FORTMP_0213	= $00
	rti						; ret
.endl

.local	JOYHANDLER					; PROCEDURE | INTERRUPT

; ---------------------  ASM Block 057  ---------------------

 phr 

; ---------------------  ASM Block 058  ---------------------

 sta WSYNC 

; optimize OK (main.pas), line = 33

	lda #$0F
	sta GLOBALS.COLBK

; optimize OK (main.pas), line = 35

	lda GLOBALS.PORTA
	sta JOY.JOYDIRECTION

; optimize OK (main.pas), line = 36

	and #$0F
	cmp #$0F
	jeq l_025B
	jsr JOY.MOVESHIP
l_025B

; optimize OK (main.pas), line = 38

	lda #$00
	sta GLOBALS.COLBK

; optimize FAIL ('SYS.SETDLI', main.pas), line = 40

	inx
	mva PSTARS :STACKORIGIN,x
	mva PSTARS+1 :STACKORIGIN+STACKWIDTH,x
	jsr SYS.SETDLI

; ---------------------  ASM Block 059  ---------------------

 plr 
	rti						; ret
.endl

.local	STARS						; PROCEDURE | INTERRUPT

; ---------------------  ASM Block 060  ---------------------

 phr 

; optimize OK (main.pas), line = 49

	lda #$7C
	sta GLOBALS.B1I

l_0273
; --- ForToDoCondition

; ---------------------  ASM Block 061  ---------------------

 sta WSYNC 

; optimize OK (main.pas), line = 51

	ldy GLOBALS.B1I
	lda adr.ASTARS,y
	sta GLOBALS.HPOSM3

; optimize OK (main.pas), line = 52

	lda adr.ASTARS,y
	sub adr.ASPEED,y
	sta adr.ASTARS,y

; optimize OK (main.pas), line = 53

	lda SYSTEM.RND
	sta GLOBALS.COLPM3

; --- ForToDoEpilog
	dec GLOBALS.B1I
	jpl l_0273
l_0281

; optimize FAIL ('SYS.SETDLI', main.pas), line = 56

	inx
	mva PJOY :STACKORIGIN,x
	mva PJOY+1 :STACKORIGIN+STACKWIDTH,x
	jsr SYS.SETDLI

; ---------------------  ASM Block 062  ---------------------

 plr 

; ------------------------------------------------------------

@FORTMP_0270	= $00
	rti						; ret
.endl

.local	INIT						; PROCEDURE

; optimize FAIL ('SYSTEM.PAUSE_0078', main.pas), line = 63

	jsr SYSTEM.PAUSE_0078
	lda #$00
	sta GLOBALS.DMACTL
	jsr SYS.SYSTEMOFF

; optimize OK (main.pas), line = 65

	lda #$FF
	sta :edx
	lda #$EF
	sta :edx+1
	lda #$C0
	sta :ecx
	lda #$03
	sta :ecx+1
	lda #$00
	sta :eax
	jsr @fill

; optimize OK (main.pas), line = 67

	lda #$7C
	sta GLOBALS.B1I

l_02B8
; --- ForToDoCondition

; optimize OK (main.pas), line = 68

	ldy GLOBALS.B1I
	lda SYSTEM.RND
	sta adr.ASTARS,y

; optimize OK (main.pas), line = 69

	and #$03
	add #$01
	sta adr.ASPEED,y

; --- ForToDoEpilog
	dec GLOBALS.B1I
	jpl l_02B8
l_02C6

; optimize FAIL ('SPRITES.INIT', main.pas), line = 72

	jsr SPRITES.INIT

; optimize FAIL ('GR.MODE2', main.pas), line = 73

	jsr GR.MODE2
	lda #$00
	sta GLOBALS.COLBK
	lda #$02
	sta GLOBALS.COLPF2

; optimize OK (main.pas), line = 74

	lda GLOBALS.PACTL
	ora #$04
	sta GLOBALS.PACTL

; optimize OK (main.pas), line = 75

	lda <JOYHANDLER
	sta PJOY
	lda >JOYHANDLER
	sta PJOY+1
	lda <STARS
	sta PSTARS
	lda >STARS
	sta PSTARS+1

; optimize FAIL ('SYS.SETVBI', main.pas), line = 77

	inx
	mva <VBI :STACKORIGIN,x
	mva >VBI :STACKORIGIN+STACKWIDTH,x
	jsr SYS.SETVBI

; optimize FAIL ('SYS.SETDLI', main.pas), line = 78

	inx
	mva <JOYHANDLER :STACKORIGIN,x
	mva >JOYHANDLER :STACKORIGIN+STACKWIDTH,x
	jsr SYS.SETDLI

; optimize FAIL ('SYSTEM.PAUSE_0078', main.pas), line = 80

	jsr SYSTEM.PAUSE_0078
	lda #$3E
	sta GLOBALS.DMACTL

; ------------------------------------------------------------

@FORTMP_02B5	= $00
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0007

; optimize FAIL ('INIT', main.pas), line = 84

	jsr INIT

; --- RepeatUntilProlog
l_0309

; optimize OK (main.pas), line = 85

	jmp l_0309

; ------------------------------------------------------------

adr.ASTARS	= $1200
.var ASTARS	= adr.ASTARS .word
adr.ASPEED	= $127D
.var ASPEED	= adr.ASPEED .word
PJOY	= DATAORIGIN+$0010
PSTARS	= DATAORIGIN+$0012
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.endif

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif

	.ifdef MAIN.GLOBALS.@UnitInit
	jsr MAIN.GLOBALS.@UnitInit
	eif

	.ifdef MAIN.SYS.@UnitInit
	jsr MAIN.SYS.@UnitInit
	eif

	.ifdef MAIN.GR.@UnitInit
	jsr MAIN.GR.@UnitInit
	eif

	.ifdef MAIN.SPRITES.@UnitInit
	jsr MAIN.SPRITES.@UnitInit
	eif

	.ifdef MAIN.JOY.@UnitInit
	jsr MAIN.JOY.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.GLOBALS) > 0
	.print 'GLOBALS: ',MAIN.GLOBALS,'..',MAIN.GLOBALS+.SIZEOF(MAIN.GLOBALS)-1
	eif

	ift .SIZEOF(MAIN.SYS) > 0
	.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
	eif

	ift .SIZEOF(MAIN.GR) > 0
	.print 'GR: ',MAIN.GR,'..',MAIN.GR+.SIZEOF(MAIN.GR)-1
	eif

	ift .SIZEOF(MAIN.SPRITES) > 0
	.print 'SPRITES: ',MAIN.SPRITES,'..',MAIN.SPRITES+.SIZEOF(MAIN.SPRITES)-1
	eif

	ift .SIZEOF(MAIN.JOY) > 0
	.print 'JOY: ',MAIN.JOY,'..',MAIN.JOY+.SIZEOF(MAIN.JOY)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $04

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 20

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.endm

	end
