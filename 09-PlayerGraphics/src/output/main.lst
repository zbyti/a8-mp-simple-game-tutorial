mads 2.1.1
  1133 					opt l+
    98 = 0000				?EXTDETECT = 0
    99 = 0000				?VBXDETECT = 0
   100
   101 2075				RCASM 'res/gr_dl.asm' GR.DL_2 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 0020			len = .sizeof(_GR.DL_2)
     6 				mcpy	ift main.GR.DL_2+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 18 +  MWA #MAIN.GR.DL_2 ECX
    13 2088 A9 20 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: gr_dl.asm
     1 = 0308			M_OFFSET            = $308;   // missile memory offset
     2 = 0408			P0_OFFSET           = $408;   // player 0 memory offset
     3 = 0508			P1_OFFSET           = $508;   // player 1 memory offset
     4 = 1000			PM_ADR              = $1000;  // player & missile memory 2K start address
     5 = 1000			P_SHIP_ADR          = $1000;  // player ship memory start address, ship size = 20 bytes, 16 bytes for gfx and 4 bytes fo top/bottom empty rows
     6 = 000A			P_SHIP_SEG          = 10;     // player ship 10 byte segment, 10 bytes for P0 & 10 for P1
     7 = 1800			DL_2                = $1800;  // display list memory start address for ANTIC mode 2
     8 = E000			GAME_LMS            = $e000;  // Load Memory Scan address
     3 1800			dl2
     4 1800 70 70 70		:3  .byte $70
     5 1803 42 00 E0		    .byte $42,a(GAME_LMS)
     6 1806 02 02 02 02 02 02 + :23 .byte 2
     7 181D 41 00 18		    .byte $41,a(dl2)
    23 					.print '$R RCASM   ',main.GR.DL_2,'..',main.GR.DL_2+len-1," 'res/gr_dl.asm'"
    23 				$R RCASM   $1800..$181F 'res/gr_dl.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: main.a65
   102 20B6				RCDATA 'res/gfx_ship.bin' GR.P_SHIP_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0014			len = .filesize('res/gfx_ship.bin')
    28 20B6				org main.GR.P_SHIP_ADR
    30 1000-1013> 00 70 7B 1E + 	ins 'res/gfx_ship.bin'
    32 					.print '$R RCDATA  ',main.GR.P_SHIP_ADR,'..',*-1," 'res/gfx_ship.bin'"
    32 				$R RCDATA  $1000..$1013 'res/gfx_ship.bin'
Source: main.a65
   103 				.endl
   104
   105 				; ------------------------------------------------------------
   106
   107 1014				org CODEORIGIN
   108
   109 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
Source: main.a65
   110
   111 				; ------------------------------------------------------------
   112
   113 2000			RTLIB
   114 2000				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
   166 					opt l+
   115
   116 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   116 				ZPAGE: $0080..$00D7
   117
   118 				.print 'RTLIB: ',RTLIB,'..',*-1
   118 				RTLIB: $2000..$20C7
   119
   120 				; ------------------------------------------------------------
   121
   122 20C8			START
   123 20C8 BA				tsx
   124 20C9 8E 22 22			stx MAIN.@halt+1
   125
   126 					.ifdef fmulinit
   127 					fmulinit
   128 					eif
   129
   130 = 0007			VLEN	= VARDATASIZE-VARINITSIZE
   131 = 223E			VADR	= DATAORIGIN+VARINITSIZE
   132
   133 					ift VADR > $BFFF
   134 					ert 'Invalid memory address range ',VADR
   135 					eli (VLEN>0) && (VLEN<=256)
   136 20CC A2 F9			ldx #256-VLEN
   137 20CE A9 00			lda #$00
   138 20D0 9D 45 21 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   139 					eli VLEN>0
   140 					@fill #VADR #VLEN #$00
   141 					eif
   142
   143 20D6 A9 45 85 82 A9 22 + 	mwa #PROGRAMSTACK psptr
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 					icl 'atari\romoff.asm'
   147 					.endif
   148
   149 20DE A2 0F			ldx #$0F					; DOS II+/D ParamStr
   150 20E0 BD 40 03 9D 27 22 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   151
   152 20E9 E8				inx						; X = 0
   153 20EA 86 90			stx bp						; BP = 0
   154
   155 20EC 8E 08 D2			stx audctl					; reset POKEY
   156 20EF A9 03			lda #3
   157 20F1 8D 0F D2			sta skctl
   158
   159 20F4 CA				dex						; X = 255
   160
   161 20F5				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
    11 20F5 20 43 21			jsr MAIN.GR.@UnitInit
    15 20F8 20 88 21			jsr MAIN.SYS.@UnitInit
   162
   163 20FB			.local	MAIN						; PROCEDURE
   164
   165 20FB 4C 1B 22			jmp l_0007
   166
   167 				; ------------------------------------------------------------
   168
   169 20FE			.local	SYSTEM						; UNIT
   170
   171 20FE			.local	FILLBYTE_0042					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   172
   173 				; ------------------------------------------------------------
   174
   175 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   176 				; as Pointer
   177 20FE B5 98			lda :STACKORIGIN,x
   178 2100 85 84			sta VALUE
   179 2102 CA				dex
   180
   181 				; ------------------------------------------------------------
   182
   183 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   184 				; as Pointer
   185 2103 B5 98			lda :STACKORIGIN,x
   186 2105 85 8C			sta COUNT
   187 2107 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   188 2109 85 8D			sta COUNT+1
   189 210B CA				dex
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   194 				; as Pointer
   195 210C B5 98			lda :STACKORIGIN,x
   196 210E 85 88			sta A
   197 2110 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   198 2112 85 89			sta A+1
   199 2114 CA				dex
   200
   201 				; ---------------------  ASM Block 029  ---------------------
   202
   203 2115 20 80 20			jsr @fill
   204
   205
   206 				; ------------------------------------------------------------
   207
   208 = 0088			A	= edx
   209 = 008C			COUNT	= ecx
   210 = 0084			VALUE	= eax
   211 2118			@exit
   212 					.ifdef @new
   213 					lda <@VarData
   214 					sta :ztmp
   215 					lda >@VarData
   216 					ldy #@VarDataSize-1
   217 					jmp @FreeMem
   218 					els
   219 2118 60				rts						; ret
   220 					eif
   221 				.endl
   222
   223 2119			.local	MOVE_004C					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   224
   225 				; ------------------------------------------------------------
   226
   227 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   228 				; as Pointer
   229 2119 B5 98			lda :STACKORIGIN,x
   230 211B 85 84			sta COUNT
   231 211D B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   232 211F 85 85			sta COUNT+1
   233 2121 CA				dex
   234
   235 				; ------------------------------------------------------------
   236
   237 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   238 				; as Pointer
   239 2122 B5 98			lda :STACKORIGIN,x
   240 2124 85 8C			sta DEST
   241 2126 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   242 2128 85 8D			sta DEST+1
   243 212A CA				dex
   244
   245 				; ------------------------------------------------------------
   246
   247 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   248 				; as Pointer
   249 212B B5 98			lda :STACKORIGIN,x
   250 212D 85 88			sta SOURCE
   251 212F B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   252 2131 85 89			sta SOURCE+1
   253 2133 CA				dex
   254
   255 				; ---------------------  ASM Block 031  ---------------------
   256
   257 2134 20 2B 20			jsr @move
   258
   259
   260 				; ------------------------------------------------------------
   261
   262 = 0088			SOURCE	= edx
   263 = 008C			DEST	= ecx
   264 = 0084			COUNT	= eax
   265 2137			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 2137 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 2138			.local	PAUSE_006A					; PROCEDURE | ASSEMBLER | OVERLOAD
   278
   279 				; ---------------------  ASM Block 039  ---------------------
   280
   281 2138 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   282
   283 213E			@exit
   284 					.ifdef @new
   285 					lda <@VarData
   286 					sta :ztmp
   287 					lda >@VarData
   288 					ldy #@VarDataSize-1
   289 					jmp @FreeMem
   290 					els
   291 213E 60				rts						; ret
   292 					eif
   293 				.endl
   294
   295 				; ------------------------------------------------------------
   296
   297 = 0101			__PORTB_BANKS	= $0101
   298 = 0648			M_PI_2	= $0648
   299 = 0192			D_PI_2	= $0192
   300 = 0004			D_PI_180	= $04
   301 = 0000			MGTIA	= $00
   302 = 0080			MVBXE	= $80
   303 = 0000			VBXE_XDLADR	= $00
   304 = 0100			VBXE_BCBADR	= $0100
   305 = 1000			VBXE_MAPADR	= $1000
   306 = 5000			VBXE_OVRADR	= $5000
   307 = B000			VBXE_WINDOW	= $B000
   308 = 0000			IDLI	= $00
   309 = 0001			IVBL	= $01
   310 = 00FE			CH_DELCHR	= $FE
   311 = 009B			CH_ENTER	= $9B
   312 = 001B			CH_ESC	= $1B
   313 = 001C			CH_CURS_UP	= $1C
   314 = 001D			CH_CURS_DOWN	= $1D
   315 = 001E			CH_CURS_LEFT	= $1E
   316 = 001F			CH_CURS_RIGHT	= $1F
   317 = 007F			CH_TAB	= $7F
   318 = 009B			CH_EOL	= $9B
   319 = 007D			CH_CLR	= $7D
   320 = 00FD			CH_BELL	= $FD
   321 = 007E			CH_DEL	= $7E
   322 = 009C			CH_DELLINE	= $9C
   323 = 009D			CH_INSLINE	= $9D
   324 = 0000			COLOR_BLACK	= $00
   325 = 000E			COLOR_WHITE	= $0E
   326 = 0032			COLOR_RED	= $32
   327 = 0096			COLOR_CYAN	= $96
   328 = 0068			COLOR_VIOLET	= $68
   329 = 00C4			COLOR_GREEN	= $C4
   330 = 0074			COLOR_BLUE	= $74
   331 = 00EE			COLOR_YELLOW	= $EE
   332 = 0028			COLOR_ORANGE	= $28
   333 = 00E4			COLOR_BROWN	= $E4
   334 = 003C			COLOR_LIGHTRED	= $3C
   335 = 0004			COLOR_GRAY1	= $04
   336 = 0006			COLOR_GRAY2	= $06
   337 = 000A			COLOR_GRAY3	= $0A
   338 = 00CC			COLOR_LIGHTGREEN	= $CC
   339 = 007C			COLOR_LIGHTBLUE	= $7C
   340 = 0004			FMOPENREAD	= $04
   341 = 0008			FMOPENWRITE	= $08
   342 = 0009			FMOPENAPPEND	= $09
   343 = 000C			FMOPENREADWRITE	= $0C
   344 = 2238			SCREENWIDTH	= DATAORIGIN+$0000
   345 = 223A			SCREENHEIGHT	= DATAORIGIN+$0002
   346 = 223C			DATESEPARATOR	= DATAORIGIN+$0004
   347 = D014			TVSYSTEM	= $D014
   348 = D20A			RND	= $D20A
   349 = 02C0			adr.PALETTE	= $02C0
   350 213F			.var PALETTE	= adr.PALETTE .word
   351 = D012			adr.HPALETTE	= $D012
   352 213F			.var HPALETTE	= adr.HPALETTE .word
   353 = 223D			FILEMODE	= DATAORIGIN+$0005
   354 = 223E			GRAPHMODE	= DATAORIGIN+$0006
   355 = 223F			IORESULT	= DATAORIGIN+$0007
   356 = 2240			EOLN	= DATAORIGIN+$0008
   357 = 2241			RNDSEED	= DATAORIGIN+$0009
   358
   359 = 213F C0 02		PALETTE
   359 = 2141 12 D0		HPALETTE
   359 				.endl							; UNIT SYSTEM
   360
   361 				; ------------------------------------------------------------
   362
   363 2143			.local	REGISTERS					; UNIT
   364
   365 				; ------------------------------------------------------------
   366
   367 = 0014			RTCLOK	= $14
   368 = D000			HPOSP0	= $D000
   369 = D001			HPOSP1	= $D001
   370 = D008			SIZEP0	= $D008
   371 = D009			SIZEP1	= $D009
   372 = D012			COLPM0	= $D012
   373 = D013			COLPM1	= $D013
   374 = D017			COLPF1	= $D017
   375 = D018			COLPF2	= $D018
   376 = D01A			COLBK	= $D01A
   377 = D01B			PRIOR	= $D01B
   378 = D01D			GRACTL	= $D01D
   379 = D301			PORTB	= $D301
   380 = D400			DMACTL	= $D400
   381 = D402			SDLSTL	= $D402
   382 = D407			PMBASE	= $D407
   383 = D40E			NMIEN	= $D40E
   384 = D402			DLIST	= $D402
   385 = FFFA			NMIVEC	= $FFFA
   386 = D000			HPOSP01	= $D000
   387 = D008			SIZEP01	= $D008
   388 = D012			COLPM01	= $D012
   389
   390 				.endl							; UNIT REGISTERS
   391
   392 				; ------------------------------------------------------------
   393
   394 2143			.local	GR						; UNIT
   395
   396 				; ------------------------------------------------------------
   397 				; ------------------------------------------------------------
   398 2143			@UnitInit
   399
   400 2143 60				rts
   401
   402 				; ------------------------------------------------------------
   403
   404 = 0308			M_OFFSET	= $0308
   405 = 0408			P0_OFFSET	= $0408
   406 = 0508			P1_OFFSET	= $0508
   407 = 1000			PM_ADR	= $1000
   408 = 1000			P_SHIP_ADR	= $1000
   409 = 000A			P_SHIP_SEG	= $0A
   410 = 1800			DL_2	= $1800
   411 = E000			GAME_LMS	= $E000
   412
   413 				.endl							; UNIT GR
   414
   415 				; ------------------------------------------------------------
   416
   417 2144			.local	SYS						; UNIT
   418
   419 2144			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
   420
   421 				; ---------------------  ASM Block 049  ---------------------
   422
   423
   424 				      bit NMIST \ bpl vbi   ; check kind of interrupt
   424 2144 2C 0F D4		      BIT NMIST 
   424 2147 10 03		 BPL VBI   
   425 = 2149			.def  :__dlijmp
   426 2149 4C 51 21		      jmp __off               ; VDSLST
   427 214C E6 14		vbi:  inc RTCLOK+2
   428 = 214E			.def  :__vbijmp
   429 214E 4C 51 21		      jmp __off               ; VBIVEC
   430 = 2151			.def  :__off
   431
   432 2151 40				rti						; ret
   433 				.endl
   434
   435 2152			.local	SETVBI						; PROCEDURE | ASSEMBLER
   436
   437 				; ------------------------------------------------------------
   438
   439 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   440 				; as Pointer
   441 2152 B5 98			lda :STACKORIGIN,x
   442 2154 8D 43 22			sta A
   443 2157 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   444 2159 8D 44 22			sta A+1
   445 215C CA				dex
   446
   447 				; ---------------------  ASM Block 050  ---------------------
   448
   449
   450 215D AD 43 22 8D 4F 21 +   mwa a __vbijmp+1
   451
   452
   453 				; ------------------------------------------------------------
   454
   455 = 2243			A	= DATAORIGIN+$000B
   456
   457 = 2243			@VarData	= A
   458 = 0002			@VarDataSize	= 2
   459
   460 2169			@exit
   461 					.ifdef @new
   462 					lda <@VarData
   463 					sta :ztmp
   464 					lda >@VarData
   465 					ldy #@VarDataSize-1
   466 					jmp @FreeMem
   467 					els
   468 2169 60				rts						; ret
   469 					eif
   470 				.endl
   471
   472 216A			.local	SYSTEMOFF					; PROCEDURE
   473
   474 				; optimize FAIL ('SYSTEM.PAUSE_006A', SYS), line = 62
   475
   476 216A 20 38 21			jsr SYSTEM.PAUSE_006A
   477
   478 				; ---------------------  ASM Block 054  ---------------------
   479
   480 216D 78			 sei 
   481
   482 				; optimize OK (SYS), line = 63
   483
   484 216E A9 00			lda #$00
   485 2170 8D 0E D4			sta REGISTERS.NMIEN
   486 2173 A9 FE			lda #$FE
   487 2175 8D 01 D3			sta REGISTERS.PORTB
   488 2178 A9 44			lda <NMI
   489 217A 8D FA FF			sta REGISTERS.NMIVEC
   490 217D A9 21			lda >NMI
   491 217F 8D FB FF			sta REGISTERS.NMIVEC+1
   492 2182 A9 40			lda #$40
   493 2184 8D 0E D4			sta REGISTERS.NMIEN
   494 2187			@exit
   495 					.ifdef @new
   496 					lda <@VarData
   497 					sta :ztmp
   498 					lda >@VarData
   499 					ldy #@VarDataSize-1
   500 					jmp @FreeMem
   501 					els
   502 2187 60				rts						; ret
   503 					eif
   504 				.endl
   505
   506 				; ------------------------------------------------------------
   507 				; ------------------------------------------------------------
   508 2188			@UnitInit
   509
   510 2188 60				rts
   511
   512 				; ------------------------------------------------------------
   513
   514 				.endl							; UNIT SYS
   515
   516 2189			.local	VBI						; PROCEDURE | INTERRUPT
   517
   518 				; ---------------------  ASM Block 055  ---------------------
   519
   520 2189 48 8A 48 98 48	 phr 
   521
   522 				; optimize FAIL (0, main.pas), line = 21
   523
   524 218E E6 00			inc HPOSP0
   525 2190 E6 01			inc HPOSP1
   526 2192 A5 00			lda SHIPHPOS
   527 2194 8D 00 D0			sta REGISTERS.HPOSP01
   528 2197 A5 01			lda SHIPHPOS+1
   529 2199 8D 01 D0			sta REGISTERS.HPOSP01+1
   530
   531 				; ---------------------  ASM Block 056  ---------------------
   532
   533 219C 68 A8 68 AA 68	 plr 
   534 21A1 40				rti						; ret
   535 				.endl
   536
   537 21A2			.local	INIT						; PROCEDURE
   538
   539 				; optimize FAIL ('SYS.SYSTEMOFF', main.pas), line = 28
   540
   541 21A2 20 6A 21			jsr SYS.SYSTEMOFF
   542 21A5 A9 00			lda #$00
   543 21A7 8D 00 D4			sta REGISTERS.DMACTL
   544
   545 				; optimize OK (main.pas), line = 30
   546
   547 21AA A9 10			lda #$10
   548 21AC 8D 07 D4			sta REGISTERS.PMBASE
   549
   550 				; optimize OK (main.pas), line = 31
   551
   552 21AF A9 2C			lda #$2C
   553 21B1 85 00			sta HPOSP0
   554 21B3 A9 34			lda #$34
   555 21B5 85 01			sta HPOSP1
   556 21B7 A5 00			lda SHIPHPOS
   557 21B9 8D 00 D0			sta REGISTERS.HPOSP01
   558 21BC A5 01			lda SHIPHPOS+1
   559 21BE 8D 01 D0			sta REGISTERS.HPOSP01+1
   560
   561 				; optimize OK (main.pas), line = 32
   562
   563 21C1 A9 0F			lda #$0F
   564 21C3 8D 12 D0			sta REGISTERS.COLPM01
   565 21C6 8D 13 D0			sta REGISTERS.COLPM01+1
   566 21C9 A9 00			lda #$00
   567 21CB 8D 08 D0			sta REGISTERS.SIZEP01
   568 21CE 8D 09 D0			sta REGISTERS.SIZEP01+1
   569 21D1 8D 1B D0			sta REGISTERS.PRIOR
   570 21D4 A9 03			lda #$03
   571 21D6 8D 1D D0			sta REGISTERS.GRACTL
   572
   573 				; optimize OK (main.pas), line = 34
   574
   575 21D9 A9 08			lda #$08
   576 21DB 85 88			sta :edx
   577 21DD A9 13			lda #$13
   578 21DF 85 89			sta :edx+1
   579 21E1 A9 F8			lda #$F8
   580 21E3 85 8C			sta :ecx
   581 21E5 A9 04			lda #$04
   582 21E7 85 8D			sta :ecx+1
   583 21E9 A9 00			lda #$00
   584 21EB 85 84			sta :eax
   585 21ED 20 80 20			jsr @fill
   586
   587 				; optimize OK (main.pas), line = 35
   588
   589 21F0 A0 09			ldy #$09
   590 21F2 B9 00 10 99 08 14 + 	mva:rpl $1000,y $1408,y-
   591
   592 				; optimize OK (main.pas), line = 36
   593
   594 21FB A0 09			ldy #$09
   595 21FD B9 0A 10 99 08 15 + 	mva:rpl $100A,y $1508,y-
   596
   597 				; optimize FAIL ('SYSTEM.PAUSE_006A', main.pas), line = 38
   598
   599 2206 20 38 21			jsr SYSTEM.PAUSE_006A
   600 2209 A9 3E			lda #$3E
   601 220B 8D 00 D4			sta REGISTERS.DMACTL
   602 220E E8				inx
   603 220F A9 89 95 98			mva <VBI :STACKORIGIN,x
   604 2213 A9 21 95 A8			mva >VBI :STACKORIGIN+STACKWIDTH,x
   605 2217 20 52 21			jsr SYS.SETVBI
   606 221A			@exit
   607 					.ifdef @new
   608 					lda <@VarData
   609 					sta :ztmp
   610 					lda >@VarData
   611 					ldy #@VarDataSize-1
   612 					jmp @FreeMem
   613 					els
   614 221A 60				rts						; ret
   615 					eif
   616 				.endl
   617 221B			l_0007
   618
   619 				; optimize FAIL ('INIT', main.pas), line = 42
   620
   621 221B 20 A2 21			jsr INIT
   622
   623 				; --- RepeatUntilProlog
   624 221E			l_00D3
   625
   626 				; optimize OK (main.pas), line = 43
   627
   628 221E 4C 1E 22			jmp l_00D3
   629
   630 				; ------------------------------------------------------------
   631
   632 = 0308			M_OFFSET	= $0308
   633 = 0408			P0_OFFSET	= $0408
   634 = 0508			P1_OFFSET	= $0508
   635 = 1000			PM_ADR	= $1000
   636 = 1000			P_SHIP_ADR	= $1000
   637 = 000A			P_SHIP_SEG	= $0A
   638 = 1800			DL_2	= $1800
   639 = E000			GAME_LMS	= $E000
   640 = 0000			HPOSP0	= $00
   641 = 0001			HPOSP1	= $01
   642 = 0000			SHIPHPOS	= $00
   643 2221			@exit
   644
   645 2221 A2 00		@halt	ldx #$00
   646 2223 9A				txs
   647 					.ifdef MAIN.@DEFINES.ROMOFF
   648 					inc portb
   649 					.endif
   650
   651 2224 A0 01			ldy #$01
   652
   653 2226 60				rts
   654
   655 				; ------------------------------------------------------------
   656
   657 2227 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   658
   659 				; ------------------------------------------------------------
   660
   661 2237			.local	@DEFINES
   662 2237			ATARI
   663 				.endl
   664
   665 2237			.local	@RESOURCE
   666 				.endl
   667
   668 				.endl							; MAIN
   669
   670 				; ------------------------------------------------------------
   671 				; ------------------------------------------------------------
   672
   673 				.macro	UNITINITIALIZATION
   674 				
   675 					.ifdef MAIN.SYSTEM.@UnitInit
   676 					jsr MAIN.SYSTEM.@UnitInit
   677 					eif
   678 				
   679 					.ifdef MAIN.REGISTERS.@UnitInit
   680 					jsr MAIN.REGISTERS.@UnitInit
   681 					eif
   682 				
   683 					.ifdef MAIN.GR.@UnitInit
   684 					jsr MAIN.GR.@UnitInit
   685 					eif
   686 				
   687 					.ifdef MAIN.SYS.@UnitInit
   688 					jsr MAIN.SYS.@UnitInit
   689 					eif
   690 				.endm
   691
   692 				; ------------------------------------------------------------
   693
   694 					ift .SIZEOF(MAIN.SYSTEM) > 0
   695 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   695 				SYSTEM: $20FE..$2142
   696 					eif
   697
   698 					ift .SIZEOF(MAIN.REGISTERS) > 0
   699 					.print 'REGISTERS: ',MAIN.REGISTERS,'..',MAIN.REGISTERS+.SIZEOF(MAIN.REGISTERS)-1
   700 					eif
   701
   702 					ift .SIZEOF(MAIN.GR) > 0
   703 					.print 'GR: ',MAIN.GR,'..',MAIN.GR+.SIZEOF(MAIN.GR)-1
   703 				GR: $2143..$2143
   704 					eif
   705
   706 					ift .SIZEOF(MAIN.SYS) > 0
   707 					.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
   707 				SYS: $2144..$2188
   708 					eif
   709
   710 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
   710 				CODE: $2000..$2236
   711
   712 				; ------------------------------------------------------------
   713
   714 2237				.align $04
   715
   716 2238			DATAORIGIN
   717 2238-223D> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
   718
   719 = 0006			VARINITSIZE	= *-DATAORIGIN
   720 = 000D			VARDATASIZE	= 13
   721
   722 = 2245			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   723
   724 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   724 				DATA: $2238..$2245
   725
   726 02E0-02E1> C8 20			run START
   727
   728 				; ------------------------------------------------------------
   729
   730 				.macro	STATICDATA
   731 				.endm
   732
   733 					end
