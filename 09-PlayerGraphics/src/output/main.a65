; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.5 [2020/12/01] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

fxptr	.ds 2						; VBXE pointer
psptr	.ds 2						; PROGRAMSTACK Pointer

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.endif

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.endif

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCASM 'res/gr_dl.asm' GR.DL_2 0 0 0 0 0 0 0 0
	RCDATA 'res/gfx_ship.bin' GR.PLAYER_SHIP_ADDRESS 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',fxptr,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>0
	@fill #VADR #VLEN #$00
	eif

	mwa #PROGRAMSTACK psptr

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.endif

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0007

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	FILLBYTE_0042					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta COUNT
	lda :STACKORIGIN+STACKWIDTH,x
	sta COUNT+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 029  ---------------------

	jsr @fill


; ------------------------------------------------------------

A	= edx
COUNT	= ecx
VALUE	= eax
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_004C					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta COUNT
	lda :STACKORIGIN+STACKWIDTH,x
	sta COUNT+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta DEST
	lda :STACKORIGIN+STACKWIDTH,x
	sta DEST+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta SOURCE
	lda :STACKORIGIN+STACKWIDTH,x
	sta SOURCE+1
	dex

; ---------------------  ASM Block 031  ---------------------

	jsr @move


; ------------------------------------------------------------

SOURCE	= edx
DEST	= ecx
COUNT	= eax
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PAUSE_006A					; PROCEDURE | ASSEMBLER | OVERLOAD

; ---------------------  ASM Block 039  ---------------------

	lda:cmp:req :rtclok+2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
TVSYSTEM	= $D014
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	REGISTERS					; UNIT

; ------------------------------------------------------------

RTCLOK	= $14
HPOSP0	= $D000
HPOSP1	= $D001
SIZEP0	= $D008
SIZEP1	= $D009
COLPM0	= $D012
COLPM1	= $D013
COLPF1	= $D017
COLPF2	= $D018
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
PORTB	= $D301
DMACTL	= $D400
SDLSTL	= $D402
PMBASE	= $D407
NMIEN	= $D40E
DLIST	= $D402
NMIVEC	= $FFFA
HPOSP01	= $D000

.endl							; UNIT REGISTERS

; ------------------------------------------------------------

.local	GR						; UNIT

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

	rts

; ------------------------------------------------------------

MISSILES_OFFSET	= $0308
PLAYER0_OFFSET	= $0408
PLAYER1_OFFSET	= $0508
PM_ADDRESS	= $1000
PLAYER_SHIP_ADDRESS	= $1000
PLAYER_SHIP_SEG	= $0A
DL_2	= $1800
GAME_LMS	= $E000

.endl							; UNIT GR

; ------------------------------------------------------------

.local	SYS						; UNIT

.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT

; ---------------------  ASM Block 049  ---------------------


      bit NMIST \ bpl vbi   ; check kind of interrupt
.def  :__dlijmp
      jmp __off               ; VDSLST
vbi:  inc RTCLOK+2
.def  :__vbijmp
      jmp __off               ; VBIVEC
.def  :__off

	rti						; ret
.endl

.local	SETVBI						; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 050  ---------------------


  mwa a __vbijmp+1


; ------------------------------------------------------------

A	= DATAORIGIN+$000B

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SYSTEMOFF					; PROCEDURE

; optimize FAIL ('SYSTEM.PAUSE_006A', SYS), line = 62

	jsr SYSTEM.PAUSE_006A

; ---------------------  ASM Block 054  ---------------------

 sei 

; optimize OK (SYS), line = 63

	lda #$00
	sta REGISTERS.NMIEN
	lda #$FE
	sta REGISTERS.PORTB
	lda <NMI
	sta REGISTERS.NMIVEC
	lda >NMI
	sta REGISTERS.NMIVEC+1
	lda #$40
	sta REGISTERS.NMIEN
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

	rts

; ------------------------------------------------------------

.endl							; UNIT SYS

.local	VBI						; PROCEDURE | INTERRUPT

; ---------------------  ASM Block 055  ---------------------

 phr 

; optimize FAIL (0, main.pas), line = 21

	inc HPOSP0
	inc HPOSP1
	lda SHIPHPOS
	sta REGISTERS.HPOSP01
	lda SHIPHPOS+1
	sta REGISTERS.HPOSP01+1

; ---------------------  ASM Block 056  ---------------------

 plr 
	rti						; ret
.endl

.local	INIT						; PROCEDURE

; optimize FAIL ('SYS.SYSTEMOFF', main.pas), line = 28

	jsr SYS.SYSTEMOFF
	lda #$00
	sta REGISTERS.DMACTL

; optimize OK (main.pas), line = 30

	lda #$2C
	sta HPOSP0
	lda #$34
	sta HPOSP1

; optimize OK (main.pas), line = 31

	lda SHIPHPOS
	sta REGISTERS.HPOSP01
	lda SHIPHPOS+1
	sta REGISTERS.HPOSP01+1

; optimize OK (main.pas), line = 32

	lda #$10
	sta REGISTERS.PMBASE

; optimize OK (main.pas), line = 33

	lda #$00
	sta REGISTERS.SIZEP0
	sta REGISTERS.SIZEP1

; optimize OK (main.pas), line = 34

	lda #$0F
	sta REGISTERS.COLPM0
	sta REGISTERS.COLPM1

; optimize OK (main.pas), line = 35

	lda #$03
	sta REGISTERS.GRACTL

; optimize OK (main.pas), line = 36

	lda #$00
	sta REGISTERS.PRIOR

; optimize OK (main.pas), line = 38

	lda #$08
	sta :edx
	lda #$13
	sta :edx+1
	lda #$F8
	sta :ecx
	lda #$04
	sta :ecx+1
	lda #$00
	sta :eax
	jsr @fill

; optimize OK (main.pas), line = 39

	ldy #$09
	mva:rpl $1000,y $1408,y-

; optimize OK (main.pas), line = 40

	ldy #$09
	mva:rpl $100A,y $1508,y-

; optimize FAIL ('SYSTEM.PAUSE_006A', main.pas), line = 42

	jsr SYSTEM.PAUSE_006A
	lda #$3E
	sta REGISTERS.DMACTL
	inx
	mva <VBI :STACKORIGIN,x
	mva >VBI :STACKORIGIN+STACKWIDTH,x
	jsr SYS.SETVBI
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0007

; optimize FAIL ('INIT', main.pas), line = 46

	jsr INIT

; --- RepeatUntilProlog
l_00DB

; optimize OK (main.pas), line = 47

	jmp l_00DB

; ------------------------------------------------------------

MISSILES_OFFSET	= $0308
PLAYER0_OFFSET	= $0408
PLAYER1_OFFSET	= $0508
PM_ADDRESS	= $1000
PLAYER_SHIP_ADDRESS	= $1000
PLAYER_SHIP_SEG	= $0A
DL_2	= $1800
GAME_LMS	= $E000
HPOSP0	= $00
HPOSP1	= $01
SHIPHPOS	= $00
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.endif

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif

	.ifdef MAIN.REGISTERS.@UnitInit
	jsr MAIN.REGISTERS.@UnitInit
	eif

	.ifdef MAIN.GR.@UnitInit
	jsr MAIN.GR.@UnitInit
	eif

	.ifdef MAIN.SYS.@UnitInit
	jsr MAIN.SYS.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.REGISTERS) > 0
	.print 'REGISTERS: ',MAIN.REGISTERS,'..',MAIN.REGISTERS+.SIZEOF(MAIN.REGISTERS)-1
	eif

	ift .SIZEOF(MAIN.GR) > 0
	.print 'GR: ',MAIN.GR,'..',MAIN.GR+.SIZEOF(MAIN.GR)-1
	eif

	ift .SIZEOF(MAIN.SYS) > 0
	.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $04

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 13

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.endm

	end
