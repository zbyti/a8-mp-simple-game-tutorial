mads 2.1.1
  1133 					opt l+
    98 = 0000				?EXTDETECT = 0
    99 = 0000				?VBXDETECT = 0
   100
   101 2075				RCASM 'res/gr_dl.asm' DL_2 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 001A			len = .sizeof(_DL_2)
     6 				mcpy	ift main.DL_2+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 11 +  MWA #MAIN.DL_2 ECX
    13 2088 A9 1A 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: const.inc
     1 = 1000			PM_ADR              = $1000;                      // players & missiles memory (2K) start address
     2 = 1300			M0_ADR              = PM_ADR + $300;              // missile 0 start memory address
     3 = 1400			P0_ADR              = PM_ADR + $400;              // player 0 start memory address
     4 = 1500			P1_ADR              = PM_ADR + $500;              // player 1 start memory address
     5 = 1000			GFX_SHIP_ADR        = $1000;                      // ship gfx memory start address, ship size = 20 bytes, 16 bytes for gfx and 4 bytes fo top/bottom empty rows
     6 = 000A			GFX_SHIP_SEG        = 10;                         // ship gfx 10 byte segment, 10B for P0 & 10B for P1
     8 = 0E0E			SHIP_COL            = $0e0e;
     9 = 0030			SHIP_LEFT_LIMIT     = 48;
    10 = 00C0			SHIP_RIGHT_LIMIT    = SHIP_LEFT_LIMIT + (16 * 9);
    11 = 0020			SHIP_TOP_LIMIT      = 32;
    12 = 00A0			SHIP_BOTTOM_LIMIT   = 10 * 16;
    14 = 0008			JOY_LEFT            = %1000;
    15 = 0004			JOY_RIGHT           = %0100;
    16 = 0002			JOY_UP              = %0010;
    17 = 0001			JOY_DOWN            = %0001;
    19 = 1100			DL_2                = $1100;                      // display list memory start address for ANTIC mode 2
    20 = E000			GAME_LMS            = $e000;                      // Load Memory Scan address
     3 1100			dl2
     4 1100 F0 70 F0		    .byte $f0,$70,$f0
     5 1103 42 00 E0		    .byte $42,a(GAME_LMS)
     6 1106 02 02 02 02 02 02 + :17 .byte 2
     7 1117 41 00 11		    .byte $41,a(dl2)
    23 					.print '$R RCASM   ',main.DL_2,'..',main.DL_2+len-1," 'res/gr_dl.asm'"
    23 				$R RCASM   $1100..$1119 'res/gr_dl.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: main.a65
   102 20B0				RCDATA 'res/gfx_ship.bin' GFX_SHIP_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0014			len = .filesize('res/gfx_ship.bin')
    28 20B0				org main.GFX_SHIP_ADR
    30 1000-1013> 00 70 7B 1E + 	ins 'res/gfx_ship.bin'
    32 					.print '$R RCDATA  ',main.GFX_SHIP_ADR,'..',*-1," 'res/gfx_ship.bin'"
    32 				$R RCDATA  $1000..$1013 'res/gfx_ship.bin'
Source: main.a65
   103 				.endl
   104
   105 				; ------------------------------------------------------------
   106
   107 1014				org CODEORIGIN
   108
   109 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
Source: main.a65
   110
   111 				; ------------------------------------------------------------
   112
   113 2000			RTLIB
   114 2000				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
   166 					opt l+
   115
   116 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   116 				ZPAGE: $0080..$00D7
   117
   118 				.print 'RTLIB: ',RTLIB,'..',*-1
   118 				RTLIB: $2000..$20C7
   119
   120 				; ------------------------------------------------------------
   121
   122 20C8			START
   123 20C8 BA				tsx
   124 20C9 8E DB 23			stx MAIN.@halt+1
   125
   126 					.ifdef fmulinit
   127 					fmulinit
   128 					eif
   129
   130 = 000E			VLEN	= VARDATASIZE-VARINITSIZE
   131 = 23FA			VADR	= DATAORIGIN+VARINITSIZE
   132
   133 					ift VADR > $BFFF
   134 					ert 'Invalid memory address range ',VADR
   135 					eli (VLEN>0) && (VLEN<=256)
   136 20CC A2 F2			ldx #256-VLEN
   137 20CE A9 00			lda #$00
   138 20D0 9D 08 23 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   139 					eli VLEN>0
   140 					@fill #VADR #VLEN #$00
   141 					eif
   142
   143 20D6 A9 08 85 82 A9 24 + 	mwa #PROGRAMSTACK psptr
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 					icl 'atari\romoff.asm'
   147 					.endif
   148
   149 20DE A2 0F			ldx #$0F					; DOS II+/D ParamStr
   150 20E0 BD 40 03 9D E0 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   151
   152 20E9 E8				inx						; X = 0
   153 20EA 86 90			stx bp						; BP = 0
   154
   155 20EC 8E 08 D2			stx audctl					; reset POKEY
   156 20EF A9 03			lda #3
   157 20F1 8D 0F D2			sta skctl
   158
   159 20F4 CA				dex						; X = 255
   160
   161 20F5				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
    11 20F5 20 9F 21			jsr MAIN.SYS.@UnitInit
    15 20F8 20 AB 21			jsr MAIN.GR.@UnitInit
    19 20FB 20 D1 22			jsr MAIN.SPRITES.@UnitInit
   162
   163 20FE			.local	MAIN						; PROCEDURE
   164
   165 20FE 4C D4 23			jmp l_0007
   166
   167 				; ------------------------------------------------------------
   168
   169 2101			.local	SYSTEM						; UNIT
   170
   171 2101			.local	FILLBYTE_0042					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   172
   173 				; ------------------------------------------------------------
   174
   175 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   176 				; as Pointer
   177 2101 B5 98			lda :STACKORIGIN,x
   178 2103 85 84			sta VALUE
   179 2105 CA				dex
   180
   181 				; ------------------------------------------------------------
   182
   183 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   184 				; as Pointer
   185 2106 B5 98			lda :STACKORIGIN,x
   186 2108 85 8C			sta COUNT
   187 210A B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   188 210C 85 8D			sta COUNT+1
   189 210E CA				dex
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   194 				; as Pointer
   195 210F B5 98			lda :STACKORIGIN,x
   196 2111 85 88			sta A
   197 2113 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   198 2115 85 89			sta A+1
   199 2117 CA				dex
   200
   201 				; ---------------------  ASM Block 029  ---------------------
   202
   203 2118 20 80 20			jsr @fill
   204
   205
   206 				; ------------------------------------------------------------
   207
   208 = 0088			A	= edx
   209 = 008C			COUNT	= ecx
   210 = 0084			VALUE	= eax
   211 211B			@exit
   212 					.ifdef @new
   213 					lda <@VarData
   214 					sta :ztmp
   215 					lda >@VarData
   216 					ldy #@VarDataSize-1
   217 					jmp @FreeMem
   218 					els
   219 211B 60				rts						; ret
   220 					eif
   221 				.endl
   222
   223 211C			.local	MOVE_004C					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   224
   225 				; ------------------------------------------------------------
   226
   227 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   228 				; as Pointer
   229 211C B5 98			lda :STACKORIGIN,x
   230 211E 85 84			sta COUNT
   231 2120 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   232 2122 85 85			sta COUNT+1
   233 2124 CA				dex
   234
   235 				; ------------------------------------------------------------
   236
   237 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   238 				; as Pointer
   239 2125 B5 98			lda :STACKORIGIN,x
   240 2127 85 8C			sta DEST
   241 2129 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   242 212B 85 8D			sta DEST+1
   243 212D CA				dex
   244
   245 				; ------------------------------------------------------------
   246
   247 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   248 				; as Pointer
   249 212E B5 98			lda :STACKORIGIN,x
   250 2130 85 88			sta SOURCE
   251 2132 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   252 2134 85 89			sta SOURCE+1
   253 2136 CA				dex
   254
   255 				; ---------------------  ASM Block 031  ---------------------
   256
   257 2137 20 2B 20			jsr @move
   258
   259
   260 				; ------------------------------------------------------------
   261
   262 = 0088			SOURCE	= edx
   263 = 008C			DEST	= ecx
   264 = 0084			COUNT	= eax
   265 213A			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 213A 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 213B			.local	PAUSE_006A					; PROCEDURE | ASSEMBLER | OVERLOAD
   278
   279 				; ---------------------  ASM Block 039  ---------------------
   280
   281 213B A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   282
   283 2141			@exit
   284 					.ifdef @new
   285 					lda <@VarData
   286 					sta :ztmp
   287 					lda >@VarData
   288 					ldy #@VarDataSize-1
   289 					jmp @FreeMem
   290 					els
   291 2141 60				rts						; ret
   292 					eif
   293 				.endl
   294
   295 				; ------------------------------------------------------------
   296
   297 = 0101			__PORTB_BANKS	= $0101
   298 = 0648			M_PI_2	= $0648
   299 = 0192			D_PI_2	= $0192
   300 = 0004			D_PI_180	= $04
   301 = 0000			MGTIA	= $00
   302 = 0080			MVBXE	= $80
   303 = 0000			VBXE_XDLADR	= $00
   304 = 0100			VBXE_BCBADR	= $0100
   305 = 1000			VBXE_MAPADR	= $1000
   306 = 5000			VBXE_OVRADR	= $5000
   307 = B000			VBXE_WINDOW	= $B000
   308 = 0000			IDLI	= $00
   309 = 0001			IVBL	= $01
   310 = 00FE			CH_DELCHR	= $FE
   311 = 009B			CH_ENTER	= $9B
   312 = 001B			CH_ESC	= $1B
   313 = 001C			CH_CURS_UP	= $1C
   314 = 001D			CH_CURS_DOWN	= $1D
   315 = 001E			CH_CURS_LEFT	= $1E
   316 = 001F			CH_CURS_RIGHT	= $1F
   317 = 007F			CH_TAB	= $7F
   318 = 009B			CH_EOL	= $9B
   319 = 007D			CH_CLR	= $7D
   320 = 00FD			CH_BELL	= $FD
   321 = 007E			CH_DEL	= $7E
   322 = 009C			CH_DELLINE	= $9C
   323 = 009D			CH_INSLINE	= $9D
   324 = 0000			COLOR_BLACK	= $00
   325 = 000E			COLOR_WHITE	= $0E
   326 = 0032			COLOR_RED	= $32
   327 = 0096			COLOR_CYAN	= $96
   328 = 0068			COLOR_VIOLET	= $68
   329 = 00C4			COLOR_GREEN	= $C4
   330 = 0074			COLOR_BLUE	= $74
   331 = 00EE			COLOR_YELLOW	= $EE
   332 = 0028			COLOR_ORANGE	= $28
   333 = 00E4			COLOR_BROWN	= $E4
   334 = 003C			COLOR_LIGHTRED	= $3C
   335 = 0004			COLOR_GRAY1	= $04
   336 = 0006			COLOR_GRAY2	= $06
   337 = 000A			COLOR_GRAY3	= $0A
   338 = 00CC			COLOR_LIGHTGREEN	= $CC
   339 = 007C			COLOR_LIGHTBLUE	= $7C
   340 = 0004			FMOPENREAD	= $04
   341 = 0008			FMOPENWRITE	= $08
   342 = 0009			FMOPENAPPEND	= $09
   343 = 000C			FMOPENREADWRITE	= $0C
   344 = 23F4			SCREENWIDTH	= DATAORIGIN+$0000
   345 = 23F6			SCREENHEIGHT	= DATAORIGIN+$0002
   346 = 23F8			DATESEPARATOR	= DATAORIGIN+$0004
   347 = D014			TVSYSTEM	= $D014
   348 = D20A			RND	= $D20A
   349 = 02C0			adr.PALETTE	= $02C0
   350 2142			.var PALETTE	= adr.PALETTE .word
   351 = D012			adr.HPALETTE	= $D012
   352 2142			.var HPALETTE	= adr.HPALETTE .word
   353 = 23F9			FILEMODE	= DATAORIGIN+$0005
   354 = 23FA			GRAPHMODE	= DATAORIGIN+$0006
   355 = 23FB			IORESULT	= DATAORIGIN+$0007
   356 = 23FC			EOLN	= DATAORIGIN+$0008
   357 = 23FD			RNDSEED	= DATAORIGIN+$0009
   358
   359 = 2142 C0 02		PALETTE
   359 = 2144 12 D0		HPALETTE
   359 				.endl							; UNIT SYSTEM
   360
   361 				; ------------------------------------------------------------
   362
   363 2146			.local	REGISTERS					; UNIT
   364
   365 				; ------------------------------------------------------------
   366
   367 = 0014			RTCLOK	= $14
   368 = D000			HPOSP0	= $D000
   369 = D001			HPOSP1	= $D001
   370 = D004			HPOSM0	= $D004
   371 = D005			HPOSM1	= $D005
   372 = D006			HPOSM2	= $D006
   373 = D007			HPOSM3	= $D007
   374 = D008			SIZEP0	= $D008
   375 = D009			SIZEP1	= $D009
   376 = D00A			SIZEP2	= $D00A
   377 = D00B			SIZEP3	= $D00B
   378 = D00C			SIZEM	= $D00C
   379 = D011			GRAFM	= $D011
   380 = D012			COLPM0	= $D012
   381 = D013			COLPM1	= $D013
   382 = D014			COLPM2	= $D014
   383 = D015			COLPM3	= $D015
   384 = D017			COLPF1	= $D017
   385 = D018			COLPF2	= $D018
   386 = D01A			COLBK	= $D01A
   387 = D01B			PRIOR	= $D01B
   388 = D01D			GRACTL	= $D01D
   389 = D20A			RND	= $D20A
   390 = D300			PORTA	= $D300
   391 = D301			PORTB	= $D301
   392 = D302			PACTL	= $D302
   393 = D400			DMACTL	= $D400
   394 = D402			DLIST	= $D402
   395 = D407			PMBASE	= $D407
   396 = D40A			WSYNC	= $D40A
   397 = D40B			VCOUNT	= $D40B
   398 = D40E			NMIEN	= $D40E
   399 = FFFA			NMIVEC	= $FFFA
   400 = D000			HPOSP01	= $D000
   401 = D008			SIZEP01	= $D008
   402 = D012			COLPM01	= $D012
   403 = 00FF			BMASK01	= $FF
   404 = 00FE			BMASK02	= $FE
   405 = 00FD			B01I	= $FD
   406 = 00FC			B02I	= $FC
   407
   408 				.endl							; UNIT REGISTERS
   409
   410 				; ------------------------------------------------------------
   411
   412 2146			.local	SYS						; UNIT
   413
   414 2146			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
   415
   416 				; ---------------------  ASM Block 049  ---------------------
   417
   418
   419 				      bit NMIST \ bpl vbi     ; check kind of interrupt
   419 2146 2C 0F D4		      BIT NMIST 
   419 2149 10 03		 BPL VBI     
   420 = 214B			.def  :__dlijmp
   421 214B 4C 53 21		      jmp __off               ; VDSLST
   422 214E E6 14		vbi:  inc RTCLOK+2
   423 = 2150			.def  :__vbijmp
   424 2150 4C 53 21		      jmp __off               ; VBIVEC
   425 = 2153			.def  :__off
   426
   427 2153 40				rti						; ret
   428 				.endl
   429
   430 2154			.local	SETVBI						; PROCEDURE | ASSEMBLER
   431
   432 				; ------------------------------------------------------------
   433
   434 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   435 				; as Pointer
   436 2154 B5 98			lda :STACKORIGIN,x
   437 2156 8D FF 23			sta A
   438 2159 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   439 215B 8D 00 24			sta A+1
   440 215E CA				dex
   441
   442 				; ---------------------  ASM Block 050  ---------------------
   443
   444
   445 215F AD FF 23 8D 51 21 +   mwa a __vbijmp+1
   446
   447
   448 				; ------------------------------------------------------------
   449
   450 = 23FF			A	= DATAORIGIN+$000B
   451
   452 = 23FF			@VarData	= A
   453 = 0002			@VarDataSize	= 2
   454
   455 216B			@exit
   456 					.ifdef @new
   457 					lda <@VarData
   458 					sta :ztmp
   459 					lda >@VarData
   460 					ldy #@VarDataSize-1
   461 					jmp @FreeMem
   462 					els
   463 216B 60				rts						; ret
   464 					eif
   465 				.endl
   466
   467 216C			.local	SETDLI						; PROCEDURE | ASSEMBLER
   468
   469 				; ------------------------------------------------------------
   470
   471 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   472 				; as Pointer
   473 216C B5 98			lda :STACKORIGIN,x
   474 216E 8D 01 24			sta A
   475 2171 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   476 2173 8D 02 24			sta A+1
   477 2176 CA				dex
   478
   479 				; ---------------------  ASM Block 051  ---------------------
   480
   481
   482 2177 AD 01 24 8D 4C 21 +   mwa a __dlijmp+1
   483
   484
   485 				; ------------------------------------------------------------
   486
   487 = 2401			A	= DATAORIGIN+$000D
   488
   489 = 2401			@VarData	= A
   490 = 0002			@VarDataSize	= 2
   491
   492 2183			@exit
   493 					.ifdef @new
   494 					lda <@VarData
   495 					sta :ztmp
   496 					lda >@VarData
   497 					ldy #@VarDataSize-1
   498 					jmp @FreeMem
   499 					els
   500 2183 60				rts						; ret
   501 					eif
   502 				.endl
   503
   504 2184			.local	SYSTEMOFF					; PROCEDURE
   505
   506 				; ---------------------  ASM Block 054  ---------------------
   507
   508 2184 78			 sei 
   509
   510 				; optimize OK (SYS), line = 63
   511
   512 2185 A9 00			lda #$00
   513 2187 8D 0E D4			sta REGISTERS.NMIEN
   514 218A A9 FE			lda #$FE
   515 218C 8D 01 D3			sta REGISTERS.PORTB
   516 218F A9 46			lda <NMI
   517 2191 8D FA FF			sta REGISTERS.NMIVEC
   518 2194 A9 21			lda >NMI
   519 2196 8D FB FF			sta REGISTERS.NMIVEC+1
   520 2199 A9 C0			lda #$C0
   521 219B 8D 0E D4			sta REGISTERS.NMIEN
   522 219E			@exit
   523 					.ifdef @new
   524 					lda <@VarData
   525 					sta :ztmp
   526 					lda >@VarData
   527 					ldy #@VarDataSize-1
   528 					jmp @FreeMem
   529 					els
   530 219E 60				rts						; ret
   531 					eif
   532 				.endl
   533
   534 				; ------------------------------------------------------------
   535 				; ------------------------------------------------------------
   536 219F			@UnitInit
   537
   538 219F 60				rts
   539
   540 				; ------------------------------------------------------------
   541
   542 				.endl							; UNIT SYS
   543
   544 				; ------------------------------------------------------------
   545
   546 21A0			.local	GR						; UNIT
   547
   548 21A0			.local	MODE2						; PROCEDURE
   549
   550 				; optimize OK (GR), line = 20
   551
   552 21A0 A9 00			lda #$00
   553 21A2 8D 02 D4			sta REGISTERS.DLIST
   554 21A5 A9 11			lda #$11
   555 21A7 8D 03 D4			sta REGISTERS.DLIST+1
   556 21AA			@exit
   557 					.ifdef @new
   558 					lda <@VarData
   559 					sta :ztmp
   560 					lda >@VarData
   561 					ldy #@VarDataSize-1
   562 					jmp @FreeMem
   563 					els
   564 21AA 60				rts						; ret
   565 					eif
   566 				.endl
   567
   568 				; ------------------------------------------------------------
   569 				; ------------------------------------------------------------
   570 21AB			@UnitInit
   571
   572 21AB 60				rts
   573
   574 				; ------------------------------------------------------------
   575
   576 = 1000			PM_ADR	= $1000
   577 = 1300			M0_ADR	= $1300
   578 = 1400			P0_ADR	= $1400
   579 = 1500			P1_ADR	= $1500
   580 = 1000			GFX_SHIP_ADR	= $1000
   581 = 000A			GFX_SHIP_SEG	= $0A
   582 = 0E0E			SHIP_COL	= $0E0E
   583 = 0030			SHIP_LEFT_LIMIT	= $30
   584 = 00C0			SHIP_RIGHT_LIMIT	= $C0
   585 = 0020			SHIP_TOP_LIMIT	= $20
   586 = 00A0			SHIP_BOTTOM_LIMIT	= $A0
   587 = 0008			JOY_LEFT	= $08
   588 = 0004			JOY_RIGHT	= $04
   589 = 0002			JOY_UP	= $02
   590 = 0001			JOY_DOWN	= $01
   591 = 1100			DL_2	= $1100
   592 = E000			GAME_LMS	= $E000
   593
   594 				.endl							; UNIT GR
   595
   596 				; ------------------------------------------------------------
   597
   598 21AC			.local	SPRITES						; UNIT
   599
   600 21AC			.local	COPYSHIP					; PROCEDURE
   601
   602 				; optimize OK (SPRITES), line = 30
   603
   604 21AC A5 02			lda BSHIPY
   605 21AE 85 8C			sta :ecx
   606 21B0 A9 14			lda #$14
   607 21B2 85 8D			sta :ecx+1
   608 21B4 A9 00			lda #$00
   609 21B6 85 88			sta :edx
   610 21B8 A9 10			lda #$10
   611 21BA 85 89			sta :edx+1
   612 21BC A9 0A			lda #$0A
   613 21BE 85 84			sta :eax
   614 21C0 A9 00			lda #$00
   615 21C2 85 85			sta :eax+1
   616 21C4 20 2B 20			jsr @move
   617
   618 				; optimize OK (SPRITES), line = 31
   619
   620 21C7 A5 02			lda BSHIPY
   621 21C9 85 8C			sta :ecx
   622 21CB A9 15			lda #$15
   623 21CD 85 8D			sta :ecx+1
   624 21CF A9 0A			lda #$0A
   625 21D1 85 88			sta :edx
   626 21D3 A9 10			lda #$10
   627 21D5 85 89			sta :edx+1
   628 21D7 A9 0A			lda #$0A
   629 21D9 85 84			sta :eax
   630 21DB A9 00			lda #$00
   631 21DD 85 85			sta :eax+1
   632 21DF 20 2B 20			jsr @move
   633 21E2			@exit
   634 					.ifdef @new
   635 					lda <@VarData
   636 					sta :ztmp
   637 					lda >@VarData
   638 					ldy #@VarDataSize-1
   639 					jmp @FreeMem
   640 					els
   641 21E2 60				rts						; ret
   642 					eif
   643 				.endl
   644
   645 21E3			.local	INIT						; PROCEDURE
   646
   647 				; optimize OK (SPRITES), line = 36
   648
   649 21E3				.LOCAL
   650 21E3 A0 00			ldy #$00
   651 21E5 98				tya
   652 21E6 99 00 13 99 80 13 + fill	:10 sta $1300+#*$80,y
   653 2204 C8				iny
   654 2205 10 DF			bpl fill
   655 					.ENDL
   656
   657 				; optimize OK (SPRITES), line = 37
   658
   659 2207 A0 70			ldy #256-$90
   660 2209 A9 FF			lda #$FF
   661 220B 99 B0 12 C8 D0 FA		sta:rne $1320+$90-256,y+
   662
   663 				; optimize OK (SPRITES), line = 39
   664
   665 2211 A9 10			lda #$10
   666 2213 8D 07 D4			sta REGISTERS.PMBASE
   667
   668 				; optimize OK (SPRITES), line = 40
   669
   670 2216 A9 0A			lda #$0A
   671 2218 8D 15 D0			sta REGISTERS.COLPM3
   672 221B A9 0E			lda #$0E
   673 221D 8D 12 D0			sta REGISTERS.COLPM01
   674 2220 8D 13 D0			sta REGISTERS.COLPM01+1
   675
   676 				; optimize OK (SPRITES), line = 41
   677
   678 2223 A9 50			lda #$50
   679 2225 85 02			sta BSHIPY
   680 2227 A9 30			lda #$30
   681 2229 85 00			sta BHPOSP0
   682 222B A9 38			lda #$38
   683 222D 85 01			sta BHPOSP1
   684 222F A5 00			lda WSHIPX
   685 2231 8D 00 D0			sta REGISTERS.HPOSP01
   686 2234 A5 01			lda WSHIPX+1
   687 2236 8D 01 D0			sta REGISTERS.HPOSP01+1
   688
   689 				; optimize OK (SPRITES), line = 42
   690
   691 2239 A9 00			lda #$00
   692 223B 8D 08 D0			sta REGISTERS.SIZEP01
   693 223E 8D 09 D0			sta REGISTERS.SIZEP01+1
   694 2241 8D 0C D0			sta REGISTERS.SIZEM
   695 2244 8D 1B D0			sta REGISTERS.PRIOR
   696 2247 A9 03			lda #$03
   697 2249 8D 1D D0			sta REGISTERS.GRACTL
   698
   699 				; optimize FAIL ('COPYSHIP', SPRITES), line = 44
   700
   701 224C 20 AC 21			jsr COPYSHIP
   702 224F			@exit
   703 					.ifdef @new
   704 					lda <@VarData
   705 					sta :ztmp
   706 					lda >@VarData
   707 					ldy #@VarDataSize-1
   708 					jmp @FreeMem
   709 					els
   710 224F 60				rts						; ret
   711 					eif
   712 				.endl
   713
   714 2250			.local	MOVESHIP					; PROCEDURE
   715
   716 				; optimize OK (SPRITES), line = 49
   717
   718 2250 A9 0C			lda #$0C
   719 2252 85 FF			sta REGISTERS.BMASK01
   720
   721 				; optimize OK (SPRITES), line = 50
   722
   723 2254 A9 01			lda #$01
   724 2256 85 FD			sta REGISTERS.B01I
   725
   726 2258			l_00F1
   727 				; --- ForToDoCondition
   728
   729 				; optimize OK (SPRITES), line = 51
   730
   731 2258 A5 03			lda JOYDIRECTION
   732 225A 25 FF			and REGISTERS.BMASK01
   733 225C 8D 03 24			sta @CASETMP_0002
   734 225F C9 04			cmp #$04
   735 2261 D0 20			jne l_0110
   736 2263			@
   737
   738 				; optimize OK (SPRITES), line = 53
   739
   740 2263 A5 01			lda BHPOSP1
   741 2265 C9 C0			cmp #$C0
   742 2267 B0 17			jcs l_0122
   743
   744 				; optimize OK (SPRITES), line = 54
   745
   746 2269 A5 00			lda WSHIPX
   747 226B 18 69 01			add #$01
   748 226E 85 00			sta WSHIPX
   749 2270 A5 01			lda WSHIPX+1
   750 2272 69 01			adc #$01
   751 2274 85 01			sta WSHIPX+1
   752 2276 A5 00			lda WSHIPX
   753 2278 8D 00 D0			sta REGISTERS.HPOSP01
   754 227B A5 01			lda WSHIPX+1
   755 227D 8D 01 D0			sta REGISTERS.HPOSP01+1
   756 2280			l_0122
   757
   758 2280 4C C8 22			jmp a_0002
   759 2283			l_0110
   760 2283 C9 08			cmp #$08
   761 2285 D0 20			jne l_0134
   762 2287			@
   763
   764 				; optimize OK (SPRITES), line = 58
   765
   766 2287 A5 00			lda BHPOSP0
   767 2289 C9 31			cmp #$31
   768 228B 90 17			jcc l_0146
   769
   770 				; optimize OK (SPRITES), line = 59
   771
   772 228D A5 00			lda WSHIPX
   773 228F 38 E9 01			sub #$01
   774 2292 85 00			sta WSHIPX
   775 2294 A5 01			lda WSHIPX+1
   776 2296 E9 01			sbc #$01
   777 2298 85 01			sta WSHIPX+1
   778 229A A5 00			lda WSHIPX
   779 229C 8D 00 D0			sta REGISTERS.HPOSP01
   780 229F A5 01			lda WSHIPX+1
   781 22A1 8D 01 D0			sta REGISTERS.HPOSP01+1
   782 22A4			l_0146
   783
   784 22A4 4C C8 22			jmp a_0002
   785 22A7			l_0134
   786 22A7 C9 02			cmp #$02
   787 22A9 D0 0E			jne l_0158
   788 22AB			@
   789
   790 				; optimize OK (SPRITES), line = 63
   791
   792 22AB A5 02			lda BSHIPY
   793 22AD C9 21			cmp #$21
   794 22AF 90 05			jcc l_016A
   795
   796 				; optimize FAIL (0, SPRITES), line = 64
   797
   798 22B1 C6 02			dec BSHIPY
   799 22B3 20 AC 21			jsr COPYSHIP
   800 22B6			l_016A
   801
   802 22B6 4C C8 22			jmp a_0002
   803 22B9			l_0158
   804 22B9 C9 01			cmp #$01
   805 22BB D0 0B			jne l_017B
   806 22BD			@
   807
   808 				; optimize OK (SPRITES), line = 68
   809
   810 22BD A5 02			lda BSHIPY
   811 22BF C9 A0			cmp #$A0
   812 22C1 B0 05			jcs l_018D
   813
   814 				; optimize FAIL (0, SPRITES), line = 69
   815
   816 22C3 E6 02			inc BSHIPY
   817 22C5 20 AC 21			jsr COPYSHIP
   818 22C8			l_018D
   819
   820 22C8			l_017B
   821 22C8			a_0002
   822
   823 				; optimize OK (SPRITES), line = 73
   824
   825 22C8 A9 03			lda #$03
   826 22CA 85 FF			sta REGISTERS.BMASK01
   827
   828 				; --- ForToDoEpilog
   829 22CC C6 FD			dec REGISTERS.B01I
   830 22CE 10 88			jpl l_00F1
   831 22D0			l_00FF
   832
   833 				; ------------------------------------------------------------
   834
   835 = 0000			@FORTMP_00EE	= $00
   836 = 2403			@CASETMP_0002	= DATAORIGIN+$000F
   837
   838 = 2403			@VarData	= @CASETMP_0002
   839 = 0001			@VarDataSize	= 1
   840
   841 22D0			@exit
   842 					.ifdef @new
   843 					lda <@VarData
   844 					sta :ztmp
   845 					lda >@VarData
   846 					ldy #@VarDataSize-1
   847 					jmp @FreeMem
   848 					els
   849 22D0 60				rts						; ret
   850 					eif
   851 				.endl
   852
   853 				; ------------------------------------------------------------
   854 				; ------------------------------------------------------------
   855 22D1			@UnitInit
   856
   857 22D1 60				rts
   858
   859 				; ------------------------------------------------------------
   860
   861 = 0003			JOYDIRECTION	= $03
   862 = 1000			PM_ADR	= $1000
   863 = 1300			M0_ADR	= $1300
   864 = 1400			P0_ADR	= $1400
   865 = 1500			P1_ADR	= $1500
   866 = 1000			GFX_SHIP_ADR	= $1000
   867 = 000A			GFX_SHIP_SEG	= $0A
   868 = 0E0E			SHIP_COL	= $0E0E
   869 = 0030			SHIP_LEFT_LIMIT	= $30
   870 = 00C0			SHIP_RIGHT_LIMIT	= $C0
   871 = 0020			SHIP_TOP_LIMIT	= $20
   872 = 00A0			SHIP_BOTTOM_LIMIT	= $A0
   873 = 0008			JOY_LEFT	= $08
   874 = 0004			JOY_RIGHT	= $04
   875 = 0002			JOY_UP	= $02
   876 = 0001			JOY_DOWN	= $01
   877 = 1100			DL_2	= $1100
   878 = E000			GAME_LMS	= $E000
   879 = 0000			BHPOSP0	= $00
   880 = 0001			BHPOSP1	= $01
   881 = 0002			BSHIPY	= $02
   882 = 0000			WSHIPX	= $00
   883
   884 				.endl							; UNIT SPRITES
   885
   886 22D2			.local	VBI						; PROCEDURE | INTERRUPT
   887
   888 				; ---------------------  ASM Block 055  ---------------------
   889
   890 22D2 48 8A 48 98 48	 phr 
   891
   892 				; ---------------------  ASM Block 056  ---------------------
   893
   894 22D7 68 A8 68 AA 68	 plr 
   895 22DC 40				rti						; ret
   896 				.endl
   897
   898 22DD			.local	JOY						; PROCEDURE | INTERRUPT
   899
   900 				; ---------------------  ASM Block 057  ---------------------
   901
   902 22DD 48 8A 48 98 48	 phr 
   903
   904 				; ---------------------  ASM Block 058  ---------------------
   905
   906 22E2 8D 0A D4		 sta WSYNC 
   907
   908 				; optimize OK (main.pas), line = 31
   909
   910 22E5 A9 0F			lda #$0F
   911 22E7 8D 1A D0			sta REGISTERS.COLBK
   912
   913 				; optimize OK (main.pas), line = 33
   914
   915 22EA AD 00 D3			lda REGISTERS.PORTA
   916 22ED 85 03			sta SPRITES.JOYDIRECTION
   917
   918 				; optimize OK (main.pas), line = 34
   919
   920 22EF 29 0F			and #$0F
   921 22F1 C9 0F			cmp #$0F
   922 22F3 F0 03			jeq l_01CE
   923 22F5 20 50 22			jsr SPRITES.MOVESHIP
   924 22F8			l_01CE
   925
   926 				; optimize OK (main.pas), line = 36
   927
   928 22F8 A9 00			lda #$00
   929 22FA 8D 1A D0			sta REGISTERS.COLBK
   930
   931 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 38
   932
   933 22FD E8				inx
   934 22FE AD 06 24 95 98		mva PSTARS :STACKORIGIN,x
   935 2303 AD 07 24 95 A8		mva PSTARS+1 :STACKORIGIN+STACKWIDTH,x
   936 2308 20 6C 21			jsr SYS.SETDLI
   937
   938 				; ---------------------  ASM Block 059  ---------------------
   939
   940 230B 68 A8 68 AA 68	 plr 
   941 2310 40				rti						; ret
   942 				.endl
   943
   944 2311			.local	STARS						; PROCEDURE | INTERRUPT
   945
   946 				; ---------------------  ASM Block 060  ---------------------
   947
   948 2311 48 8A 48 98 48	 phr 
   949
   950 				; optimize OK (main.pas), line = 47
   951
   952 2316 A9 7C			lda #$7C
   953 2318 85 FE			sta B01I
   954
   955 231A			l_01E6
   956 				; --- ForToDoCondition
   957
   958 				; ---------------------  ASM Block 061  ---------------------
   959
   960 231A 8D 0A D4		 sta WSYNC 
   961
   962 				; optimize OK (main.pas), line = 49
   963
   964 231D A4 FE			ldy B01I
   965 231F B9 00 12			lda adr.ASTARS,y
   966 2322 8D 07 D0			sta REGISTERS.HPOSM3
   967
   968 				; optimize OK (main.pas), line = 50
   969
   970 2325 B9 00 12			lda adr.ASTARS,y
   971 2328 38 F9 7D 12			sub adr.ASPEED,y
   972 232C 99 00 12			sta adr.ASTARS,y
   973
   974 				; optimize OK (main.pas), line = 51
   975
   976 232F AD 0A D2			lda SYSTEM.RND
   977 2332 8D 15 D0			sta REGISTERS.COLPM3
   978
   979 				; --- ForToDoEpilog
   980 2335 C6 FE			dec B01I
   981 2337 10 E1			jpl l_01E6
   982 2339			l_01F4
   983
   984 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 54
   985
   986 2339 E8				inx
   987 233A AD 04 24 95 98		mva PJOY :STACKORIGIN,x
   988 233F AD 05 24 95 A8		mva PJOY+1 :STACKORIGIN+STACKWIDTH,x
   989 2344 20 6C 21			jsr SYS.SETDLI
   990
   991 				; ---------------------  ASM Block 062  ---------------------
   992
   993 2347 68 A8 68 AA 68	 plr 
   994
   995 				; ------------------------------------------------------------
   996
   997 = 0000			@FORTMP_01E3	= $00
   998 234C 40				rti						; ret
   999 				.endl
  1000
  1001 234D			.local	INIT						; PROCEDURE
  1002
  1003 				; optimize FAIL ('SYSTEM.PAUSE_006A', main.pas), line = 61
  1004
  1005 234D 20 3B 21			jsr SYSTEM.PAUSE_006A
  1006 2350 A9 00			lda #$00
  1007 2352 8D 00 D4			sta REGISTERS.DMACTL
  1008 2355 20 84 21			jsr SYS.SYSTEMOFF
  1009
  1010 				; optimize OK (main.pas), line = 63
  1011
  1012 2358 A9 00			lda #$00
  1013 235A 85 88			sta :edx
  1014 235C A9 E0			lda #$E0
  1015 235E 85 89			sta :edx+1
  1016 2360 A9 C0			lda #$C0
  1017 2362 85 8C			sta :ecx
  1018 2364 A9 03			lda #$03
  1019 2366 85 8D			sta :ecx+1
  1020 2368 A9 00			lda #$00
  1021 236A 85 84			sta :eax
  1022 236C 20 80 20			jsr @fill
  1023
  1024 				; optimize OK (main.pas), line = 65
  1025
  1026 236F A9 7C			lda #$7C
  1027 2371 85 FE			sta B01I
  1028
  1029 2373			l_022B
  1030 				; --- ForToDoCondition
  1031
  1032 				; optimize OK (main.pas), line = 66
  1033
  1034 2373 A4 FE			ldy B01I
  1035 2375 AD 0A D2			lda SYSTEM.RND
  1036 2378 99 00 12			sta adr.ASTARS,y
  1037
  1038 				; optimize OK (main.pas), line = 67
  1039
  1040 237B 29 03			and #$03
  1041 237D 18 69 01			add #$01
  1042 2380 99 7D 12			sta adr.ASPEED,y
  1043
  1044 				; --- ForToDoEpilog
  1045 2383 C6 FE			dec B01I
  1046 2385 10 EC			jpl l_022B
  1047 2387			l_0239
  1048
  1049 				; optimize FAIL ('SPRITES.INIT', main.pas), line = 70
  1050
  1051 2387 20 E3 21			jsr SPRITES.INIT
  1052
  1053 				; optimize FAIL ('GR.MODE2', main.pas), line = 71
  1054
  1055 238A 20 A0 21			jsr GR.MODE2
  1056 238D A9 00			lda #$00
  1057 238F 8D 1A D0			sta REGISTERS.COLBK
  1058 2392 A9 02			lda #$02
  1059 2394 8D 18 D0			sta REGISTERS.COLPF2
  1060
  1061 				; optimize OK (main.pas), line = 72
  1062
  1063 2397 AD 02 D3			lda REGISTERS.PACTL
  1064 239A 09 04			ora #$04
  1065 239C 8D 02 D3			sta REGISTERS.PACTL
  1066
  1067 				; optimize OK (main.pas), line = 73
  1068
  1069 239F A9 DD			lda <JOY
  1070 23A1 8D 04 24			sta PJOY
  1071 23A4 A9 22			lda >JOY
  1072 23A6 8D 05 24			sta PJOY+1
  1073 23A9 A9 11			lda <STARS
  1074 23AB 8D 06 24			sta PSTARS
  1075 23AE A9 23			lda >STARS
  1076 23B0 8D 07 24			sta PSTARS+1
  1077
  1078 				; optimize FAIL ('SYS.SETVBI', main.pas), line = 75
  1079
  1080 23B3 E8				inx
  1081 23B4 A9 D2 95 98			mva <VBI :STACKORIGIN,x
  1082 23B8 A9 22 95 A8			mva >VBI :STACKORIGIN+STACKWIDTH,x
  1083 23BC 20 54 21			jsr SYS.SETVBI
  1084
  1085 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 76
  1086
  1087 23BF E8				inx
  1088 23C0 A9 DD 95 98			mva <JOY :STACKORIGIN,x
  1089 23C4 A9 22 95 A8			mva >JOY :STACKORIGIN+STACKWIDTH,x
  1090 23C8 20 6C 21			jsr SYS.SETDLI
  1091
  1092 				; optimize FAIL ('SYSTEM.PAUSE_006A', main.pas), line = 78
  1093
  1094 23CB 20 3B 21			jsr SYSTEM.PAUSE_006A
  1095 23CE A9 3E			lda #$3E
  1096 23D0 8D 00 D4			sta REGISTERS.DMACTL
  1097
  1098 				; ------------------------------------------------------------
  1099
  1100 = 0000			@FORTMP_0228	= $00
  1101 23D3			@exit
  1102 					.ifdef @new
  1103 					lda <@VarData
  1104 					sta :ztmp
  1105 					lda >@VarData
  1106 					ldy #@VarDataSize-1
  1107 					jmp @FreeMem
  1108 					els
  1109 23D3 60				rts						; ret
  1110 					eif
  1111 				.endl
  1112 23D4			l_0007
  1113
  1114 				; optimize FAIL ('INIT', main.pas), line = 82
  1115
  1116 23D4 20 4D 23			jsr INIT
  1117
  1118 				; --- RepeatUntilProlog
  1119 23D7			l_027C
  1120
  1121 				; optimize OK (main.pas), line = 83
  1122
  1123 23D7 4C D7 23			jmp l_027C
  1124
  1125 				; ------------------------------------------------------------
  1126
  1127 = 1000			PM_ADR	= $1000
  1128 = 1300			M0_ADR	= $1300
  1129 = 1400			P0_ADR	= $1400
  1130 = 1500			P1_ADR	= $1500
  1131 = 1000			GFX_SHIP_ADR	= $1000
  1132 = 000A			GFX_SHIP_SEG	= $0A
  1133 = 0E0E			SHIP_COL	= $0E0E
  1134 = 0030			SHIP_LEFT_LIMIT	= $30
  1135 = 00C0			SHIP_RIGHT_LIMIT	= $C0
  1136 = 0020			SHIP_TOP_LIMIT	= $20
  1137 = 00A0			SHIP_BOTTOM_LIMIT	= $A0
  1138 = 0008			JOY_LEFT	= $08
  1139 = 0004			JOY_RIGHT	= $04
  1140 = 0002			JOY_UP	= $02
  1141 = 0001			JOY_DOWN	= $01
  1142 = 1100			DL_2	= $1100
  1143 = E000			GAME_LMS	= $E000
  1144 = 00FE			B01I	= $FE
  1145 = 1200			adr.ASTARS	= $1200
  1146 23DA			.var ASTARS	= adr.ASTARS .word
  1147 = 127D			adr.ASPEED	= $127D
  1148 23DA			.var ASPEED	= adr.ASPEED .word
  1149 = 2404			PJOY	= DATAORIGIN+$0010
  1150 = 2406			PSTARS	= DATAORIGIN+$0012
  1151 23DA			@exit
  1152
  1153 23DA A2 00		@halt	ldx #$00
  1154 23DC 9A				txs
  1155 					.ifdef MAIN.@DEFINES.ROMOFF
  1156 					inc portb
  1157 					.endif
  1158
  1159 23DD A0 01			ldy #$01
  1160
  1161 23DF 60				rts
  1162
  1163 				; ------------------------------------------------------------
  1164
  1165 23E0 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1166
  1167 				; ------------------------------------------------------------
  1168
  1169 23F0			.local	@DEFINES
  1170 23F0			ATARI
  1171 				.endl
  1172
  1173 23F0			.local	@RESOURCE
  1174 				.endl
  1175
  1176 = 23F0 00 12		ASTARS
  1176 = 23F2 7D 12		ASPEED
  1176 				.endl							; MAIN
  1177
  1178 				; ------------------------------------------------------------
  1179 				; ------------------------------------------------------------
  1180
  1181 				.macro	UNITINITIALIZATION
  1182 				
  1183 					.ifdef MAIN.SYSTEM.@UnitInit
  1184 					jsr MAIN.SYSTEM.@UnitInit
  1185 					eif
  1186 				
  1187 					.ifdef MAIN.REGISTERS.@UnitInit
  1188 					jsr MAIN.REGISTERS.@UnitInit
  1189 					eif
  1190 				
  1191 					.ifdef MAIN.SYS.@UnitInit
  1192 					jsr MAIN.SYS.@UnitInit
  1193 					eif
  1194 				
  1195 					.ifdef MAIN.GR.@UnitInit
  1196 					jsr MAIN.GR.@UnitInit
  1197 					eif
  1198 				
  1199 					.ifdef MAIN.SPRITES.@UnitInit
  1200 					jsr MAIN.SPRITES.@UnitInit
  1201 					eif
  1202 				.endm
  1203
  1204 				; ------------------------------------------------------------
  1205
  1206 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1207 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1207 				SYSTEM: $2101..$2145
  1208 					eif
  1209
  1210 					ift .SIZEOF(MAIN.REGISTERS) > 0
  1211 					.print 'REGISTERS: ',MAIN.REGISTERS,'..',MAIN.REGISTERS+.SIZEOF(MAIN.REGISTERS)-1
  1212 					eif
  1213
  1214 					ift .SIZEOF(MAIN.SYS) > 0
  1215 					.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
  1215 				SYS: $2146..$219F
  1216 					eif
  1217
  1218 					ift .SIZEOF(MAIN.GR) > 0
  1219 					.print 'GR: ',MAIN.GR,'..',MAIN.GR+.SIZEOF(MAIN.GR)-1
  1219 				GR: $21A0..$21AB
  1220 					eif
  1221
  1222 					ift .SIZEOF(MAIN.SPRITES) > 0
  1223 					.print 'SPRITES: ',MAIN.SPRITES,'..',MAIN.SPRITES+.SIZEOF(MAIN.SPRITES)-1
  1223 				SPRITES: $21AC..$22D1
  1224 					eif
  1225
  1226 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1226 				CODE: $2000..$23EF
  1227
  1228 				; ------------------------------------------------------------
  1229
  1230 23F4				.align $04
  1231
  1232 23F4			DATAORIGIN
  1233 23F4 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1234
  1235 = 0006			VARINITSIZE	= *-DATAORIGIN
  1236 = 0014			VARDATASIZE	= 20
  1237
  1238 = 2408			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1239
  1240 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1240 				DATA: $23F4..$2408
  1241
  1242 02E0-02E1> C8 20			run START
  1243
  1244 				; ------------------------------------------------------------
  1245
  1246 				.macro	STATICDATA
  1247 				.endm
  1248
  1249 					end
