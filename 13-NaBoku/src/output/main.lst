mads 2.1.1
  1133 					opt l+
    98 = 0000				?EXTDETECT = 0
    99 = 0000				?VBXDETECT = 0
   100
   101 2075				RCASM 'res/gr_dl.asm' DL_2 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 001A			len = .sizeof(_DL_2)
     6 				mcpy	ift main.DL_2+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 11 +  MWA #MAIN.DL_2 ECX
    13 2088 A9 1A 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: const.inc
     1 = 1000			PM_ADR              = $1000;                      // players & missiles memory (2K) start address
     2 = 1300			M0_ADR              = PM_ADR + $300;              // missile 0 start memory address
     3 = 1400			P0_ADR              = PM_ADR + $400;              // player 0 start memory address
     4 = 1500			P1_ADR              = PM_ADR + $500;              // player 1 start memory address
     5 = 1000			GFX_SHIP_ADR        = $1000;                      // ship gfx memory start address, ship size = 20 bytes, 16 bytes for gfx and 4 bytes fo top/bottom empty rows
     6 = 000A			GFX_SHIP_SEG        = 10;                         // ship gfx 10 byte segment, 10B for P0 & 10B for P1
     8 = 0E0E			SHIP_COL            = $0e0e;
     9 = 0030			SHIP_LEFT_LIMIT     = 48;
    10 = 00C0			SHIP_RIGHT_LIMIT    = SHIP_LEFT_LIMIT + (16 * 9);
    11 = 0020			SHIP_TOP_LIMIT      = 32;
    12 = 00A0			SHIP_BOTTOM_LIMIT   = 10 * 16;
    14 = 0008			JOY_LEFT            = %1000;
    15 = 0004			JOY_RIGHT           = %0100;
    16 = 0002			JOY_UP              = %0010;
    17 = 0001			JOY_DOWN            = %0001;
    19 = 1100			DL_2                = $1100;                      // display list memory start address for ANTIC mode 2
    20 = E000			GAME_LMS            = $e000;                      // Load Memory Scan address
     3 1100			dl2
     4 1100 F0 70 F0		    .byte $f0,$70,$f0
     5 1103 42 00 E0		    .byte $42,a(GAME_LMS)
     6 1106 02 02 02 02 02 02 + :17 .byte 2
     7 1117 41 00 11		    .byte $41,a(dl2)
    23 					.print '$R RCASM   ',main.DL_2,'..',main.DL_2+len-1," 'res/gr_dl.asm'"
    23 				$R RCASM   $1100..$1119 'res/gr_dl.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: main.a65
   102 20B0				RCDATA 'res/gfx_ship.bin' GFX_SHIP_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0014			len = .filesize('res/gfx_ship.bin')
    28 20B0				org main.GFX_SHIP_ADR
    30 1000-1013> 00 70 7B 1E + 	ins 'res/gfx_ship.bin'
    32 					.print '$R RCDATA  ',main.GFX_SHIP_ADR,'..',*-1," 'res/gfx_ship.bin'"
    32 				$R RCDATA  $1000..$1013 'res/gfx_ship.bin'
Source: main.a65
   103 				.endl
   104
   105 				; ------------------------------------------------------------
   106
   107 1014				org CODEORIGIN
   108
   109 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
Source: main.a65
   110
   111 				; ------------------------------------------------------------
   112
   113 2000			RTLIB
   114 2000				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
   166 					opt l+
   115
   116 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   116 				ZPAGE: $0080..$00D7
   117
   118 				.print 'RTLIB: ',RTLIB,'..',*-1
   118 				RTLIB: $2000..$20C7
   119
   120 				; ------------------------------------------------------------
   121
   122 20C8			START
   123 20C8 BA				tsx
   124 20C9 8E DB 23			stx MAIN.@halt+1
   125
   126 					.ifdef fmulinit
   127 					fmulinit
   128 					eif
   129
   130 = 000E			VLEN	= VARDATASIZE-VARINITSIZE
   131 = 23FA			VADR	= DATAORIGIN+VARINITSIZE
   132
   133 					ift VADR > $BFFF
   134 					ert 'Invalid memory address range ',VADR
   135 					eli (VLEN>0) && (VLEN<=256)
   136 20CC A2 F2			ldx #256-VLEN
   137 20CE A9 00			lda #$00
   138 20D0 9D 08 23 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   139 					eli VLEN>0
   140 					@fill #VADR #VLEN #$00
   141 					eif
   142
   143 20D6 A9 08 85 82 A9 24 + 	mwa #PROGRAMSTACK psptr
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 					icl 'atari\romoff.asm'
   147 					.endif
   148
   149 20DE A2 0F			ldx #$0F					; DOS II+/D ParamStr
   150 20E0 BD 40 03 9D E0 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   151
   152 20E9 E8				inx						; X = 0
   153 20EA 86 90			stx bp						; BP = 0
   154
   155 20EC 8E 08 D2			stx audctl					; reset POKEY
   156 20EF A9 03			lda #3
   157 20F1 8D 0F D2			sta skctl
   158
   159 20F4 CA				dex						; X = 255
   160
   161 20F5				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
    11 20F5 20 9F 21			jsr MAIN.SYS.@UnitInit
    15 20F8 20 AB 21			jsr MAIN.GR.@UnitInit
    19 20FB 20 D1 22			jsr MAIN.SPRITES.@UnitInit
   162
   163 20FE			.local	MAIN						; PROCEDURE
   164
   165 20FE 4C D4 23			jmp l_0007
   166
   167 				; ------------------------------------------------------------
   168
   169 2101			.local	SYSTEM						; UNIT
   170
   171 2101			.local	FILLBYTE_0042					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   172
   173 				; ------------------------------------------------------------
   174
   175 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   176 				; as Pointer
   177 2101 B5 98			lda :STACKORIGIN,x
   178 2103 85 84			sta VALUE
   179 2105 CA				dex
   180
   181 				; ------------------------------------------------------------
   182
   183 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   184 				; as Pointer
   185 2106 B5 98			lda :STACKORIGIN,x
   186 2108 85 8C			sta COUNT
   187 210A B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   188 210C 85 8D			sta COUNT+1
   189 210E CA				dex
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   194 				; as Pointer
   195 210F B5 98			lda :STACKORIGIN,x
   196 2111 85 88			sta A
   197 2113 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   198 2115 85 89			sta A+1
   199 2117 CA				dex
   200
   201 				; ---------------------  ASM Block 029  ---------------------
   202
   203 2118 20 80 20			jsr @fill
   204
   205
   206 				; ------------------------------------------------------------
   207
   208 = 0088			A	= edx
   209 = 008C			COUNT	= ecx
   210 = 0084			VALUE	= eax
   211 211B			@exit
   212 					.ifdef @new
   213 					lda <@VarData
   214 					sta :ztmp
   215 					lda >@VarData
   216 					ldy #@VarDataSize-1
   217 					jmp @FreeMem
   218 					els
   219 211B 60				rts						; ret
   220 					eif
   221 				.endl
   222
   223 211C			.local	MOVE_004C					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   224
   225 				; ------------------------------------------------------------
   226
   227 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   228 				; as Pointer
   229 211C B5 98			lda :STACKORIGIN,x
   230 211E 85 84			sta COUNT
   231 2120 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   232 2122 85 85			sta COUNT+1
   233 2124 CA				dex
   234
   235 				; ------------------------------------------------------------
   236
   237 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   238 				; as Pointer
   239 2125 B5 98			lda :STACKORIGIN,x
   240 2127 85 8C			sta DEST
   241 2129 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   242 212B 85 8D			sta DEST+1
   243 212D CA				dex
   244
   245 				; ------------------------------------------------------------
   246
   247 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   248 				; as Pointer
   249 212E B5 98			lda :STACKORIGIN,x
   250 2130 85 88			sta SOURCE
   251 2132 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   252 2134 85 89			sta SOURCE+1
   253 2136 CA				dex
   254
   255 				; ---------------------  ASM Block 031  ---------------------
   256
   257 2137 20 2B 20			jsr @move
   258
   259
   260 				; ------------------------------------------------------------
   261
   262 = 0088			SOURCE	= edx
   263 = 008C			DEST	= ecx
   264 = 0084			COUNT	= eax
   265 213A			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 213A 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 213B			.local	PAUSE_006A					; PROCEDURE | ASSEMBLER | OVERLOAD
   278
   279 				; ---------------------  ASM Block 039  ---------------------
   280
   281 213B A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   282
   283 2141			@exit
   284 					.ifdef @new
   285 					lda <@VarData
   286 					sta :ztmp
   287 					lda >@VarData
   288 					ldy #@VarDataSize-1
   289 					jmp @FreeMem
   290 					els
   291 2141 60				rts						; ret
   292 					eif
   293 				.endl
   294
   295 				; ------------------------------------------------------------
   296
   297 = 0101			__PORTB_BANKS	= $0101
   298 = 0648			M_PI_2	= $0648
   299 = 0192			D_PI_2	= $0192
   300 = 0004			D_PI_180	= $04
   301 = 0000			MGTIA	= $00
   302 = 0080			MVBXE	= $80
   303 = 0000			VBXE_XDLADR	= $00
   304 = 0100			VBXE_BCBADR	= $0100
   305 = 1000			VBXE_MAPADR	= $1000
   306 = 5000			VBXE_OVRADR	= $5000
   307 = B000			VBXE_WINDOW	= $B000
   308 = 0000			IDLI	= $00
   309 = 0001			IVBL	= $01
   310 = 00FE			CH_DELCHR	= $FE
   311 = 009B			CH_ENTER	= $9B
   312 = 001B			CH_ESC	= $1B
   313 = 001C			CH_CURS_UP	= $1C
   314 = 001D			CH_CURS_DOWN	= $1D
   315 = 001E			CH_CURS_LEFT	= $1E
   316 = 001F			CH_CURS_RIGHT	= $1F
   317 = 007F			CH_TAB	= $7F
   318 = 009B			CH_EOL	= $9B
   319 = 007D			CH_CLR	= $7D
   320 = 00FD			CH_BELL	= $FD
   321 = 007E			CH_DEL	= $7E
   322 = 009C			CH_DELLINE	= $9C
   323 = 009D			CH_INSLINE	= $9D
   324 = 0000			COLOR_BLACK	= $00
   325 = 000E			COLOR_WHITE	= $0E
   326 = 0032			COLOR_RED	= $32
   327 = 0096			COLOR_CYAN	= $96
   328 = 0068			COLOR_VIOLET	= $68
   329 = 00C4			COLOR_GREEN	= $C4
   330 = 0074			COLOR_BLUE	= $74
   331 = 00EE			COLOR_YELLOW	= $EE
   332 = 0028			COLOR_ORANGE	= $28
   333 = 00E4			COLOR_BROWN	= $E4
   334 = 003C			COLOR_LIGHTRED	= $3C
   335 = 0004			COLOR_GRAY1	= $04
   336 = 0006			COLOR_GRAY2	= $06
   337 = 000A			COLOR_GRAY3	= $0A
   338 = 00CC			COLOR_LIGHTGREEN	= $CC
   339 = 007C			COLOR_LIGHTBLUE	= $7C
   340 = 0004			FMOPENREAD	= $04
   341 = 0008			FMOPENWRITE	= $08
   342 = 0009			FMOPENAPPEND	= $09
   343 = 000C			FMOPENREADWRITE	= $0C
   344 = 23F4			SCREENWIDTH	= DATAORIGIN+$0000
   345 = 23F6			SCREENHEIGHT	= DATAORIGIN+$0002
   346 = 23F8			DATESEPARATOR	= DATAORIGIN+$0004
   347 = D014			TVSYSTEM	= $D014
   348 = D20A			RND	= $D20A
   349 = 02C0			adr.PALETTE	= $02C0
   350 2142			.var PALETTE	= adr.PALETTE .word
   351 = D012			adr.HPALETTE	= $D012
   352 2142			.var HPALETTE	= adr.HPALETTE .word
   353 = 23F9			FILEMODE	= DATAORIGIN+$0005
   354 = 23FA			GRAPHMODE	= DATAORIGIN+$0006
   355 = 23FB			IORESULT	= DATAORIGIN+$0007
   356 = 23FC			EOLN	= DATAORIGIN+$0008
   357 = 23FD			RNDSEED	= DATAORIGIN+$0009
   358
   359 = 2142 C0 02		PALETTE
   359 = 2144 12 D0		HPALETTE
   359 				.endl							; UNIT SYSTEM
   360
   361 				; ------------------------------------------------------------
   362
   363 2146			.local	REGISTERS					; UNIT
   364
   365 				; ------------------------------------------------------------
   366
   367 = 0014			RTCLOK	= $14
   368 = D000			HPOSP0	= $D000
   369 = D001			HPOSP1	= $D001
   370 = D004			HPOSM0	= $D004
   371 = D005			HPOSM1	= $D005
   372 = D006			HPOSM2	= $D006
   373 = D007			HPOSM3	= $D007
   374 = D008			SIZEP0	= $D008
   375 = D009			SIZEP1	= $D009
   376 = D00A			SIZEP2	= $D00A
   377 = D00B			SIZEP3	= $D00B
   378 = D00C			SIZEM	= $D00C
   379 = D011			GRAFM	= $D011
   380 = D012			COLPM0	= $D012
   381 = D013			COLPM1	= $D013
   382 = D014			COLPM2	= $D014
   383 = D015			COLPM3	= $D015
   384 = D017			COLPF1	= $D017
   385 = D018			COLPF2	= $D018
   386 = D01A			COLBK	= $D01A
   387 = D01B			PRIOR	= $D01B
   388 = D01D			GRACTL	= $D01D
   389 = D20A			RND	= $D20A
   390 = D300			PORTA	= $D300
   391 = D301			PORTB	= $D301
   392 = D302			PACTL	= $D302
   393 = D400			DMACTL	= $D400
   394 = D402			DLIST	= $D402
   395 = D407			PMBASE	= $D407
   396 = D40A			WSYNC	= $D40A
   397 = D40B			VCOUNT	= $D40B
   398 = D40E			NMIEN	= $D40E
   399 = FFFA			NMIVEC	= $FFFA
   400 = D000			HPOSP01	= $D000
   401 = D008			SIZEP01	= $D008
   402 = D012			COLPM01	= $D012
   403 = 00FF			B00I	= $FF
   404 = 00FE			B01I	= $FE
   405
   406 				.endl							; UNIT REGISTERS
   407
   408 				; ------------------------------------------------------------
   409
   410 2146			.local	SYS						; UNIT
   411
   412 2146			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
   413
   414 				; ---------------------  ASM Block 049  ---------------------
   415
   416
   417 				      bit NMIST \ bpl vbi     ; check kind of interrupt
   417 2146 2C 0F D4		      BIT NMIST 
   417 2149 10 03		 BPL VBI     
   418 = 214B			.def  :__dlijmp
   419 214B 4C 53 21		      jmp __off               ; VDSLST
   420 214E E6 14		vbi:  inc RTCLOK+2
   421 = 2150			.def  :__vbijmp
   422 2150 4C 53 21		      jmp __off               ; VBIVEC
   423 = 2153			.def  :__off
   424
   425 2153 40				rti						; ret
   426 				.endl
   427
   428 2154			.local	SETVBI						; PROCEDURE | ASSEMBLER
   429
   430 				; ------------------------------------------------------------
   431
   432 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   433 				; as Pointer
   434 2154 B5 98			lda :STACKORIGIN,x
   435 2156 8D FF 23			sta A
   436 2159 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   437 215B 8D 00 24			sta A+1
   438 215E CA				dex
   439
   440 				; ---------------------  ASM Block 050  ---------------------
   441
   442
   443 215F AD FF 23 8D 51 21 +   mwa a __vbijmp+1
   444
   445
   446 				; ------------------------------------------------------------
   447
   448 = 23FF			A	= DATAORIGIN+$000B
   449
   450 = 23FF			@VarData	= A
   451 = 0002			@VarDataSize	= 2
   452
   453 216B			@exit
   454 					.ifdef @new
   455 					lda <@VarData
   456 					sta :ztmp
   457 					lda >@VarData
   458 					ldy #@VarDataSize-1
   459 					jmp @FreeMem
   460 					els
   461 216B 60				rts						; ret
   462 					eif
   463 				.endl
   464
   465 216C			.local	SETDLI						; PROCEDURE | ASSEMBLER
   466
   467 				; ------------------------------------------------------------
   468
   469 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   470 				; as Pointer
   471 216C B5 98			lda :STACKORIGIN,x
   472 216E 8D 01 24			sta A
   473 2171 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   474 2173 8D 02 24			sta A+1
   475 2176 CA				dex
   476
   477 				; ---------------------  ASM Block 051  ---------------------
   478
   479
   480 2177 AD 01 24 8D 4C 21 +   mwa a __dlijmp+1
   481
   482
   483 				; ------------------------------------------------------------
   484
   485 = 2401			A	= DATAORIGIN+$000D
   486
   487 = 2401			@VarData	= A
   488 = 0002			@VarDataSize	= 2
   489
   490 2183			@exit
   491 					.ifdef @new
   492 					lda <@VarData
   493 					sta :ztmp
   494 					lda >@VarData
   495 					ldy #@VarDataSize-1
   496 					jmp @FreeMem
   497 					els
   498 2183 60				rts						; ret
   499 					eif
   500 				.endl
   501
   502 2184			.local	SYSTEMOFF					; PROCEDURE
   503
   504 				; ---------------------  ASM Block 054  ---------------------
   505
   506 2184 78			 sei 
   507
   508 				; optimize OK (SYS), line = 63
   509
   510 2185 A9 00			lda #$00
   511 2187 8D 0E D4			sta REGISTERS.NMIEN
   512 218A A9 FE			lda #$FE
   513 218C 8D 01 D3			sta REGISTERS.PORTB
   514 218F A9 46			lda <NMI
   515 2191 8D FA FF			sta REGISTERS.NMIVEC
   516 2194 A9 21			lda >NMI
   517 2196 8D FB FF			sta REGISTERS.NMIVEC+1
   518 2199 A9 C0			lda #$C0
   519 219B 8D 0E D4			sta REGISTERS.NMIEN
   520 219E			@exit
   521 					.ifdef @new
   522 					lda <@VarData
   523 					sta :ztmp
   524 					lda >@VarData
   525 					ldy #@VarDataSize-1
   526 					jmp @FreeMem
   527 					els
   528 219E 60				rts						; ret
   529 					eif
   530 				.endl
   531
   532 				; ------------------------------------------------------------
   533 				; ------------------------------------------------------------
   534 219F			@UnitInit
   535
   536 219F 60				rts
   537
   538 				; ------------------------------------------------------------
   539
   540 				.endl							; UNIT SYS
   541
   542 				; ------------------------------------------------------------
   543
   544 21A0			.local	GR						; UNIT
   545
   546 21A0			.local	MODE2						; PROCEDURE
   547
   548 				; optimize OK (GR), line = 20
   549
   550 21A0 A9 00			lda #$00
   551 21A2 8D 02 D4			sta REGISTERS.DLIST
   552 21A5 A9 11			lda #$11
   553 21A7 8D 03 D4			sta REGISTERS.DLIST+1
   554 21AA			@exit
   555 					.ifdef @new
   556 					lda <@VarData
   557 					sta :ztmp
   558 					lda >@VarData
   559 					ldy #@VarDataSize-1
   560 					jmp @FreeMem
   561 					els
   562 21AA 60				rts						; ret
   563 					eif
   564 				.endl
   565
   566 				; ------------------------------------------------------------
   567 				; ------------------------------------------------------------
   568 21AB			@UnitInit
   569
   570 21AB 60				rts
   571
   572 				; ------------------------------------------------------------
   573
   574 = 1000			PM_ADR	= $1000
   575 = 1300			M0_ADR	= $1300
   576 = 1400			P0_ADR	= $1400
   577 = 1500			P1_ADR	= $1500
   578 = 1000			GFX_SHIP_ADR	= $1000
   579 = 000A			GFX_SHIP_SEG	= $0A
   580 = 0E0E			SHIP_COL	= $0E0E
   581 = 0030			SHIP_LEFT_LIMIT	= $30
   582 = 00C0			SHIP_RIGHT_LIMIT	= $C0
   583 = 0020			SHIP_TOP_LIMIT	= $20
   584 = 00A0			SHIP_BOTTOM_LIMIT	= $A0
   585 = 0008			JOY_LEFT	= $08
   586 = 0004			JOY_RIGHT	= $04
   587 = 0002			JOY_UP	= $02
   588 = 0001			JOY_DOWN	= $01
   589 = 1100			DL_2	= $1100
   590 = E000			GAME_LMS	= $E000
   591
   592 				.endl							; UNIT GR
   593
   594 				; ------------------------------------------------------------
   595
   596 21AC			.local	SPRITES						; UNIT
   597
   598 21AC			.local	COPYSHIP					; PROCEDURE
   599
   600 				; optimize OK (SPRITES), line = 30
   601
   602 21AC A5 02			lda BSHIPY
   603 21AE 85 8C			sta :ecx
   604 21B0 A9 14			lda #$14
   605 21B2 85 8D			sta :ecx+1
   606 21B4 A9 00			lda #$00
   607 21B6 85 88			sta :edx
   608 21B8 A9 10			lda #$10
   609 21BA 85 89			sta :edx+1
   610 21BC A9 0A			lda #$0A
   611 21BE 85 84			sta :eax
   612 21C0 A9 00			lda #$00
   613 21C2 85 85			sta :eax+1
   614 21C4 20 2B 20			jsr @move
   615
   616 				; optimize OK (SPRITES), line = 31
   617
   618 21C7 A5 02			lda BSHIPY
   619 21C9 85 8C			sta :ecx
   620 21CB A9 15			lda #$15
   621 21CD 85 8D			sta :ecx+1
   622 21CF A9 0A			lda #$0A
   623 21D1 85 88			sta :edx
   624 21D3 A9 10			lda #$10
   625 21D5 85 89			sta :edx+1
   626 21D7 A9 0A			lda #$0A
   627 21D9 85 84			sta :eax
   628 21DB A9 00			lda #$00
   629 21DD 85 85			sta :eax+1
   630 21DF 20 2B 20			jsr @move
   631 21E2			@exit
   632 					.ifdef @new
   633 					lda <@VarData
   634 					sta :ztmp
   635 					lda >@VarData
   636 					ldy #@VarDataSize-1
   637 					jmp @FreeMem
   638 					els
   639 21E2 60				rts						; ret
   640 					eif
   641 				.endl
   642
   643 21E3			.local	INIT						; PROCEDURE
   644
   645 				; optimize OK (SPRITES), line = 36
   646
   647 21E3				.LOCAL
   648 21E3 A0 00			ldy #$00
   649 21E5 98				tya
   650 21E6 99 00 13 99 80 13 + fill	:10 sta $1300+#*$80,y
   651 2204 C8				iny
   652 2205 10 DF			bpl fill
   653 					.ENDL
   654
   655 				; optimize OK (SPRITES), line = 37
   656
   657 2207 A0 70			ldy #256-$90
   658 2209 A9 FF			lda #$FF
   659 220B 99 B0 12 C8 D0 FA		sta:rne $1320+$90-256,y+
   660
   661 				; optimize OK (SPRITES), line = 39
   662
   663 2211 A9 10			lda #$10
   664 2213 8D 07 D4			sta REGISTERS.PMBASE
   665
   666 				; optimize OK (SPRITES), line = 40
   667
   668 2216 A9 0A			lda #$0A
   669 2218 8D 15 D0			sta REGISTERS.COLPM3
   670 221B A9 0E			lda #$0E
   671 221D 8D 12 D0			sta REGISTERS.COLPM01
   672 2220 8D 13 D0			sta REGISTERS.COLPM01+1
   673
   674 				; optimize OK (SPRITES), line = 41
   675
   676 2223 A9 50			lda #$50
   677 2225 85 02			sta BSHIPY
   678 2227 A9 30			lda #$30
   679 2229 85 00			sta BHPOSP0
   680 222B A9 38			lda #$38
   681 222D 85 01			sta BHPOSP1
   682 222F A5 00			lda WSHIPX
   683 2231 8D 00 D0			sta REGISTERS.HPOSP01
   684 2234 A5 01			lda WSHIPX+1
   685 2236 8D 01 D0			sta REGISTERS.HPOSP01+1
   686
   687 				; optimize OK (SPRITES), line = 42
   688
   689 2239 A9 00			lda #$00
   690 223B 8D 08 D0			sta REGISTERS.SIZEP01
   691 223E 8D 09 D0			sta REGISTERS.SIZEP01+1
   692 2241 8D 0C D0			sta REGISTERS.SIZEM
   693 2244 8D 1B D0			sta REGISTERS.PRIOR
   694 2247 A9 03			lda #$03
   695 2249 8D 1D D0			sta REGISTERS.GRACTL
   696
   697 				; optimize FAIL ('COPYSHIP', SPRITES), line = 44
   698
   699 224C 20 AC 21			jsr COPYSHIP
   700 224F			@exit
   701 					.ifdef @new
   702 					lda <@VarData
   703 					sta :ztmp
   704 					lda >@VarData
   705 					ldy #@VarDataSize-1
   706 					jmp @FreeMem
   707 					els
   708 224F 60				rts						; ret
   709 					eif
   710 				.endl
   711
   712 2250			.local	MOVESHIP					; PROCEDURE
   713
   714 				; optimize OK (SPRITES), line = 50
   715
   716 2250 A9 0C			lda #$0C
   717 2252 85 FF			sta BMASK
   718
   719 				; optimize OK (SPRITES), line = 51
   720
   721 2254 A9 01			lda #$01
   722 2256 85 FE			sta REGISTERS.B01I
   723
   724 2258			l_00F1
   725 				; --- ForToDoCondition
   726
   727 				; optimize OK (SPRITES), line = 52
   728
   729 2258 A5 03			lda JOYDIRECTION
   730 225A 25 FF			and BMASK
   731 225C 8D 03 24			sta @CASETMP_0002
   732 225F C9 04			cmp #$04
   733 2261 D0 20			jne l_0110
   734 2263			@
   735
   736 				; optimize OK (SPRITES), line = 54
   737
   738 2263 A5 01			lda BHPOSP1
   739 2265 C9 C0			cmp #$C0
   740 2267 B0 17			jcs l_0122
   741
   742 				; optimize OK (SPRITES), line = 55
   743
   744 2269 A5 00			lda WSHIPX
   745 226B 18 69 01			add #$01
   746 226E 85 00			sta WSHIPX
   747 2270 A5 01			lda WSHIPX+1
   748 2272 69 01			adc #$01
   749 2274 85 01			sta WSHIPX+1
   750 2276 A5 00			lda WSHIPX
   751 2278 8D 00 D0			sta REGISTERS.HPOSP01
   752 227B A5 01			lda WSHIPX+1
   753 227D 8D 01 D0			sta REGISTERS.HPOSP01+1
   754 2280			l_0122
   755
   756 2280 4C C8 22			jmp a_0002
   757 2283			l_0110
   758 2283 C9 08			cmp #$08
   759 2285 D0 20			jne l_0134
   760 2287			@
   761
   762 				; optimize OK (SPRITES), line = 59
   763
   764 2287 A5 00			lda BHPOSP0
   765 2289 C9 31			cmp #$31
   766 228B 90 17			jcc l_0146
   767
   768 				; optimize OK (SPRITES), line = 60
   769
   770 228D A5 00			lda WSHIPX
   771 228F 38 E9 01			sub #$01
   772 2292 85 00			sta WSHIPX
   773 2294 A5 01			lda WSHIPX+1
   774 2296 E9 01			sbc #$01
   775 2298 85 01			sta WSHIPX+1
   776 229A A5 00			lda WSHIPX
   777 229C 8D 00 D0			sta REGISTERS.HPOSP01
   778 229F A5 01			lda WSHIPX+1
   779 22A1 8D 01 D0			sta REGISTERS.HPOSP01+1
   780 22A4			l_0146
   781
   782 22A4 4C C8 22			jmp a_0002
   783 22A7			l_0134
   784 22A7 C9 02			cmp #$02
   785 22A9 D0 0E			jne l_0158
   786 22AB			@
   787
   788 				; optimize OK (SPRITES), line = 64
   789
   790 22AB A5 02			lda BSHIPY
   791 22AD C9 21			cmp #$21
   792 22AF 90 05			jcc l_016A
   793
   794 				; optimize FAIL (0, SPRITES), line = 65
   795
   796 22B1 C6 02			dec BSHIPY
   797 22B3 20 AC 21			jsr COPYSHIP
   798 22B6			l_016A
   799
   800 22B6 4C C8 22			jmp a_0002
   801 22B9			l_0158
   802 22B9 C9 01			cmp #$01
   803 22BB D0 0B			jne l_017B
   804 22BD			@
   805
   806 				; optimize OK (SPRITES), line = 69
   807
   808 22BD A5 02			lda BSHIPY
   809 22BF C9 A0			cmp #$A0
   810 22C1 B0 05			jcs l_018D
   811
   812 				; optimize FAIL (0, SPRITES), line = 70
   813
   814 22C3 E6 02			inc BSHIPY
   815 22C5 20 AC 21			jsr COPYSHIP
   816 22C8			l_018D
   817
   818 22C8			l_017B
   819 22C8			a_0002
   820
   821 				; optimize OK (SPRITES), line = 74
   822
   823 22C8 A9 03			lda #$03
   824 22CA 85 FF			sta BMASK
   825
   826 				; --- ForToDoEpilog
   827 22CC C6 FE			dec REGISTERS.B01I
   828 22CE 10 88			jpl l_00F1
   829 22D0			l_00FF
   830
   831 				; ------------------------------------------------------------
   832
   833 = 00FF			BMASK	= $FF
   834 = 0000			@FORTMP_00EE	= $00
   835 = 2403			@CASETMP_0002	= DATAORIGIN+$000F
   836
   837 = 2403			@VarData	= @CASETMP_0002
   838 = 0001			@VarDataSize	= 1
   839
   840 22D0			@exit
   841 					.ifdef @new
   842 					lda <@VarData
   843 					sta :ztmp
   844 					lda >@VarData
   845 					ldy #@VarDataSize-1
   846 					jmp @FreeMem
   847 					els
   848 22D0 60				rts						; ret
   849 					eif
   850 				.endl
   851
   852 				; ------------------------------------------------------------
   853 				; ------------------------------------------------------------
   854 22D1			@UnitInit
   855
   856 22D1 60				rts
   857
   858 				; ------------------------------------------------------------
   859
   860 = 0003			JOYDIRECTION	= $03
   861 = 1000			PM_ADR	= $1000
   862 = 1300			M0_ADR	= $1300
   863 = 1400			P0_ADR	= $1400
   864 = 1500			P1_ADR	= $1500
   865 = 1000			GFX_SHIP_ADR	= $1000
   866 = 000A			GFX_SHIP_SEG	= $0A
   867 = 0E0E			SHIP_COL	= $0E0E
   868 = 0030			SHIP_LEFT_LIMIT	= $30
   869 = 00C0			SHIP_RIGHT_LIMIT	= $C0
   870 = 0020			SHIP_TOP_LIMIT	= $20
   871 = 00A0			SHIP_BOTTOM_LIMIT	= $A0
   872 = 0008			JOY_LEFT	= $08
   873 = 0004			JOY_RIGHT	= $04
   874 = 0002			JOY_UP	= $02
   875 = 0001			JOY_DOWN	= $01
   876 = 1100			DL_2	= $1100
   877 = E000			GAME_LMS	= $E000
   878 = 0000			BHPOSP0	= $00
   879 = 0001			BHPOSP1	= $01
   880 = 0002			BSHIPY	= $02
   881 = 0000			WSHIPX	= $00
   882
   883 				.endl							; UNIT SPRITES
   884
   885 22D2			.local	VBI						; PROCEDURE | INTERRUPT
   886
   887 				; ---------------------  ASM Block 055  ---------------------
   888
   889 22D2 48 8A 48 98 48	 phr 
   890
   891 				; ---------------------  ASM Block 056  ---------------------
   892
   893 22D7 68 A8 68 AA 68	 plr 
   894 22DC 40				rti						; ret
   895 				.endl
   896
   897 22DD			.local	JOY						; PROCEDURE | INTERRUPT
   898
   899 				; ---------------------  ASM Block 057  ---------------------
   900
   901 22DD 48 8A 48 98 48	 phr 
   902
   903 				; ---------------------  ASM Block 058  ---------------------
   904
   905 22E2 8D 0A D4		 sta WSYNC 
   906
   907 				; optimize OK (main.pas), line = 31
   908
   909 22E5 A9 0F			lda #$0F
   910 22E7 8D 1A D0			sta REGISTERS.COLBK
   911
   912 				; optimize OK (main.pas), line = 33
   913
   914 22EA AD 00 D3			lda REGISTERS.PORTA
   915 22ED 85 03			sta SPRITES.JOYDIRECTION
   916
   917 				; optimize OK (main.pas), line = 34
   918
   919 22EF 29 0F			and #$0F
   920 22F1 C9 0F			cmp #$0F
   921 22F3 F0 03			jeq l_01CE
   922 22F5 20 50 22			jsr SPRITES.MOVESHIP
   923 22F8			l_01CE
   924
   925 				; optimize OK (main.pas), line = 36
   926
   927 22F8 A9 00			lda #$00
   928 22FA 8D 1A D0			sta REGISTERS.COLBK
   929
   930 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 38
   931
   932 22FD E8				inx
   933 22FE AD 06 24 95 98		mva PSTARS :STACKORIGIN,x
   934 2303 AD 07 24 95 A8		mva PSTARS+1 :STACKORIGIN+STACKWIDTH,x
   935 2308 20 6C 21			jsr SYS.SETDLI
   936
   937 				; ---------------------  ASM Block 059  ---------------------
   938
   939 230B 68 A8 68 AA 68	 plr 
   940 2310 40				rti						; ret
   941 				.endl
   942
   943 2311			.local	STARS						; PROCEDURE | INTERRUPT
   944
   945 				; ---------------------  ASM Block 060  ---------------------
   946
   947 2311 48 8A 48 98 48	 phr 
   948
   949 				; optimize OK (main.pas), line = 47
   950
   951 2316 A9 7C			lda #$7C
   952 2318 85 FE			sta B01I
   953
   954 231A			l_01E6
   955 				; --- ForToDoCondition
   956
   957 				; ---------------------  ASM Block 061  ---------------------
   958
   959 231A 8D 0A D4		 sta WSYNC 
   960
   961 				; optimize OK (main.pas), line = 49
   962
   963 231D A4 FE			ldy B01I
   964 231F B9 00 12			lda adr.ASTARS,y
   965 2322 8D 07 D0			sta REGISTERS.HPOSM3
   966
   967 				; optimize OK (main.pas), line = 50
   968
   969 2325 B9 00 12			lda adr.ASTARS,y
   970 2328 38 F9 7D 12			sub adr.ASPEED,y
   971 232C 99 00 12			sta adr.ASTARS,y
   972
   973 				; optimize OK (main.pas), line = 51
   974
   975 232F AD 0A D2			lda SYSTEM.RND
   976 2332 8D 15 D0			sta REGISTERS.COLPM3
   977
   978 				; --- ForToDoEpilog
   979 2335 C6 FE			dec B01I
   980 2337 10 E1			jpl l_01E6
   981 2339			l_01F4
   982
   983 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 54
   984
   985 2339 E8				inx
   986 233A AD 04 24 95 98		mva PJOY :STACKORIGIN,x
   987 233F AD 05 24 95 A8		mva PJOY+1 :STACKORIGIN+STACKWIDTH,x
   988 2344 20 6C 21			jsr SYS.SETDLI
   989
   990 				; ---------------------  ASM Block 062  ---------------------
   991
   992 2347 68 A8 68 AA 68	 plr 
   993
   994 				; ------------------------------------------------------------
   995
   996 = 0000			@FORTMP_01E3	= $00
   997 234C 40				rti						; ret
   998 				.endl
   999
  1000 234D			.local	INIT						; PROCEDURE
  1001
  1002 				; optimize FAIL ('SYSTEM.PAUSE_006A', main.pas), line = 61
  1003
  1004 234D 20 3B 21			jsr SYSTEM.PAUSE_006A
  1005 2350 A9 00			lda #$00
  1006 2352 8D 00 D4			sta REGISTERS.DMACTL
  1007 2355 20 84 21			jsr SYS.SYSTEMOFF
  1008
  1009 				; optimize OK (main.pas), line = 63
  1010
  1011 2358 A9 00			lda #$00
  1012 235A 85 88			sta :edx
  1013 235C A9 E0			lda #$E0
  1014 235E 85 89			sta :edx+1
  1015 2360 A9 C0			lda #$C0
  1016 2362 85 8C			sta :ecx
  1017 2364 A9 03			lda #$03
  1018 2366 85 8D			sta :ecx+1
  1019 2368 A9 00			lda #$00
  1020 236A 85 84			sta :eax
  1021 236C 20 80 20			jsr @fill
  1022
  1023 				; optimize OK (main.pas), line = 65
  1024
  1025 236F A9 7C			lda #$7C
  1026 2371 85 FE			sta B01I
  1027
  1028 2373			l_022B
  1029 				; --- ForToDoCondition
  1030
  1031 				; optimize OK (main.pas), line = 66
  1032
  1033 2373 A4 FE			ldy B01I
  1034 2375 AD 0A D2			lda SYSTEM.RND
  1035 2378 99 00 12			sta adr.ASTARS,y
  1036
  1037 				; optimize OK (main.pas), line = 67
  1038
  1039 237B 29 03			and #$03
  1040 237D 18 69 01			add #$01
  1041 2380 99 7D 12			sta adr.ASPEED,y
  1042
  1043 				; --- ForToDoEpilog
  1044 2383 C6 FE			dec B01I
  1045 2385 10 EC			jpl l_022B
  1046 2387			l_0239
  1047
  1048 				; optimize FAIL ('SPRITES.INIT', main.pas), line = 70
  1049
  1050 2387 20 E3 21			jsr SPRITES.INIT
  1051
  1052 				; optimize FAIL ('GR.MODE2', main.pas), line = 71
  1053
  1054 238A 20 A0 21			jsr GR.MODE2
  1055 238D A9 00			lda #$00
  1056 238F 8D 1A D0			sta REGISTERS.COLBK
  1057 2392 A9 02			lda #$02
  1058 2394 8D 18 D0			sta REGISTERS.COLPF2
  1059
  1060 				; optimize OK (main.pas), line = 72
  1061
  1062 2397 AD 02 D3			lda REGISTERS.PACTL
  1063 239A 09 04			ora #$04
  1064 239C 8D 02 D3			sta REGISTERS.PACTL
  1065
  1066 				; optimize OK (main.pas), line = 73
  1067
  1068 239F A9 DD			lda <JOY
  1069 23A1 8D 04 24			sta PJOY
  1070 23A4 A9 22			lda >JOY
  1071 23A6 8D 05 24			sta PJOY+1
  1072 23A9 A9 11			lda <STARS
  1073 23AB 8D 06 24			sta PSTARS
  1074 23AE A9 23			lda >STARS
  1075 23B0 8D 07 24			sta PSTARS+1
  1076
  1077 				; optimize FAIL ('SYS.SETVBI', main.pas), line = 75
  1078
  1079 23B3 E8				inx
  1080 23B4 A9 D2 95 98			mva <VBI :STACKORIGIN,x
  1081 23B8 A9 22 95 A8			mva >VBI :STACKORIGIN+STACKWIDTH,x
  1082 23BC 20 54 21			jsr SYS.SETVBI
  1083
  1084 				; optimize FAIL ('SYS.SETDLI', main.pas), line = 76
  1085
  1086 23BF E8				inx
  1087 23C0 A9 DD 95 98			mva <JOY :STACKORIGIN,x
  1088 23C4 A9 22 95 A8			mva >JOY :STACKORIGIN+STACKWIDTH,x
  1089 23C8 20 6C 21			jsr SYS.SETDLI
  1090
  1091 				; optimize FAIL ('SYSTEM.PAUSE_006A', main.pas), line = 78
  1092
  1093 23CB 20 3B 21			jsr SYSTEM.PAUSE_006A
  1094 23CE A9 3E			lda #$3E
  1095 23D0 8D 00 D4			sta REGISTERS.DMACTL
  1096
  1097 				; ------------------------------------------------------------
  1098
  1099 = 0000			@FORTMP_0228	= $00
  1100 23D3			@exit
  1101 					.ifdef @new
  1102 					lda <@VarData
  1103 					sta :ztmp
  1104 					lda >@VarData
  1105 					ldy #@VarDataSize-1
  1106 					jmp @FreeMem
  1107 					els
  1108 23D3 60				rts						; ret
  1109 					eif
  1110 				.endl
  1111 23D4			l_0007
  1112
  1113 				; optimize FAIL ('INIT', main.pas), line = 82
  1114
  1115 23D4 20 4D 23			jsr INIT
  1116
  1117 				; --- RepeatUntilProlog
  1118 23D7			l_027C
  1119
  1120 				; optimize OK (main.pas), line = 83
  1121
  1122 23D7 4C D7 23			jmp l_027C
  1123
  1124 				; ------------------------------------------------------------
  1125
  1126 = 1000			PM_ADR	= $1000
  1127 = 1300			M0_ADR	= $1300
  1128 = 1400			P0_ADR	= $1400
  1129 = 1500			P1_ADR	= $1500
  1130 = 1000			GFX_SHIP_ADR	= $1000
  1131 = 000A			GFX_SHIP_SEG	= $0A
  1132 = 0E0E			SHIP_COL	= $0E0E
  1133 = 0030			SHIP_LEFT_LIMIT	= $30
  1134 = 00C0			SHIP_RIGHT_LIMIT	= $C0
  1135 = 0020			SHIP_TOP_LIMIT	= $20
  1136 = 00A0			SHIP_BOTTOM_LIMIT	= $A0
  1137 = 0008			JOY_LEFT	= $08
  1138 = 0004			JOY_RIGHT	= $04
  1139 = 0002			JOY_UP	= $02
  1140 = 0001			JOY_DOWN	= $01
  1141 = 1100			DL_2	= $1100
  1142 = E000			GAME_LMS	= $E000
  1143 = 00FE			B01I	= $FE
  1144 = 1200			adr.ASTARS	= $1200
  1145 23DA			.var ASTARS	= adr.ASTARS .word
  1146 = 127D			adr.ASPEED	= $127D
  1147 23DA			.var ASPEED	= adr.ASPEED .word
  1148 = 2404			PJOY	= DATAORIGIN+$0010
  1149 = 2406			PSTARS	= DATAORIGIN+$0012
  1150 23DA			@exit
  1151
  1152 23DA A2 00		@halt	ldx #$00
  1153 23DC 9A				txs
  1154 					.ifdef MAIN.@DEFINES.ROMOFF
  1155 					inc portb
  1156 					.endif
  1157
  1158 23DD A0 01			ldy #$01
  1159
  1160 23DF 60				rts
  1161
  1162 				; ------------------------------------------------------------
  1163
  1164 23E0 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1165
  1166 				; ------------------------------------------------------------
  1167
  1168 23F0			.local	@DEFINES
  1169 23F0			ATARI
  1170 				.endl
  1171
  1172 23F0			.local	@RESOURCE
  1173 				.endl
  1174
  1175 = 23F0 00 12		ASTARS
  1175 = 23F2 7D 12		ASPEED
  1175 				.endl							; MAIN
  1176
  1177 				; ------------------------------------------------------------
  1178 				; ------------------------------------------------------------
  1179
  1180 				.macro	UNITINITIALIZATION
  1181 				
  1182 					.ifdef MAIN.SYSTEM.@UnitInit
  1183 					jsr MAIN.SYSTEM.@UnitInit
  1184 					eif
  1185 				
  1186 					.ifdef MAIN.REGISTERS.@UnitInit
  1187 					jsr MAIN.REGISTERS.@UnitInit
  1188 					eif
  1189 				
  1190 					.ifdef MAIN.SYS.@UnitInit
  1191 					jsr MAIN.SYS.@UnitInit
  1192 					eif
  1193 				
  1194 					.ifdef MAIN.GR.@UnitInit
  1195 					jsr MAIN.GR.@UnitInit
  1196 					eif
  1197 				
  1198 					.ifdef MAIN.SPRITES.@UnitInit
  1199 					jsr MAIN.SPRITES.@UnitInit
  1200 					eif
  1201 				.endm
  1202
  1203 				; ------------------------------------------------------------
  1204
  1205 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1206 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1206 				SYSTEM: $2101..$2145
  1207 					eif
  1208
  1209 					ift .SIZEOF(MAIN.REGISTERS) > 0
  1210 					.print 'REGISTERS: ',MAIN.REGISTERS,'..',MAIN.REGISTERS+.SIZEOF(MAIN.REGISTERS)-1
  1211 					eif
  1212
  1213 					ift .SIZEOF(MAIN.SYS) > 0
  1214 					.print 'SYS: ',MAIN.SYS,'..',MAIN.SYS+.SIZEOF(MAIN.SYS)-1
  1214 				SYS: $2146..$219F
  1215 					eif
  1216
  1217 					ift .SIZEOF(MAIN.GR) > 0
  1218 					.print 'GR: ',MAIN.GR,'..',MAIN.GR+.SIZEOF(MAIN.GR)-1
  1218 				GR: $21A0..$21AB
  1219 					eif
  1220
  1221 					ift .SIZEOF(MAIN.SPRITES) > 0
  1222 					.print 'SPRITES: ',MAIN.SPRITES,'..',MAIN.SPRITES+.SIZEOF(MAIN.SPRITES)-1
  1222 				SPRITES: $21AC..$22D1
  1223 					eif
  1224
  1225 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1225 				CODE: $2000..$23EF
  1226
  1227 				; ------------------------------------------------------------
  1228
  1229 23F4				.align $04
  1230
  1231 23F4			DATAORIGIN
  1232 23F4 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1233
  1234 = 0006			VARINITSIZE	= *-DATAORIGIN
  1235 = 0014			VARDATASIZE	= 20
  1236
  1237 = 2408			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1238
  1239 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1239 				DATA: $23F4..$2408
  1240
  1241 02E0-02E1> C8 20			run START
  1242
  1243 				; ------------------------------------------------------------
  1244
  1245 				.macro	STATICDATA
  1246 				.endm
  1247
  1248 					end
